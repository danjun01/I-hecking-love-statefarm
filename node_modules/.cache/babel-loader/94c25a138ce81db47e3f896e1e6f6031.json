{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nfunction _export(target, all) {\n  for (var name in all) {\n    Object.defineProperty(target, name, {\n      enumerable: true,\n      get: all[name]\n    });\n  }\n}\n_export(exports, {\n  MobileNav: function MobileNav() {\n    return _MobileNav;\n  },\n  default: function _default() {\n    return _default2;\n  }\n});\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _framerMotion = require(\"framer-motion\");\nvar _deepmerge = _interopRequireDefault(require(\"deepmerge\"));\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\nvar _reactMergeRefs = _interopRequireDefault(require(\"react-merge-refs\"));\nvar _tailwindMerge = require(\"tailwind-merge\");\nvar _objectsToString = _interopRequireDefault(require(\"../../utils/objectsToString\"));\nvar _theme = require(\"../../context/theme\");\nvar _navbar = require(\"../../types/components/navbar\");\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nvar _MobileNav = _react.default.forwardRef(function (_param, ref) {\n  var open = _param.open,\n    animate = _param.animate,\n    className = _param.className,\n    children = _param.children,\n    rest = _objectWithoutProperties(_param, [\"open\", \"animate\", \"className\", \"children\"]);\n  var _$ref;\n  var mobileNavRef = _react.default.useRef(null);\n  var navbar = (0, _theme.useTheme)().navbar;\n  var styles = navbar.styles;\n  var mobileNav = styles.base.mobileNav;\n  animate = animate !== null && animate !== void 0 ? animate : {};\n  className = className !== null && className !== void 0 ? className : \"\";\n  var classes = (0, _tailwindMerge.twMerge)((0, _classnames.default)((0, _objectsToString.default)(mobileNav)), className);\n  var mainAnimation = {\n    unmount: {\n      height: 0,\n      opacity: 0,\n      transition: {\n        duration: .3,\n        times: \"[0.4, 0, 0.2, 1]\"\n      }\n    },\n    mount: {\n      opacity: 1,\n      height: \"\".concat((_$ref = mobileNavRef.current) === null || _$ref === void 0 ? void 0 : _$ref.scrollHeight, \"px\"),\n      transition: {\n        duration: .3,\n        times: \"[0.4, 0, 0.2, 1]\"\n      }\n    }\n  };\n  var appliedAnimation = (0, _deepmerge.default)(mainAnimation, animate);\n  var NewAnimatePresence = _framerMotion.AnimatePresence;\n  var mergedRef = _react.default.useMemo(function () {\n    return (0, _reactMergeRefs.default)([ref, mobileNavRef]);\n  }, [ref, mobileNavRef]);\n  return _react.default.createElement(NewAnimatePresence, null, _react.default.createElement(_framerMotion.motion.div, _extends({}, rest, {\n    ref: mergedRef,\n    className: classes,\n    initial: \"unmount\",\n    exit: \"unmount\",\n    animate: open ? \"mount\" : \"unmount\",\n    variants: appliedAnimation\n  }), children));\n});\n_MobileNav.displayName = \"MaterialTailwind.MobileNav\";\n_MobileNav.propTypes = {\n  open: _navbar.propTypesOpen,\n  animate: _navbar.propTypesAnimate,\n  className: _navbar.propTypesClassName,\n  children: _navbar.propTypesChildren\n};\nvar _default2 = _MobileNav;","map":null,"metadata":{},"sourceType":"script"}