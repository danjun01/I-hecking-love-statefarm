{"ast":null,"code":"import _objectWithoutProperties from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n// ../../../react-shim.js\nimport React from \"react\";\n\n// src/alert.tsx\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\n\n// ../../utilities/shared-utils/src/index.ts\nvar cx = function cx() {\n  for (var _len = arguments.length, classNames = new Array(_len), _key = 0; _key < _len; _key++) {\n    classNames[_key] = arguments[_key];\n  }\n  return classNames.filter(Boolean).join(\" \");\n};\n\n// src/alert-context.ts\nimport { createContext } from \"@chakra-ui/react-context\";\n\n// src/icons.tsx\nimport { Icon } from \"@chakra-ui/icon\";\nfunction CheckIcon(props) {\n  return /* @__PURE__ */React.createElement(Icon, _objectSpread({\n    viewBox: \"0 0 24 24\"\n  }, props), /* @__PURE__ */React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M12,0A12,12,0,1,0,24,12,12.014,12.014,0,0,0,12,0Zm6.927,8.2-6.845,9.289a1.011,1.011,0,0,1-1.43.188L5.764,13.769a1,1,0,1,1,1.25-1.562l4.076,3.261,6.227-8.451A1,1,0,1,1,18.927,8.2Z\"\n  }));\n}\nfunction InfoIcon(props) {\n  return /* @__PURE__ */React.createElement(Icon, _objectSpread({\n    viewBox: \"0 0 24 24\"\n  }, props), /* @__PURE__ */React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M12,0A12,12,0,1,0,24,12,12.013,12.013,0,0,0,12,0Zm.25,5a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,12.25,5ZM14.5,18.5h-4a1,1,0,0,1,0-2h.75a.25.25,0,0,0,.25-.25v-4.5a.25.25,0,0,0-.25-.25H10.5a1,1,0,0,1,0-2h1a2,2,0,0,1,2,2v4.75a.25.25,0,0,0,.25.25h.75a1,1,0,1,1,0,2Z\"\n  }));\n}\nfunction WarningIcon(props) {\n  return /* @__PURE__ */React.createElement(Icon, _objectSpread({\n    viewBox: \"0 0 24 24\"\n  }, props), /* @__PURE__ */React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z\"\n  }));\n}\n\n// src/alert-context.ts\nimport { Spinner } from \"@chakra-ui/spinner\";\nvar _createContext = createContext({\n    name: \"AlertContext\",\n    hookName: \"useAlertContext\",\n    providerName: \"<Alert />\"\n  }),\n  _createContext2 = _slicedToArray(_createContext, 2),\n  AlertProvider = _createContext2[0],\n  useAlertContext = _createContext2[1];\nvar _createContext3 = createContext({\n    name: \"AlertStylesContext\",\n    hookName: \"useAlertStyles\",\n    providerName: \"<Alert />\"\n  }),\n  _createContext4 = _slicedToArray(_createContext3, 2),\n  AlertStylesProvider = _createContext4[0],\n  useAlertStyles = _createContext4[1];\nvar STATUSES = {\n  info: {\n    icon: InfoIcon,\n    colorScheme: \"blue\"\n  },\n  warning: {\n    icon: WarningIcon,\n    colorScheme: \"orange\"\n  },\n  success: {\n    icon: CheckIcon,\n    colorScheme: \"green\"\n  },\n  error: {\n    icon: WarningIcon,\n    colorScheme: \"red\"\n  },\n  loading: {\n    icon: Spinner,\n    colorScheme: \"blue\"\n  }\n};\nfunction getStatusColorScheme(status) {\n  return STATUSES[status].colorScheme;\n}\nfunction getStatusIcon(status) {\n  return STATUSES[status].icon;\n}\n\n// src/alert.tsx\nvar Alert = forwardRef(function Alert2(props, ref) {\n  var _omitThemingProps = omitThemingProps(props),\n    _omitThemingProps$sta = _omitThemingProps.status,\n    status = _omitThemingProps$sta === void 0 ? \"info\" : _omitThemingProps$sta,\n    _omitThemingProps$add = _omitThemingProps.addRole,\n    addRole = _omitThemingProps$add === void 0 ? true : _omitThemingProps$add,\n    rest = _objectWithoutProperties(_omitThemingProps, [\"status\", \"addRole\"]);\n  var colorScheme = props.colorScheme ?? getStatusColorScheme(status);\n  var styles = useMultiStyleConfig(\"Alert\", _objectSpread({}, props, {\n    colorScheme: colorScheme\n  }));\n  var alertStyles = _objectSpread({\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    position: \"relative\",\n    overflow: \"hidden\"\n  }, styles.container);\n  return /* @__PURE__ */React.createElement(AlertProvider, {\n    value: {\n      status: status\n    }\n  }, /* @__PURE__ */React.createElement(AlertStylesProvider, {\n    value: styles\n  }, /* @__PURE__ */React.createElement(chakra.div, _objectSpread({\n    role: addRole ? \"alert\" : void 0,\n    ref: ref\n  }, rest, {\n    className: cx(\"chakra-alert\", props.className),\n    __css: alertStyles\n  }))));\n});\nAlert.displayName = \"Alert\";\n\n// src/alert-description.tsx\nimport { chakra as chakra2, forwardRef as forwardRef2 } from \"@chakra-ui/system\";\nvar AlertDescription = forwardRef2(function AlertDescription2(props, ref) {\n  var styles = useAlertStyles();\n  var descriptionStyles = _objectSpread({\n    display: \"inline\"\n  }, styles.description);\n  return /* @__PURE__ */React.createElement(chakra2.div, _objectSpread({\n    ref: ref\n  }, props, {\n    className: cx(\"chakra-alert__desc\", props.className),\n    __css: descriptionStyles\n  }));\n});\nAlertDescription.displayName = \"AlertDescription\";\n\n// src/alert-icon.tsx\nimport { chakra as chakra3 } from \"@chakra-ui/system\";\nfunction AlertIcon(props) {\n  var _useAlertContext = useAlertContext(),\n    status = _useAlertContext.status;\n  var BaseIcon = getStatusIcon(status);\n  var styles = useAlertStyles();\n  var css = status === \"loading\" ? styles.spinner : styles.icon;\n  return /* @__PURE__ */React.createElement(chakra3.span, _objectSpread({\n    display: \"inherit\"\n  }, props, {\n    className: cx(\"chakra-alert__icon\", props.className),\n    __css: css\n  }), props.children || /* @__PURE__ */React.createElement(BaseIcon, {\n    h: \"100%\",\n    w: \"100%\"\n  }));\n}\nAlertIcon.displayName = \"AlertIcon\";\n\n// src/alert-title.tsx\nimport { chakra as chakra4, forwardRef as forwardRef3 } from \"@chakra-ui/system\";\nvar AlertTitle = forwardRef3(function AlertTitle2(props, ref) {\n  var styles = useAlertStyles();\n  return /* @__PURE__ */React.createElement(chakra4.div, _objectSpread({\n    ref: ref\n  }, props, {\n    className: cx(\"chakra-alert__title\", props.className),\n    __css: styles.title\n  }));\n});\nAlertTitle.displayName = \"AlertTitle\";\nexport { Alert, AlertDescription, AlertIcon, AlertTitle, useAlertStyles };","map":null,"metadata":{},"sourceType":"module"}