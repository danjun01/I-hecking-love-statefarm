{"ast":null,"code":"import _objectSpread from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { computePosition, arrow as arrow$1 } from '@floating-ui/dom';\nexport * from '@floating-ui/dom';\nimport * as React from 'react';\nimport { useLayoutEffect, useEffect } from 'react';\nimport * as ReactDOM from 'react-dom';\nvar index = typeof document !== 'undefined' ? useLayoutEffect : useEffect;\n\n// Fork of `fast-deep-equal` that only does the comparisons we need and compares\n// functions\nfunction deepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (typeof a !== typeof b) {\n    return false;\n  }\n  if (typeof a === 'function' && a.toString() === b.toString()) {\n    return true;\n  }\n  var length, i, keys;\n  if (a && b && typeof a == 'object') {\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;) {\n        if (!deepEqual(a[i], b[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) {\n      return false;\n    }\n    for (i = length; i-- !== 0;) {\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) {\n        return false;\n      }\n    }\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n      if (key === '_owner' && a.$$typeof) {\n        continue;\n      }\n      if (!deepEqual(a[key], b[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return a !== a && b !== b;\n}\nfunction useLatestRef(value) {\n  var ref = React.useRef(value);\n  index(function () {\n    ref.current = value;\n  });\n  return ref;\n}\nfunction useFloating(_temp) {\n  var _ref3 = _temp === void 0 ? {} : _temp,\n    middleware = _ref3.middleware,\n    _ref3$placement = _ref3.placement,\n    placement = _ref3$placement === void 0 ? 'bottom' : _ref3$placement,\n    _ref3$strategy = _ref3.strategy,\n    strategy = _ref3$strategy === void 0 ? 'absolute' : _ref3$strategy,\n    whileElementsMounted = _ref3.whileElementsMounted;\n  var _React$useState = React.useState({\n      // Setting these to `null` will allow the consumer to determine if\n      // `computePosition()` has run yet\n      x: null,\n      y: null,\n      strategy: strategy,\n      placement: placement,\n      middlewareData: {}\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    data = _React$useState2[0],\n    setData = _React$useState2[1];\n  var _React$useState3 = React.useState(middleware),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    latestMiddleware = _React$useState4[0],\n    setLatestMiddleware = _React$useState4[1];\n  if (!deepEqual(latestMiddleware == null ? void 0 : latestMiddleware.map(function (_ref) {\n    var name = _ref.name,\n      options = _ref.options;\n    return {\n      name: name,\n      options: options\n    };\n  }), middleware == null ? void 0 : middleware.map(function (_ref2) {\n    var name = _ref2.name,\n      options = _ref2.options;\n    return {\n      name: name,\n      options: options\n    };\n  }))) {\n    setLatestMiddleware(middleware);\n  }\n  var reference = React.useRef(null);\n  var floating = React.useRef(null);\n  var cleanupRef = React.useRef(null);\n  var dataRef = React.useRef(data);\n  var whileElementsMountedRef = useLatestRef(whileElementsMounted);\n  var update = React.useCallback(function () {\n    if (!reference.current || !floating.current) {\n      return;\n    }\n    computePosition(reference.current, floating.current, {\n      middleware: latestMiddleware,\n      placement: placement,\n      strategy: strategy\n    }).then(function (data) {\n      if (isMountedRef.current && !deepEqual(dataRef.current, data)) {\n        dataRef.current = data;\n        ReactDOM.flushSync(function () {\n          setData(data);\n        });\n      }\n    });\n  }, [latestMiddleware, placement, strategy]);\n  index(function () {\n    // Skip first update\n    if (isMountedRef.current) {\n      update();\n    }\n  }, [update]);\n  var isMountedRef = React.useRef(false);\n  index(function () {\n    isMountedRef.current = true;\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n  var runElementMountCallback = React.useCallback(function () {\n    if (typeof cleanupRef.current === 'function') {\n      cleanupRef.current();\n      cleanupRef.current = null;\n    }\n    if (reference.current && floating.current) {\n      if (whileElementsMountedRef.current) {\n        var cleanupFn = whileElementsMountedRef.current(reference.current, floating.current, update);\n        cleanupRef.current = cleanupFn;\n      } else {\n        update();\n      }\n    }\n  }, [update, whileElementsMountedRef]);\n  var setReference = React.useCallback(function (node) {\n    reference.current = node;\n    runElementMountCallback();\n  }, [runElementMountCallback]);\n  var setFloating = React.useCallback(function (node) {\n    floating.current = node;\n    runElementMountCallback();\n  }, [runElementMountCallback]);\n  var refs = React.useMemo(function () {\n    return {\n      reference: reference,\n      floating: floating\n    };\n  }, []);\n  return React.useMemo(function () {\n    return _objectSpread({}, data, {\n      update: update,\n      refs: refs,\n      reference: setReference,\n      floating: setFloating\n    });\n  }, [data, update, refs, setReference, setFloating]);\n}\n\n/**\n * Positions an inner element of the floating element such that it is centered\n * to the reference element.\n * This wraps the core `arrow` middleware to allow React refs as the element.\n * @see https://floating-ui.com/docs/arrow\n */\n\nvar arrow = function arrow(options) {\n  var element = options.element,\n    padding = options.padding;\n  function isRef(value) {\n    return Object.prototype.hasOwnProperty.call(value, 'current');\n  }\n  return {\n    name: 'arrow',\n    options: options,\n    fn: function fn(args) {\n      if (isRef(element)) {\n        if (element.current != null) {\n          return arrow$1({\n            element: element.current,\n            padding: padding\n          }).fn(args);\n        }\n        return {};\n      } else if (element) {\n        return arrow$1({\n          element: element,\n          padding: padding\n        }).fn(args);\n      }\n      return {};\n    }\n  };\n};\nexport { arrow, useFloating };","map":null,"metadata":{},"sourceType":"module"}