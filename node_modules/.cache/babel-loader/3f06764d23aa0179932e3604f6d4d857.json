{"ast":null,"code":"import _slicedToArray from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// ../../../react-shim.js\nimport React from \"react\";\n\n// src/env.tsx\nimport { createContext, startTransition, useContext, useMemo, useState, useEffect } from \"react\";\n\n// src/mock-document.ts\nvar doc = {\n  body: {\n    classList: {\n      add: function add() {},\n      remove: function remove() {}\n    }\n  },\n  addEventListener: function addEventListener() {},\n  removeEventListener: function removeEventListener() {},\n  activeElement: {\n    blur: function blur() {},\n    nodeName: \"\"\n  },\n  querySelector: function querySelector() {\n    return null;\n  },\n  querySelectorAll: function querySelectorAll() {\n    return [];\n  },\n  getElementById: function getElementById() {\n    return null;\n  },\n  createEvent: function createEvent() {\n    return {\n      initEvent: function initEvent() {}\n    };\n  },\n  createElement: function createElement() {\n    return {\n      children: [],\n      childNodes: [],\n      style: {},\n      setAttribute: function setAttribute() {},\n      getElementsByTagName: function getElementsByTagName() {\n        return [];\n      }\n    };\n  }\n};\nvar ssrDocument = doc;\n\n// src/mock-window.ts\nvar noop = function noop() {};\nvar win = {\n  document: ssrDocument,\n  navigator: {\n    userAgent: \"\"\n  },\n  CustomEvent: function CustomEvent() {\n    return this;\n  },\n  addEventListener: noop,\n  removeEventListener: noop,\n  getComputedStyle: function getComputedStyle() {\n    return {\n      getPropertyValue: function getPropertyValue() {\n        return \"\";\n      }\n    };\n  },\n  matchMedia: function matchMedia() {\n    return {\n      matches: false,\n      addListener: noop,\n      removeListener: noop\n    };\n  },\n  requestAnimationFrame: function requestAnimationFrame(callback) {\n    if (typeof setTimeout === \"undefined\") {\n      callback();\n      return null;\n    }\n    return setTimeout(callback, 0);\n  },\n  cancelAnimationFrame: function cancelAnimationFrame(id) {\n    if (typeof setTimeout === \"undefined\") return;\n    clearTimeout(id);\n  },\n  setTimeout: function setTimeout() {\n    return 0;\n  },\n  clearTimeout: noop,\n  setInterval: function setInterval() {\n    return 0;\n  },\n  clearInterval: noop\n};\nvar ssrWindow = win;\n\n// src/env.tsx\nvar mockEnv = {\n  window: ssrWindow,\n  document: ssrDocument\n};\nvar defaultEnv = typeof window !== \"undefined\" ? {\n  window: window,\n  document: document\n} : mockEnv;\nvar EnvironmentContext = createContext(defaultEnv);\nEnvironmentContext.displayName = \"EnvironmentContext\";\nfunction useEnvironment() {\n  return useContext(EnvironmentContext);\n}\nfunction EnvironmentProvider(props) {\n  var children = props.children,\n    environmentProp = props.environment;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    node = _useState2[0],\n    setNode = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    mounted = _useState4[0],\n    setMounted = _useState4[1];\n  useEffect(function () {\n    return setMounted(true);\n  }, []);\n  var context = useMemo(function () {\n    if (environmentProp) {\n      return environmentProp;\n    }\n    var doc2 = node == null ? void 0 : node.ownerDocument;\n    var win2 = node == null ? void 0 : node.ownerDocument.defaultView;\n    var env = doc2 ? {\n      document: doc2,\n      window: win2\n    } : defaultEnv;\n    return env;\n  }, [node, environmentProp]);\n  return /* @__PURE__ */React.createElement(EnvironmentContext.Provider, {\n    value: context\n  }, children, !environmentProp && mounted && /* @__PURE__ */React.createElement(\"span\", {\n    id: \"__chakra_env\",\n    hidden: true,\n    ref: function ref(el) {\n      startTransition(function () {\n        if (el) setNode(el);\n      });\n    }\n  }));\n}\nEnvironmentProvider.displayName = \"EnvironmentProvider\";\nexport { EnvironmentProvider, useEnvironment };","map":null,"metadata":{},"sourceType":"module"}