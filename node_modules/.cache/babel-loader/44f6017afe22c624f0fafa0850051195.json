{"ast":null,"code":"import _objectSpread from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n// ../../../react-shim.js\nimport React from \"react\";\n\n// src/switch.tsx\nimport { useCheckbox } from \"@chakra-ui/checkbox\";\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\n\n// ../../utilities/shared-utils/src/index.ts\nvar cx = function cx() {\n  for (var _len = arguments.length, classNames = new Array(_len), _key = 0; _key < _len; _key++) {\n    classNames[_key] = arguments[_key];\n  }\n  return classNames.filter(Boolean).join(\" \");\n};\nvar dataAttr = function dataAttr(condition) {\n  return condition ? \"\" : void 0;\n};\n\n// src/switch.tsx\nimport { useMemo } from \"react\";\nvar Switch = forwardRef(function Switch2(props, ref) {\n  var styles = useMultiStyleConfig(\"Switch\", props);\n  var _omitThemingProps = omitThemingProps(props),\n    _omitThemingProps$spa = _omitThemingProps.spacing,\n    spacing = _omitThemingProps$spa === void 0 ? \"0.5rem\" : _omitThemingProps$spa,\n    children = _omitThemingProps.children,\n    ownProps = _objectWithoutProperties(_omitThemingProps, [\"spacing\", \"children\"]);\n  var _useCheckbox = useCheckbox(ownProps),\n    state = _useCheckbox.state,\n    getInputProps = _useCheckbox.getInputProps,\n    getCheckboxProps = _useCheckbox.getCheckboxProps,\n    getRootProps = _useCheckbox.getRootProps,\n    getLabelProps = _useCheckbox.getLabelProps;\n  var containerStyles = useMemo(function () {\n    return _objectSpread({\n      display: \"inline-block\",\n      position: \"relative\",\n      verticalAlign: \"middle\",\n      lineHeight: 0\n    }, styles.container);\n  }, [styles.container]);\n  var trackStyles = useMemo(function () {\n    return _objectSpread({\n      display: \"inline-flex\",\n      flexShrink: 0,\n      justifyContent: \"flex-start\",\n      boxSizing: \"content-box\",\n      cursor: \"pointer\"\n    }, styles.track);\n  }, [styles.track]);\n  var labelStyles = useMemo(function () {\n    return _objectSpread({\n      userSelect: \"none\",\n      marginStart: spacing\n    }, styles.label);\n  }, [spacing, styles.label]);\n  return /* @__PURE__ */React.createElement(chakra.label, _objectSpread({}, getRootProps(), {\n    className: cx(\"chakra-switch\", props.className),\n    __css: containerStyles\n  }), /* @__PURE__ */React.createElement(\"input\", _objectSpread({\n    className: \"chakra-switch__input\"\n  }, getInputProps({}, ref))), /* @__PURE__ */React.createElement(chakra.span, _objectSpread({}, getCheckboxProps(), {\n    className: \"chakra-switch__track\",\n    __css: trackStyles\n  }), /* @__PURE__ */React.createElement(chakra.span, {\n    __css: styles.thumb,\n    className: \"chakra-switch__thumb\",\n    \"data-checked\": dataAttr(state.isChecked),\n    \"data-hover\": dataAttr(state.isHovered)\n  })), children && /* @__PURE__ */React.createElement(chakra.span, _objectSpread({\n    className: \"chakra-switch__label\"\n  }, getLabelProps(), {\n    __css: labelStyles\n  }), children));\n});\nSwitch.displayName = \"Switch\";\nexport { Switch };","map":null,"metadata":{},"sourceType":"module"}