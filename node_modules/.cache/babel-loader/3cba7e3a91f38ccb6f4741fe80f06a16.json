{"ast":null,"code":"import _objectSpread from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// ../../../react-shim.js\nimport React from \"react\";\n\n// src/avatar.tsx\nimport { chakra as chakra4, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\n\n// ../../utilities/shared-utils/src/index.ts\nvar cx = function cx() {\n  for (var _len = arguments.length, classNames = new Array(_len), _key = 0; _key < _len; _key++) {\n    classNames[_key] = arguments[_key];\n  }\n  return classNames.filter(Boolean).join(\" \");\n};\nvar dataAttr = function dataAttr(condition) {\n  return condition ? \"\" : void 0;\n};\nfunction callAllHandlers() {\n  for (var _len2 = arguments.length, fns = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    fns[_key2] = arguments[_key2];\n  }\n  return function func(event) {\n    fns.some(function (fn) {\n      fn == null ? void 0 : fn(event);\n      return event == null ? void 0 : event.defaultPrevented;\n    });\n  };\n}\n\n// src/avatar-context.tsx\nimport { createContext } from \"@chakra-ui/react-context\";\nvar _createContext = createContext({\n    name: \"AvatarStylesContext\",\n    hookName: \"useAvatarStyles\",\n    providerName: \"<Avatar/>\"\n  }),\n  _createContext2 = _slicedToArray(_createContext, 2),\n  AvatarStylesProvider = _createContext2[0],\n  useAvatarStyles = _createContext2[1]; // src/avatar-image.tsx\nimport { useImage } from \"@chakra-ui/image\";\nimport { chakra as chakra3 } from \"@chakra-ui/system\";\nimport { cloneElement } from \"react\";\n\n// src/avatar-name.tsx\nimport { chakra } from \"@chakra-ui/system\";\nfunction initials(name) {\n  var _name$split = name.split(\" \"),\n    _name$split2 = _slicedToArray(_name$split, 2),\n    firstName = _name$split2[0],\n    lastName = _name$split2[1];\n  return firstName && lastName ? \"\".concat(firstName.charAt(0)).concat(lastName.charAt(0)) : firstName.charAt(0);\n}\nfunction AvatarName(props) {\n  var name = props.name,\n    getInitials = props.getInitials,\n    rest = _objectWithoutProperties(props, [\"name\", \"getInitials\"]);\n  var styles = useAvatarStyles();\n  return /* @__PURE__ */React.createElement(chakra.div, _objectSpread({\n    role: \"img\",\n    \"aria-label\": name\n  }, rest, {\n    __css: styles.label\n  }), name ? getInitials == null ? void 0 : getInitials(name) : null);\n}\nAvatarName.displayName = \"AvatarName\";\n\n// src/generic-avatar-icon.tsx\nimport { chakra as chakra2 } from \"@chakra-ui/system\";\nvar GenericAvatarIcon = function GenericAvatarIcon(props) {\n  return /* @__PURE__ */React.createElement(chakra2.svg, _objectSpread({\n    viewBox: \"0 0 128 128\",\n    color: \"#fff\",\n    width: \"100%\",\n    height: \"100%\",\n    className: \"chakra-avatar__svg\"\n  }, props), /* @__PURE__ */React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z\"\n  }), /* @__PURE__ */React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24\"\n  }));\n};\n\n// src/avatar-image.tsx\nfunction AvatarImage(props) {\n  var src = props.src,\n    srcSet = props.srcSet,\n    onError = props.onError,\n    onLoad = props.onLoad,\n    getInitials = props.getInitials,\n    name = props.name,\n    borderRadius = props.borderRadius,\n    loading = props.loading,\n    iconLabel = props.iconLabel,\n    _props$icon = props.icon,\n    icon = _props$icon === void 0 ? /* @__PURE__ */React.createElement(GenericAvatarIcon, null) : _props$icon,\n    ignoreFallback = props.ignoreFallback,\n    referrerPolicy = props.referrerPolicy;\n  var status = useImage({\n    src: src,\n    onError: onError,\n    ignoreFallback: ignoreFallback\n  });\n  var hasLoaded = status === \"loaded\";\n  var showFallback = !src || !hasLoaded;\n  if (showFallback) {\n    return name ? /* @__PURE__ */React.createElement(AvatarName, {\n      className: \"chakra-avatar__initials\",\n      getInitials: getInitials,\n      name: name\n    }) : cloneElement(icon, {\n      role: \"img\",\n      \"aria-label\": iconLabel\n    });\n  }\n  return /* @__PURE__ */React.createElement(chakra3.img, {\n    src: src,\n    srcSet: srcSet,\n    alt: name,\n    onLoad: onLoad,\n    referrerPolicy: referrerPolicy,\n    className: \"chakra-avatar__img\",\n    loading: loading,\n    __css: {\n      width: \"100%\",\n      height: \"100%\",\n      objectFit: \"cover\",\n      borderRadius: borderRadius\n    }\n  });\n}\nAvatarImage.displayName = \"AvatarImage\";\n\n// src/avatar.tsx\nimport { useState } from \"react\";\nvar baseStyle = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  textTransform: \"uppercase\",\n  fontWeight: \"medium\",\n  position: \"relative\",\n  flexShrink: 0\n};\nvar Avatar = forwardRef(function (props, ref) {\n  var styles = useMultiStyleConfig(\"Avatar\", props);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLoaded = _useState2[0],\n    setIsLoaded = _useState2[1];\n  var _omitThemingProps = omitThemingProps(props),\n    src = _omitThemingProps.src,\n    srcSet = _omitThemingProps.srcSet,\n    name = _omitThemingProps.name,\n    showBorder = _omitThemingProps.showBorder,\n    _omitThemingProps$bor = _omitThemingProps.borderRadius,\n    borderRadius = _omitThemingProps$bor === void 0 ? \"full\" : _omitThemingProps$bor,\n    onError = _omitThemingProps.onError,\n    onLoadProp = _omitThemingProps.onLoad,\n    _omitThemingProps$get = _omitThemingProps.getInitials,\n    getInitials = _omitThemingProps$get === void 0 ? initials : _omitThemingProps$get,\n    _omitThemingProps$ico = _omitThemingProps.icon,\n    icon = _omitThemingProps$ico === void 0 ? /* @__PURE__ */React.createElement(GenericAvatarIcon, null) : _omitThemingProps$ico,\n    _omitThemingProps$ico2 = _omitThemingProps.iconLabel,\n    iconLabel = _omitThemingProps$ico2 === void 0 ? \" avatar\" : _omitThemingProps$ico2,\n    loading = _omitThemingProps.loading,\n    children = _omitThemingProps.children,\n    borderColor = _omitThemingProps.borderColor,\n    ignoreFallback = _omitThemingProps.ignoreFallback,\n    rest = _objectWithoutProperties(_omitThemingProps, [\"src\", \"srcSet\", \"name\", \"showBorder\", \"borderRadius\", \"onError\", \"onLoad\", \"getInitials\", \"icon\", \"iconLabel\", \"loading\", \"children\", \"borderColor\", \"ignoreFallback\"]);\n  var avatarStyles = _objectSpread({\n    borderRadius: borderRadius,\n    borderWidth: showBorder ? \"2px\" : void 0\n  }, baseStyle, styles.container);\n  if (borderColor) {\n    avatarStyles.borderColor = borderColor;\n  }\n  return /* @__PURE__ */React.createElement(chakra4.span, _objectSpread({\n    ref: ref\n  }, rest, {\n    className: cx(\"chakra-avatar\", props.className),\n    \"data-loaded\": dataAttr(isLoaded),\n    __css: avatarStyles\n  }), /* @__PURE__ */React.createElement(AvatarStylesProvider, {\n    value: styles\n  }, /* @__PURE__ */React.createElement(AvatarImage, {\n    src: src,\n    srcSet: srcSet,\n    loading: loading,\n    onLoad: callAllHandlers(onLoadProp, function () {\n      setIsLoaded(true);\n    }),\n    onError: onError,\n    getInitials: getInitials,\n    name: name,\n    borderRadius: borderRadius,\n    icon: icon,\n    iconLabel: iconLabel,\n    ignoreFallback: ignoreFallback\n  }), children));\n});\nAvatar.displayName = \"Avatar\";\n\n// src/avatar-group.tsx\nimport { chakra as chakra5, forwardRef as forwardRef2, omitThemingProps as omitThemingProps2, useMultiStyleConfig as useMultiStyleConfig2 } from \"@chakra-ui/system\";\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\";\n\n// ../../utilities/object-utils/src/index.ts\nfunction compact(object) {\n  var clone = Object.assign({}, object);\n  for (var key in clone) {\n    if (clone[key] === void 0) delete clone[key];\n  }\n  return clone;\n}\n\n// src/avatar-group.tsx\nimport { cloneElement as cloneElement2 } from \"react\";\nvar AvatarGroup = forwardRef2(function AvatarGroup2(props, ref) {\n  var styles = useMultiStyleConfig2(\"Avatar\", props);\n  var _omitThemingProps2 = omitThemingProps2(props),\n    children = _omitThemingProps2.children,\n    borderColor = _omitThemingProps2.borderColor,\n    max = _omitThemingProps2.max,\n    _omitThemingProps2$sp = _omitThemingProps2.spacing,\n    spacing = _omitThemingProps2$sp === void 0 ? \"-0.75rem\" : _omitThemingProps2$sp,\n    _omitThemingProps2$bo = _omitThemingProps2.borderRadius,\n    borderRadius = _omitThemingProps2$bo === void 0 ? \"full\" : _omitThemingProps2$bo,\n    rest = _objectWithoutProperties(_omitThemingProps2, [\"children\", \"borderColor\", \"max\", \"spacing\", \"borderRadius\"]);\n  var validChildren = getValidChildren(children);\n  var childrenWithinMax = max ? validChildren.slice(0, max) : validChildren;\n  var excess = max != null && validChildren.length - max;\n  var reversedChildren = childrenWithinMax.reverse();\n  var clones = reversedChildren.map(function (child, index) {\n    var isFirstAvatar = index === 0;\n    var childProps = {\n      marginEnd: isFirstAvatar ? 0 : spacing,\n      size: props.size,\n      borderColor: child.props.borderColor ?? borderColor,\n      showBorder: true\n    };\n    return cloneElement2(child, compact(childProps));\n  });\n  var groupStyles = _objectSpread({\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    flexDirection: \"row-reverse\"\n  }, styles.group);\n  var excessStyles = _objectSpread({\n    borderRadius: borderRadius,\n    marginStart: spacing\n  }, baseStyle, styles.excessLabel);\n  return /* @__PURE__ */React.createElement(chakra5.div, _objectSpread({\n    ref: ref,\n    role: \"group\",\n    __css: groupStyles\n  }, rest, {\n    className: cx(\"chakra-avatar__group\", props.className)\n  }), excess > 0 && /* @__PURE__ */React.createElement(chakra5.span, {\n    className: \"chakra-avatar__excess\",\n    __css: excessStyles\n  }, \"+\".concat(excess)), clones);\n});\nAvatarGroup.displayName = \"AvatarGroup\";\n\n// src/avatar-badge.tsx\nimport { chakra as chakra6, forwardRef as forwardRef3 } from \"@chakra-ui/system\";\nvar placementMap = {\n  \"top-start\": {\n    top: \"0\",\n    insetStart: \"0\",\n    transform: \"translate(-25%, -25%)\"\n  },\n  \"top-end\": {\n    top: \"0\",\n    insetEnd: \"0\",\n    transform: \"translate(25%, -25%)\"\n  },\n  \"bottom-start\": {\n    bottom: \"0\",\n    insetStart: \"0\",\n    transform: \"translate(-25%, 25%)\"\n  },\n  \"bottom-end\": {\n    bottom: \"0\",\n    insetEnd: \"0\",\n    transform: \"translate(25%, 25%)\"\n  }\n};\nvar AvatarBadge = forwardRef3(function AvatarBadge2(props, ref) {\n  var _props$placement = props.placement,\n    placement = _props$placement === void 0 ? \"bottom-end\" : _props$placement,\n    className = props.className,\n    rest = _objectWithoutProperties(props, [\"placement\", \"className\"]);\n  var styles = useAvatarStyles();\n  var placementStyles = placementMap[placement];\n  var badgeStyles = _objectSpread({\n    position: \"absolute\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }, placementStyles, styles.badge);\n  return /* @__PURE__ */React.createElement(chakra6.div, _objectSpread({\n    ref: ref\n  }, rest, {\n    className: cx(\"chakra-avatar__badge\", className),\n    __css: badgeStyles\n  }));\n});\nAvatarBadge.displayName = \"AvatarBadge\";\nexport { Avatar, AvatarBadge, AvatarGroup, GenericAvatarIcon, useAvatarStyles };","map":null,"metadata":{},"sourceType":"module"}