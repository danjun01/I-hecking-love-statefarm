{"ast":null,"code":"import _objectSpread from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// ../../../react-shim.js\nimport React from \"react\";\n\n// src/portal-manager.tsx\nimport { createContext } from \"@chakra-ui/react-context\";\nvar _createContext = createContext({\n    strict: false,\n    name: \"PortalManagerContext\"\n  }),\n  _createContext2 = _slicedToArray(_createContext, 2),\n  PortalManagerContextProvider = _createContext2[0],\n  usePortalManager = _createContext2[1];\nfunction PortalManager(props) {\n  var children = props.children,\n    zIndex = props.zIndex;\n  return /* @__PURE__ */React.createElement(PortalManagerContextProvider, {\n    value: {\n      zIndex: zIndex\n    }\n  }, children);\n}\nPortalManager.displayName = \"PortalManager\";\n\n// src/portal.tsx\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { createContext as createContext2 } from \"@chakra-ui/react-context\";\nimport { createPortal } from \"react-dom\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nvar _createContext3 = createContext2({\n    strict: false,\n    name: \"PortalContext\"\n  }),\n  _createContext4 = _slicedToArray(_createContext3, 2),\n  PortalContextProvider = _createContext4[0],\n  usePortalContext = _createContext4[1];\nvar PORTAL_CLASSNAME = \"chakra-portal\";\nvar PORTAL_SELECTOR = \".chakra-portal\";\nvar Container = function Container(props) {\n  return /* @__PURE__ */React.createElement(\"div\", {\n    className: \"chakra-portal-zIndex\",\n    style: {\n      position: \"absolute\",\n      zIndex: props.zIndex,\n      top: 0,\n      left: 0,\n      right: 0\n    }\n  }, props.children);\n};\nvar DefaultPortal = function DefaultPortal(props) {\n  var appendToParentPortal = props.appendToParentPortal,\n    children = props.children;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    tempNode = _useState2[0],\n    setTempNode = _useState2[1];\n  var portal = useRef(null);\n  var _useState3 = useState({}),\n    _useState4 = _slicedToArray(_useState3, 2),\n    forceUpdate = _useState4[1];\n  useEffect(function () {\n    return forceUpdate({});\n  }, []);\n  var parentPortal = usePortalContext();\n  var manager = usePortalManager();\n  useSafeLayoutEffect(function () {\n    if (!tempNode) return;\n    var doc = tempNode.ownerDocument;\n    var host = appendToParentPortal ? parentPortal ?? doc.body : doc.body;\n    if (!host) return;\n    portal.current = doc.createElement(\"div\");\n    portal.current.className = PORTAL_CLASSNAME;\n    host.appendChild(portal.current);\n    forceUpdate({});\n    var portalNode = portal.current;\n    return function () {\n      if (host.contains(portalNode)) {\n        host.removeChild(portalNode);\n      }\n    };\n  }, [tempNode]);\n  var _children = (manager == null ? void 0 : manager.zIndex) ? /* @__PURE__ */React.createElement(Container, {\n    zIndex: manager == null ? void 0 : manager.zIndex\n  }, children) : children;\n  return portal.current ? createPortal( /* @__PURE__ */React.createElement(PortalContextProvider, {\n    value: portal.current\n  }, _children), portal.current) : /* @__PURE__ */React.createElement(\"span\", {\n    ref: function ref(el) {\n      if (el) setTempNode(el);\n    }\n  });\n};\nvar ContainerPortal = function ContainerPortal(props) {\n  var children = props.children,\n    containerRef = props.containerRef,\n    appendToParentPortal = props.appendToParentPortal;\n  var containerEl = containerRef.current;\n  var host = containerEl ?? (typeof window !== \"undefined\" ? document.body : void 0);\n  var portal = useMemo(function () {\n    var node = containerEl == null ? void 0 : containerEl.ownerDocument.createElement(\"div\");\n    if (node) node.className = PORTAL_CLASSNAME;\n    return node;\n  }, [containerEl]);\n  var _useState5 = useState({}),\n    _useState6 = _slicedToArray(_useState5, 2),\n    forceUpdate = _useState6[1];\n  useSafeLayoutEffect(function () {\n    return forceUpdate({});\n  }, []);\n  useSafeLayoutEffect(function () {\n    if (!portal || !host) return;\n    host.appendChild(portal);\n    return function () {\n      host.removeChild(portal);\n    };\n  }, [portal, host]);\n  if (host && portal) {\n    return createPortal( /* @__PURE__ */React.createElement(PortalContextProvider, {\n      value: appendToParentPortal ? portal : null\n    }, children), portal);\n  }\n  return null;\n};\nfunction Portal(props) {\n  var containerRef = props.containerRef,\n    rest = _objectWithoutProperties(props, [\"containerRef\"]);\n  return containerRef ? /* @__PURE__ */React.createElement(ContainerPortal, _objectSpread({\n    containerRef: containerRef\n  }, rest)) : /* @__PURE__ */React.createElement(DefaultPortal, _objectSpread({}, rest));\n}\nPortal.defaultProps = {\n  appendToParentPortal: true\n};\nPortal.className = PORTAL_CLASSNAME;\nPortal.selector = PORTAL_SELECTOR;\nPortal.displayName = \"Portal\";\nexport { Portal, PortalManager, usePortalManager };","map":null,"metadata":{},"sourceType":"module"}