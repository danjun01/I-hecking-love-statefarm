{"ast":null,"code":"import _toConsumableArray from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// src/use-animation-state.ts\nimport { getOwnerWindow } from \"@chakra-ui/utils\";\nimport { useEffect as useEffect3, useState } from \"react\";\n\n// src/use-event-listener.ts\nimport { runIfFn } from \"@chakra-ui/utils\";\nimport { useEffect as useEffect2 } from \"react\";\n\n// src/use-callback-ref.ts\nimport { useCallback, useRef } from \"react\";\n\n// src/use-safe-layout-effect.ts\nimport { isBrowser } from \"@chakra-ui/utils\";\nimport { useEffect, useLayoutEffect } from \"react\";\nvar useSafeLayoutEffect = isBrowser ? useLayoutEffect : useEffect;\n\n// src/use-callback-ref.ts\nfunction useCallbackRef(fn) {\n  var deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var ref = useRef(fn);\n  useSafeLayoutEffect(function () {\n    ref.current = fn;\n  });\n  return useCallback(function () {\n    var _a2;\n    var _a;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return (_a = ref.current) == null ? void 0 : (_a2 = _a).call.apply(_a2, [ref].concat(args));\n  }, deps);\n}\n\n// src/use-event-listener.ts\nfunction useEventListener(event, handler, env, options) {\n  var listener = useCallbackRef(handler);\n  useEffect2(function () {\n    var node = runIfFn(env) ?? document;\n    if (!handler) {\n      return;\n    }\n    node.addEventListener(event, listener, options);\n    return function () {\n      node.removeEventListener(event, listener, options);\n    };\n  }, [event, env, options, listener, handler]);\n  return function () {\n    var node = runIfFn(env) ?? document;\n    node.removeEventListener(event, listener, options);\n  };\n}\n\n// src/use-animation-state.ts\nfunction useAnimationState(props) {\n  var isOpen = props.isOpen,\n    ref = props.ref;\n  var _useState = useState(isOpen),\n    _useState2 = _slicedToArray(_useState, 2),\n    mounted = _useState2[0],\n    setMounted = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    once = _useState4[0],\n    setOnce = _useState4[1];\n  useEffect3(function () {\n    if (!once) {\n      setMounted(isOpen);\n      setOnce(true);\n    }\n  }, [isOpen, once, mounted]);\n  useEventListener(\"animationend\", function () {\n    setMounted(isOpen);\n  }, function () {\n    return ref.current;\n  });\n  var hidden = isOpen ? false : !mounted;\n  return {\n    present: !hidden,\n    onComplete: function onComplete() {\n      var _a;\n      var win = getOwnerWindow(ref.current);\n      var evt = new win.CustomEvent(\"animationend\", {\n        bubbles: true\n      });\n      (_a = ref.current) == null ? void 0 : _a.dispatchEvent(evt);\n    }\n  };\n}\n\n// src/use-boolean.ts\nimport { useMemo, useState as useState2 } from \"react\";\nfunction useBoolean() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var _useState5 = useState2(initialState),\n    _useState6 = _slicedToArray(_useState5, 2),\n    value = _useState6[0],\n    setValue = _useState6[1];\n  var callbacks = useMemo(function () {\n    return {\n      on: function on() {\n        return setValue(true);\n      },\n      off: function off() {\n        return setValue(false);\n      },\n      toggle: function toggle() {\n        return setValue(function (prev) {\n          return !prev;\n        });\n      }\n    };\n  }, []);\n  return [value, callbacks];\n}\n\n// src/use-clipboard.ts\nimport { useState as useState3, useCallback as useCallback2, useEffect as useEffect4 } from \"react\";\nimport copy from \"copy-to-clipboard\";\nfunction useClipboard(initialValue) {\n  var optionsOrTimeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _useState7 = useState3(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    hasCopied = _useState8[0],\n    setHasCopied = _useState8[1];\n  var _useState9 = useState3(initialValue),\n    _useState10 = _slicedToArray(_useState9, 2),\n    value = _useState10[0],\n    setValue = _useState10[1];\n  var _ref = typeof optionsOrTimeout === \"number\" ? {\n      timeout: optionsOrTimeout\n    } : optionsOrTimeout,\n    _ref$timeout = _ref.timeout,\n    timeout = _ref$timeout === void 0 ? 1500 : _ref$timeout,\n    copyOptions = _objectWithoutProperties(_ref, [\"timeout\"]);\n  var onCopy = useCallback2(function () {\n    var didCopy = copy(value, copyOptions);\n    setHasCopied(didCopy);\n  }, [value, copyOptions]);\n  useEffect4(function () {\n    var timeoutId = null;\n    if (hasCopied) {\n      timeoutId = window.setTimeout(function () {\n        setHasCopied(false);\n      }, timeout);\n    }\n    return function () {\n      if (timeoutId) {\n        window.clearTimeout(timeoutId);\n      }\n    };\n  }, [timeout, hasCopied]);\n  return {\n    value: value,\n    setValue: setValue,\n    onCopy: onCopy,\n    hasCopied: hasCopied\n  };\n}\n\n// src/use-const.ts\nimport { useRef as useRef2 } from \"react\";\nfunction useConst(init) {\n  var ref = useRef2(null);\n  if (ref.current === null) {\n    ref.current = typeof init === \"function\" ? init() : init;\n  }\n  return ref.current;\n}\n\n// src/use-controllable.ts\nimport { runIfFn as runIfFn2 } from \"@chakra-ui/utils\";\nimport { useCallback as useCallback3, useState as useState4 } from \"react\";\nfunction useControllableProp(prop, state) {\n  var isControlled = prop !== void 0;\n  var value = isControlled && typeof prop !== \"undefined\" ? prop : state;\n  return [isControlled, value];\n}\nfunction useControllableState(props) {\n  var valueProp = props.value,\n    defaultValue = props.defaultValue,\n    onChange = props.onChange,\n    _props$shouldUpdate = props.shouldUpdate,\n    shouldUpdate = _props$shouldUpdate === void 0 ? function (prev, next) {\n      return prev !== next;\n    } : _props$shouldUpdate;\n  var onChangeProp = useCallbackRef(onChange);\n  var shouldUpdateProp = useCallbackRef(shouldUpdate);\n  var _useState11 = useState4(defaultValue),\n    _useState12 = _slicedToArray(_useState11, 2),\n    valueState = _useState12[0],\n    setValue = _useState12[1];\n  var isControlled = valueProp !== void 0;\n  var value = isControlled ? valueProp : valueState;\n  var updateValue = useCallback3(function (next) {\n    var nextValue = runIfFn2(next, value);\n    if (!shouldUpdateProp(value, nextValue)) {\n      return;\n    }\n    if (!isControlled) {\n      setValue(nextValue);\n    }\n    onChangeProp(nextValue);\n  }, [isControlled, onChangeProp, value, shouldUpdateProp]);\n  return [value, updateValue];\n}\n\n// src/use-dimensions.ts\nimport { getBox } from \"@chakra-ui/utils\";\nimport { useRef as useRef3, useState as useState5 } from \"react\";\nfunction useDimensions(ref, observe) {\n  var _useState13 = useState5(null),\n    _useState14 = _slicedToArray(_useState13, 2),\n    dimensions = _useState14[0],\n    setDimensions = _useState14[1];\n  var rafId = useRef3();\n  useSafeLayoutEffect(function () {\n    if (!ref.current) return void 0;\n    var node = ref.current;\n    function measure() {\n      rafId.current = requestAnimationFrame(function () {\n        var boxModel = getBox(node);\n        setDimensions(boxModel);\n      });\n    }\n    measure();\n    if (observe) {\n      window.addEventListener(\"resize\", measure);\n      window.addEventListener(\"scroll\", measure);\n    }\n    return function () {\n      if (observe) {\n        window.removeEventListener(\"resize\", measure);\n        window.removeEventListener(\"scroll\", measure);\n      }\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current);\n      }\n    };\n  }, [observe]);\n  return dimensions;\n}\n\n// src/use-disclosure.ts\nimport { callAllHandlers } from \"@chakra-ui/utils\";\n\n// src/use-id.ts\nimport { useCallback as useCallback4, useId as useReactId, useMemo as useMemo2, useState as useState6 } from \"react\";\nfunction useId(idProp, prefix) {\n  var id = useReactId();\n  return useMemo2(function () {\n    return idProp || [prefix, id].filter(Boolean).join(\"-\");\n  }, [idProp, prefix, id]);\n}\nfunction useIds(idProp) {\n  for (var _len2 = arguments.length, prefixes = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    prefixes[_key2 - 1] = arguments[_key2];\n  }\n  var id = useId(idProp);\n  return useMemo2(function () {\n    return prefixes.map(function (prefix) {\n      return \"\".concat(prefix, \"-\").concat(id);\n    });\n  }, [id, prefixes]);\n}\nfunction useOptionalPart(partId) {\n  var _useState15 = useState6(null),\n    _useState16 = _slicedToArray(_useState15, 2),\n    id = _useState16[0],\n    setId = _useState16[1];\n  var ref = useCallback4(function (node) {\n    setId(node ? partId : null);\n  }, [partId]);\n  return {\n    ref: ref,\n    id: id,\n    isRendered: Boolean(id)\n  };\n}\n\n// src/use-disclosure.ts\nimport { useCallback as useCallback5, useState as useState7 } from \"react\";\nfunction useDisclosure() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var onCloseProp = props.onClose,\n    onOpenProp = props.onOpen,\n    isOpenProp = props.isOpen,\n    idProp = props.id;\n  var onOpenPropCallbackRef = useCallbackRef(onOpenProp);\n  var onClosePropCallbackRef = useCallbackRef(onCloseProp);\n  var _useState17 = useState7(props.defaultIsOpen || false),\n    _useState18 = _slicedToArray(_useState17, 2),\n    isOpenState = _useState18[0],\n    setIsOpen = _useState18[1];\n  var _useControllableProp = useControllableProp(isOpenProp, isOpenState),\n    _useControllableProp2 = _slicedToArray(_useControllableProp, 2),\n    isControlled = _useControllableProp2[0],\n    isOpen = _useControllableProp2[1];\n  var id = useId(idProp, \"disclosure\");\n  var onClose = useCallback5(function () {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n    onClosePropCallbackRef == null ? void 0 : onClosePropCallbackRef();\n  }, [isControlled, onClosePropCallbackRef]);\n  var onOpen = useCallback5(function () {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n    onOpenPropCallbackRef == null ? void 0 : onOpenPropCallbackRef();\n  }, [isControlled, onOpenPropCallbackRef]);\n  var onToggle = useCallback5(function () {\n    var action = isOpen ? onClose : onOpen;\n    action();\n  }, [isOpen, onOpen, onClose]);\n  return {\n    isOpen: !!isOpen,\n    onOpen: onOpen,\n    onClose: onClose,\n    onToggle: onToggle,\n    isControlled: isControlled,\n    getButtonProps: function getButtonProps() {\n      var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _objectSpread({}, props2, {\n        \"aria-expanded\": isOpen,\n        \"aria-controls\": id,\n        onClick: callAllHandlers(props2.onClick, onToggle)\n      });\n    },\n    getDisclosureProps: function getDisclosureProps() {\n      var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _objectSpread({}, props2, {\n        hidden: !isOpen,\n        id: id\n      });\n    }\n  };\n}\n\n// src/use-event-listener-map.ts\nimport { getPointerEventName, wrapPointerEventHandler } from \"@chakra-ui/utils\";\nimport { useCallback as useCallback6, useEffect as useEffect5, useRef as useRef4 } from \"react\";\nfunction useEventListenerMap() {\n  var listeners = useRef4( /* @__PURE__ */new Map());\n  var currentListeners = listeners.current;\n  var add = useCallback6(function (el, type, listener, options) {\n    var pointerEventListener = wrapPointerEventHandler(listener, type === \"pointerdown\");\n    listeners.current.set(listener, {\n      __listener: pointerEventListener,\n      type: getPointerEventName(type),\n      el: el,\n      options: options\n    });\n    el.addEventListener(type, pointerEventListener, options);\n  }, []);\n  var remove = useCallback6(function (el, type, listener, options) {\n    var _listeners$current$ge = listeners.current.get(listener),\n      pointerEventListener = _listeners$current$ge.__listener;\n    el.removeEventListener(type, pointerEventListener, options);\n    listeners.current.delete(pointerEventListener);\n  }, []);\n  useEffect5(function () {\n    return function () {\n      currentListeners.forEach(function (value, key) {\n        remove(value.el, value.type, key, value.options);\n      });\n    };\n  }, [remove, currentListeners]);\n  return {\n    add: add,\n    remove: remove\n  };\n}\n\n// src/use-focus-effect.ts\nimport { hasFocusWithin, focus } from \"@chakra-ui/utils\";\n\n// src/use-update-effect.ts\nimport { useEffect as useEffect6, useRef as useRef5 } from \"react\";\nvar useUpdateEffect = function useUpdateEffect(effect, deps) {\n  var renderCycleRef = useRef5(false);\n  var effectCycleRef = useRef5(false);\n  useEffect6(function () {\n    var isMounted = renderCycleRef.current;\n    var shouldRun = isMounted && effectCycleRef.current;\n    if (shouldRun) {\n      return effect();\n    }\n    effectCycleRef.current = true;\n  }, deps);\n  useEffect6(function () {\n    renderCycleRef.current = true;\n    return function () {\n      renderCycleRef.current = false;\n    };\n  }, []);\n};\n\n// src/use-focus-effect.ts\nfunction useFocusEffect(ref, options) {\n  var shouldFocus = options.shouldFocus,\n    preventScroll = options.preventScroll;\n  useUpdateEffect(function () {\n    var node = ref.current;\n    if (!node || !shouldFocus) return;\n    if (!hasFocusWithin(node)) {\n      focus(node, {\n        preventScroll: preventScroll,\n        nextTick: true\n      });\n    }\n  }, [shouldFocus, ref, preventScroll]);\n}\n\n// src/use-focus-on-hide.ts\nimport { contains, focus as focus2, getActiveElement, isTabbable } from \"@chakra-ui/utils\";\nfunction preventReturnFocus(containerRef) {\n  var el = containerRef.current;\n  if (!el) return false;\n  var activeElement = getActiveElement(el);\n  if (!activeElement) return false;\n  if (contains(el, activeElement)) return false;\n  if (isTabbable(activeElement)) return true;\n  return false;\n}\nfunction useFocusOnHide(containerRef, options) {\n  var shouldFocusProp = options.shouldFocus,\n    visible = options.visible,\n    focusRef = options.focusRef;\n  var shouldFocus = shouldFocusProp && !visible;\n  useUpdateEffect(function () {\n    if (!shouldFocus) return;\n    if (preventReturnFocus(containerRef)) {\n      return;\n    }\n    var el = (focusRef == null ? void 0 : focusRef.current) || containerRef.current;\n    if (el) {\n      focus2(el, {\n        nextTick: true\n      });\n    }\n  }, [shouldFocus, containerRef, focusRef]);\n}\n\n// src/use-focus-on-pointerdown.ts\nimport { contains as contains2, detectBrowser, focus as focus3, getOwnerDocument, isActiveElement, isRefObject } from \"@chakra-ui/utils\";\n\n// src/use-pointer-event.ts\nimport { getPointerEventName as getPointerEventName2, wrapPointerEventHandler as wrapPointerEventHandler2 } from \"@chakra-ui/utils\";\nfunction usePointerEvent(env, eventName, handler, options) {\n  return useEventListener(getPointerEventName2(eventName), wrapPointerEventHandler2(handler, eventName === \"pointerdown\"), env, options);\n}\n\n// src/use-focus-on-pointerdown.ts\nfunction useFocusOnPointerDown(props) {\n  var ref = props.ref,\n    elements = props.elements,\n    enabled = props.enabled;\n  var isSafari = detectBrowser(\"Safari\");\n  var doc = function doc() {\n    return getOwnerDocument(ref.current);\n  };\n  usePointerEvent(doc, \"pointerdown\", function (event) {\n    if (!isSafari || !enabled) return;\n    var target = event.target;\n    var els = elements ?? [ref];\n    var isValidTarget = els.some(function (elementOrRef) {\n      var el = isRefObject(elementOrRef) ? elementOrRef.current : elementOrRef;\n      return contains2(el, target);\n    });\n    if (!isActiveElement(target) && isValidTarget) {\n      event.preventDefault();\n      focus3(target);\n    }\n  });\n}\n\n// src/use-focus-on-show.ts\nimport { contains as contains3, focus as focus4, getAllFocusable, isRefObject as isRefObject2 } from \"@chakra-ui/utils\";\nimport { useCallback as useCallback7, useRef as useRef6 } from \"react\";\nvar defaultOptions = {\n  preventScroll: true,\n  shouldFocus: false\n};\nfunction useFocusOnShow(target) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;\n  var focusRef = options.focusRef,\n    preventScroll = options.preventScroll,\n    shouldFocus = options.shouldFocus,\n    visible = options.visible;\n  var element = isRefObject2(target) ? target.current : target;\n  var autoFocusValue = shouldFocus && visible;\n  var autoFocusRef = useRef6(autoFocusValue);\n  var lastVisibleRef = useRef6(visible);\n  useSafeLayoutEffect(function () {\n    if (!lastVisibleRef.current && visible) {\n      autoFocusRef.current = autoFocusValue;\n    }\n    lastVisibleRef.current = visible;\n  }, [visible, autoFocusValue]);\n  var onFocus = useCallback7(function () {\n    if (!visible || !element || !autoFocusRef.current) return;\n    autoFocusRef.current = false;\n    if (contains3(element, document.activeElement)) return;\n    if (focusRef == null ? void 0 : focusRef.current) {\n      focus4(focusRef.current, {\n        preventScroll: preventScroll,\n        nextTick: true\n      });\n    } else {\n      var tabbableEls = getAllFocusable(element);\n      if (tabbableEls.length > 0) {\n        focus4(tabbableEls[0], {\n          preventScroll: preventScroll,\n          nextTick: true\n        });\n      }\n    }\n  }, [visible, preventScroll, element, focusRef]);\n  useUpdateEffect(function () {\n    onFocus();\n  }, [onFocus]);\n  useEventListener(\"transitionend\", onFocus, element);\n}\n\n// src/use-force-update.ts\nimport { useCallback as useCallback8, useRef as useRef7, useState as useState8 } from \"react\";\n\n// src/use-unmount-effect.ts\nimport { useEffect as useEffect7 } from \"react\";\nfunction useUnmountEffect(fn) {\n  var deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return useEffect7(function () {\n    return function () {\n      return fn();\n    };\n  }, deps);\n}\n\n// src/use-force-update.ts\nfunction useForceUpdate() {\n  var unloadingRef = useRef7(false);\n  var _useState19 = useState8(0),\n    _useState20 = _slicedToArray(_useState19, 2),\n    count = _useState20[0],\n    setCount = _useState20[1];\n  useUnmountEffect(function () {\n    unloadingRef.current = true;\n  });\n  return useCallback8(function () {\n    if (!unloadingRef.current) {\n      setCount(count + 1);\n    }\n  }, [count]);\n}\n\n// src/use-interval.ts\nimport { useEffect as useEffect8 } from \"react\";\nfunction useInterval(callback, delay) {\n  var fn = useCallbackRef(callback);\n  useEffect8(function () {\n    var intervalId = null;\n    var tick = function tick() {\n      return fn();\n    };\n    if (delay !== null) {\n      intervalId = window.setInterval(tick, delay);\n    }\n    return function () {\n      if (intervalId) {\n        window.clearInterval(intervalId);\n      }\n    };\n  }, [delay, fn]);\n}\n\n// src/use-latest-ref.ts\nimport { useRef as useRef8 } from \"react\";\nfunction useLatestRef(value) {\n  var ref = useRef8(null);\n  ref.current = value;\n  return ref;\n}\n\n// src/use-merge-refs.ts\nimport { useMemo as useMemo3 } from \"react\";\nfunction assignRef(ref, value) {\n  if (ref == null) return;\n  if (typeof ref === \"function\") {\n    ref(value);\n    return;\n  }\n  try {\n    ref.current = value;\n  } catch (error) {\n    throw new Error(\"Cannot assign value '\".concat(value, \"' to ref '\").concat(ref, \"'\"));\n  }\n}\nfunction useMergeRefs() {\n  for (var _len3 = arguments.length, refs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    refs[_key3] = arguments[_key3];\n  }\n  return useMemo3(function () {\n    if (refs.every(function (ref) {\n      return ref == null;\n    })) {\n      return null;\n    }\n    return function (node) {\n      refs.forEach(function (ref) {\n        if (ref) assignRef(ref, node);\n      });\n    };\n  }, refs);\n}\n\n// src/use-mouse-down-ref.ts\nimport { useRef as useRef9 } from \"react\";\nfunction useMouseDownRef() {\n  var shouldListen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  var mouseDownRef = useRef9();\n  useEventListener(\"mousedown\", function (event) {\n    if (shouldListen) {\n      mouseDownRef.current = event.target;\n    }\n  });\n  return mouseDownRef;\n}\n\n// src/use-outside-click.ts\nimport { getOwnerDocument as getOwnerDocument2 } from \"@chakra-ui/utils\";\nimport { useEffect as useEffect9, useRef as useRef10 } from \"react\";\nfunction useOutsideClick(props) {\n  var ref = props.ref,\n    handler = props.handler,\n    _props$enabled = props.enabled,\n    enabled = _props$enabled === void 0 ? true : _props$enabled;\n  var savedHandler = useCallbackRef(handler);\n  var stateRef = useRef10({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false\n  });\n  var state = stateRef.current;\n  useEffect9(function () {\n    if (!enabled) return;\n    var onPointerDown = function onPointerDown(e) {\n      if (isValidEvent(e, ref)) {\n        state.isPointerDown = true;\n      }\n    };\n    var onMouseUp = function onMouseUp(event) {\n      if (state.ignoreEmulatedMouseEvents) {\n        state.ignoreEmulatedMouseEvents = false;\n        return;\n      }\n      if (state.isPointerDown && handler && isValidEvent(event, ref)) {\n        state.isPointerDown = false;\n        savedHandler(event);\n      }\n    };\n    var onTouchEnd = function onTouchEnd(event) {\n      state.ignoreEmulatedMouseEvents = true;\n      if (handler && state.isPointerDown && isValidEvent(event, ref)) {\n        state.isPointerDown = false;\n        savedHandler(event);\n      }\n    };\n    var doc = getOwnerDocument2(ref.current);\n    doc.addEventListener(\"mousedown\", onPointerDown, true);\n    doc.addEventListener(\"mouseup\", onMouseUp, true);\n    doc.addEventListener(\"touchstart\", onPointerDown, true);\n    doc.addEventListener(\"touchend\", onTouchEnd, true);\n    return function () {\n      doc.removeEventListener(\"mousedown\", onPointerDown, true);\n      doc.removeEventListener(\"mouseup\", onMouseUp, true);\n      doc.removeEventListener(\"touchstart\", onPointerDown, true);\n      doc.removeEventListener(\"touchend\", onTouchEnd, true);\n    };\n  }, [handler, ref, savedHandler, state, enabled]);\n}\nfunction isValidEvent(event, ref) {\n  var _a;\n  var target = event.target;\n  if (event.button > 0) return false;\n  if (target) {\n    var doc = getOwnerDocument2(target);\n    if (!doc.contains(target)) return false;\n  }\n  return !((_a = ref.current) == null ? void 0 : _a.contains(target));\n}\n\n// src/use-pan-gesture.ts\nimport { noop, PanSession } from \"@chakra-ui/utils\";\nimport { useEffect as useEffect10, useRef as useRef11 } from \"react\";\nfunction usePanGesture(ref, props) {\n  var onPan = props.onPan,\n    onPanStart = props.onPanStart,\n    onPanEnd = props.onPanEnd,\n    onPanSessionStart = props.onPanSessionStart,\n    onPanSessionEnd = props.onPanSessionEnd,\n    threshold = props.threshold;\n  var hasPanEvents = Boolean(onPan || onPanStart || onPanEnd || onPanSessionStart || onPanSessionEnd);\n  var panSession = useRef11(null);\n  var handlers = {\n    onSessionStart: onPanSessionStart,\n    onSessionEnd: onPanSessionEnd,\n    onStart: onPanStart,\n    onMove: onPan,\n    onEnd: function onEnd(event, info) {\n      panSession.current = null;\n      onPanEnd == null ? void 0 : onPanEnd(event, info);\n    }\n  };\n  useEffect10(function () {\n    var _a;\n    (_a = panSession.current) == null ? void 0 : _a.updateHandlers(handlers);\n  });\n  function onPointerDown(event) {\n    panSession.current = new PanSession(event, handlers, threshold);\n  }\n  usePointerEvent(function () {\n    return ref.current;\n  }, \"pointerdown\", hasPanEvents ? onPointerDown : noop);\n  useUnmountEffect(function () {\n    var _a;\n    (_a = panSession.current) == null ? void 0 : _a.end();\n    panSession.current = null;\n  });\n}\n\n// src/use-previous.ts\nimport { useRef as useRef12, useEffect as useEffect11 } from \"react\";\nfunction usePrevious(value) {\n  var ref = useRef12();\n  useEffect11(function () {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n\n// src/use-shortcut.ts\nimport { useEffect as useEffect12, useRef as useRef13, useState as useState9 } from \"react\";\nfunction isPrintableCharacter(event) {\n  var key = event.key;\n  return key.length === 1 || key.length > 1 && /[^a-zA-Z0-9]/.test(key);\n}\nfunction useShortcut() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _props$timeout = props.timeout,\n    timeout = _props$timeout === void 0 ? 300 : _props$timeout,\n    _props$preventDefault = props.preventDefault,\n    preventDefault = _props$preventDefault === void 0 ? function () {\n      return true;\n    } : _props$preventDefault;\n  var _useState21 = useState9([]),\n    _useState22 = _slicedToArray(_useState21, 2),\n    keys = _useState22[0],\n    setKeys = _useState22[1];\n  var timeoutRef = useRef13();\n  var flush = function flush() {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n  };\n  var clearKeysAfterDelay = function clearKeysAfterDelay() {\n    flush();\n    timeoutRef.current = setTimeout(function () {\n      setKeys([]);\n      timeoutRef.current = null;\n    }, timeout);\n  };\n  useEffect12(function () {\n    return flush;\n  }, []);\n  function onKeyDown(fn) {\n    return function (event) {\n      if (event.key === \"Backspace\") {\n        var keysCopy = _toConsumableArray(keys);\n        keysCopy.pop();\n        setKeys(keysCopy);\n        return;\n      }\n      if (isPrintableCharacter(event)) {\n        var _keysCopy = keys.concat(event.key);\n        if (preventDefault(event)) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n        setKeys(_keysCopy);\n        fn(_keysCopy.join(\"\"));\n        clearKeysAfterDelay();\n      }\n    };\n  }\n  return onKeyDown;\n}\n\n// src/use-timeout.ts\nimport { useEffect as useEffect13 } from \"react\";\nfunction useTimeout(callback, delay) {\n  var fn = useCallbackRef(callback);\n  useEffect13(function () {\n    if (delay == null) return void 0;\n    var timeoutId = null;\n    timeoutId = window.setTimeout(function () {\n      fn();\n    }, delay);\n    return function () {\n      if (timeoutId) {\n        window.clearTimeout(timeoutId);\n      }\n    };\n  }, [delay, fn]);\n}\n\n// src/use-why-update.ts\nimport { useEffect as useEffect14, useRef as useRef14 } from \"react\";\nfunction useWhyDidYouUpdate(name, props) {\n  var previousProps = useRef14();\n  useEffect14(function () {\n    if (previousProps.current) {\n      var allKeys = Object.keys(_objectSpread({}, previousProps.current, props));\n      var changesObj = {};\n      allKeys.forEach(function (key) {\n        if (previousProps.current[key] !== props[key]) {\n          changesObj[key] = {\n            from: previousProps.current[key],\n            to: props[key]\n          };\n        }\n      });\n      if (Object.keys(changesObj).length) {\n        console.log(\"[why-did-you-update]\", name, changesObj);\n      }\n    }\n    previousProps.current = props;\n  });\n}\nexport { assignRef, useAnimationState, useBoolean, useCallbackRef, useClipboard, useConst, useControllableProp, useControllableState, useDimensions, useDisclosure, useEventListener, useEventListenerMap, useFocusEffect, useFocusOnHide, useFocusOnPointerDown, useFocusOnShow, useForceUpdate, useId, useIds, useInterval, useLatestRef, useMergeRefs, useMouseDownRef, useOptionalPart, useOutsideClick, usePanGesture, usePointerEvent, usePrevious, useSafeLayoutEffect, useShortcut, useTimeout, useUnmountEffect, useUpdateEffect, useWhyDidYouUpdate };","map":null,"metadata":{},"sourceType":"module"}