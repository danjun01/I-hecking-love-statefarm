{"ast":null,"code":"import _asyncToGenerator from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nimport { useFloating as useFloating$1, offset, detectOverflow, getOverflowAncestors } from '@floating-ui/react-dom';\nexport * from '@floating-ui/react-dom';\nimport * as React from 'react';\nimport { useLayoutEffect, useEffect, useRef } from 'react';\nimport { createPortal, flushSync } from 'react-dom';\nimport { hideOthers } from 'aria-hidden';\nvar index = typeof document !== 'undefined' ? useLayoutEffect : useEffect;\nfunction createPubSub() {\n  var map = new Map();\n  return {\n    emit: function emit(event, data) {\n      var _map$get;\n      (_map$get = map.get(event)) == null ? void 0 : _map$get.forEach(function (handler) {\n        return handler(data);\n      });\n    },\n    on: function on(event, listener) {\n      map.set(event, [].concat(_toConsumableArray(map.get(event) || []), [listener]));\n    },\n    off: function off(event, listener) {\n      map.set(event, (map.get(event) || []).filter(function (l) {\n        return l !== listener;\n      }));\n    }\n  };\n}\nvar serverHandoffComplete = false;\nvar count = 0;\nvar genId = function genId() {\n  return \"floating-ui-\" + count++;\n};\nfunction useFloatingId() {\n  var _React$useState = React.useState(function () {\n      return serverHandoffComplete ? genId() : undefined;\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    id = _React$useState2[0],\n    setId = _React$useState2[1];\n  index(function () {\n    if (id == null) {\n      setId(genId());\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  React.useEffect(function () {\n    if (!serverHandoffComplete) {\n      serverHandoffComplete = true;\n    }\n  }, []);\n  return id;\n} // `toString()` prevents bundlers from trying to `import { useId } from 'react'`\n\nvar useReactId = React[/*#__PURE__*/'useId'.toString()];\n/**\n * Uses React 18's built-in `useId()` when available, or falls back to a\n * slightly less performant (requiring a double render) implementation for\n * earlier React versions.\n * @see https://floating-ui.com/docs/useId\n */\n\nvar useId = useReactId != null ? useReactId : useFloatingId;\nvar FloatingNodeContext = /*#__PURE__*/React.createContext(null);\nvar FloatingTreeContext = /*#__PURE__*/React.createContext(null);\nvar useFloatingParentNodeId = function useFloatingParentNodeId() {\n  var _React$useContext$id, _React$useContext;\n  return (_React$useContext$id = (_React$useContext = React.useContext(FloatingNodeContext)) == null ? void 0 : _React$useContext.id) != null ? _React$useContext$id : null;\n};\nvar useFloatingTree = function useFloatingTree() {\n  return React.useContext(FloatingTreeContext);\n};\n/**\n * Registers a node into the floating tree, returning its id.\n */\n\nvar useFloatingNodeId = function useFloatingNodeId() {\n  var id = useId();\n  var tree = useFloatingTree();\n  var parentId = useFloatingParentNodeId();\n  index(function () {\n    var node = {\n      id: id,\n      parentId: parentId\n    };\n    tree == null ? void 0 : tree.addNode(node);\n    return function () {\n      tree == null ? void 0 : tree.removeNode(node);\n    };\n  }, [tree, id, parentId]);\n  return id;\n};\n/**\n * Provides parent node context for nested floating elements.\n * @see https://floating-ui.com/docs/FloatingTree\n */\n\nvar FloatingNode = function FloatingNode(_ref) {\n  var children = _ref.children,\n    id = _ref.id;\n  var parentId = useFloatingParentNodeId();\n  return /*#__PURE__*/React.createElement(FloatingNodeContext.Provider, {\n    value: React.useMemo(function () {\n      return {\n        id: id,\n        parentId: parentId\n      };\n    }, [id, parentId])\n  }, children);\n};\n/**\n * Provides context for nested floating elements when they are not children of\n * each other on the DOM (i.e. portalled to a common node, rather than their\n * respective parent).\n * @see https://floating-ui.com/docs/FloatingTree\n */\n\nvar FloatingTree = function FloatingTree(_ref2) {\n  var children = _ref2.children;\n  var nodesRef = React.useRef([]);\n  var addNode = React.useCallback(function (node) {\n    nodesRef.current = [].concat(_toConsumableArray(nodesRef.current), [node]);\n  }, []);\n  var removeNode = React.useCallback(function (node) {\n    nodesRef.current = nodesRef.current.filter(function (n) {\n      return n !== node;\n    });\n  }, []);\n  var events = React.useState(function () {\n    return createPubSub();\n  })[0];\n  return /*#__PURE__*/React.createElement(FloatingTreeContext.Provider, {\n    value: React.useMemo(function () {\n      return {\n        nodesRef: nodesRef,\n        addNode: addNode,\n        removeNode: removeNode,\n        events: events\n      };\n    }, [nodesRef, addNode, removeNode, events])\n  }, children);\n};\nfunction getDocument(floating) {\n  var _floating$ownerDocume;\n  return (_floating$ownerDocume = floating == null ? void 0 : floating.ownerDocument) != null ? _floating$ownerDocume : document;\n}\nfunction getWindow(value) {\n  var _getDocument$defaultV;\n  return (_getDocument$defaultV = getDocument(value).defaultView) != null ? _getDocument$defaultV : window;\n}\nfunction isElement(value) {\n  return value ? value instanceof getWindow(value).Element : false;\n}\nfunction isHTMLElement(value) {\n  return value ? value instanceof getWindow(value).HTMLElement : false;\n}\nfunction useFloating(_temp) {\n  var _ref5 = _temp === void 0 ? {} : _temp,\n    _ref5$open = _ref5.open,\n    open = _ref5$open === void 0 ? false : _ref5$open,\n    _ref5$onOpenChange = _ref5.onOpenChange,\n    onOpenChange = _ref5$onOpenChange === void 0 ? function () {} : _ref5$onOpenChange,\n    whileElementsMounted = _ref5.whileElementsMounted,\n    placement = _ref5.placement,\n    middleware = _ref5.middleware,\n    strategy = _ref5.strategy,\n    nodeId = _ref5.nodeId;\n  var tree = useFloatingTree();\n  var domReferenceRef = React.useRef(null);\n  var dataRef = React.useRef({});\n  var events = React.useState(function () {\n    return createPubSub();\n  })[0];\n  var floating = useFloating$1({\n    placement: placement,\n    middleware: middleware,\n    strategy: strategy,\n    whileElementsMounted: whileElementsMounted\n  });\n  var refs = React.useMemo(function () {\n    return _objectSpread({}, floating.refs, {\n      domReference: domReferenceRef\n    });\n  }, [floating.refs]);\n  var context = React.useMemo(function () {\n    return _objectSpread({}, floating, {\n      refs: refs,\n      dataRef: dataRef,\n      nodeId: nodeId,\n      events: events,\n      open: open,\n      onOpenChange: onOpenChange\n    });\n  }, [floating, nodeId, events, open, onOpenChange, refs]);\n  index(function () {\n    var node = tree == null ? void 0 : tree.nodesRef.current.find(function (node) {\n      return node.id === nodeId;\n    });\n    if (node) {\n      node.context = context;\n    }\n  });\n  var reference = floating.reference;\n  var setReference = React.useCallback(function (node) {\n    if (isElement(node) || node === null) {\n      context.refs.domReference.current = node;\n    }\n    reference(node);\n  }, [reference, context.refs]);\n  return React.useMemo(function () {\n    return _objectSpread({}, floating, {\n      context: context,\n      refs: refs,\n      reference: setReference\n    });\n  }, [floating, refs, context, setReference]);\n}\nfunction mergeProps(userProps, propsList, elementKey) {\n  var map = new Map();\n  return _objectSpread({}, elementKey === 'floating' && {\n    tabIndex: -1\n  }, userProps, propsList.map(function (value) {\n    return value ? value[elementKey] : null;\n  }).concat(userProps).reduce(function (acc, props) {\n    if (!props) {\n      return acc;\n    }\n    Object.entries(props).forEach(function (_ref) {\n      var _ref6 = _slicedToArray(_ref, 2),\n        key = _ref6[0],\n        value = _ref6[1];\n      if (key.indexOf('on') === 0) {\n        if (!map.has(key)) {\n          map.set(key, []);\n        }\n        if (typeof value === 'function') {\n          var _map$get;\n          (_map$get = map.get(key)) == null ? void 0 : _map$get.push(value);\n        }\n        acc[key] = function () {\n          var _map$get2;\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n          (_map$get2 = map.get(key)) == null ? void 0 : _map$get2.forEach(function (fn) {\n            return fn.apply(void 0, args);\n          });\n        };\n      } else {\n        acc[key] = value;\n      }\n    });\n    return acc;\n  }, {}));\n}\nvar useInteractions = function useInteractions(propsList) {\n  if (propsList === void 0) {\n    propsList = [];\n  }\n  return {\n    getReferenceProps: function getReferenceProps(userProps) {\n      return mergeProps(userProps, propsList, 'reference');\n    },\n    getFloatingProps: function getFloatingProps(userProps) {\n      return mergeProps(userProps, propsList, 'floating');\n    },\n    getItemProps: function getItemProps(userProps) {\n      return mergeProps(userProps, propsList, 'item');\n    }\n  };\n};\nfunction getChildren(nodes, id) {\n  var _nodes$filter;\n  var allChildren = (_nodes$filter = nodes.filter(function (node) {\n    var _node$context;\n    return node.parentId === id && ((_node$context = node.context) == null ? void 0 : _node$context.open);\n  })) != null ? _nodes$filter : [];\n  var currentChildren = allChildren;\n  while (currentChildren.length) {\n    var _nodes$filter2;\n    currentChildren = (_nodes$filter2 = nodes.filter(function (node) {\n      var _currentChildren;\n      return (_currentChildren = currentChildren) == null ? void 0 : _currentChildren.some(function (n) {\n        var _node$context2;\n        return node.parentId === n.id && ((_node$context2 = node.context) == null ? void 0 : _node$context2.open);\n      });\n    })) != null ? _nodes$filter2 : [];\n    allChildren = allChildren.concat(currentChildren);\n  }\n  return allChildren;\n}\nfunction isPointInPolygon(point, polygon) {\n  var _point = _slicedToArray(point, 2),\n    x = _point[0],\n    y = _point[1];\n  var isInside = false;\n  var length = polygon.length;\n  for (var i = 0, j = length - 1; i < length; j = i++) {\n    var _ref7 = polygon[i] || [0, 0],\n      _ref8 = _slicedToArray(_ref7, 2),\n      xi = _ref8[0],\n      yi = _ref8[1];\n    var _ref9 = polygon[j] || [0, 0],\n      _ref10 = _slicedToArray(_ref9, 2),\n      xj = _ref10[0],\n      yj = _ref10[1];\n    var intersect = yi >= y !== yj >= y && x <= (xj - xi) * (y - yi) / (yj - yi) + xi;\n    if (intersect) {\n      isInside = !isInside;\n    }\n  }\n  return isInside;\n}\nfunction safePolygon(_temp) {\n  var _ref11 = _temp === void 0 ? {} : _temp,\n    _ref11$restMs = _ref11.restMs,\n    restMs = _ref11$restMs === void 0 ? 0 : _ref11$restMs,\n    _ref11$buffer = _ref11.buffer,\n    buffer = _ref11$buffer === void 0 ? 0.5 : _ref11$buffer,\n    _ref11$debug = _ref11.debug,\n    debug = _ref11$debug === void 0 ? null : _ref11$debug;\n  var timeoutId;\n  var polygonIsDestroyed = false;\n  return function (_ref) {\n    var x = _ref.x,\n      y = _ref.y,\n      placement = _ref.placement,\n      refs = _ref.refs,\n      onClose = _ref.onClose,\n      nodeId = _ref.nodeId,\n      tree = _ref.tree,\n      _ref$leave = _ref.leave,\n      leave = _ref$leave === void 0 ? false : _ref$leave;\n    return function onPointerMove(event) {\n      var _refs$domReference$cu, _refs$floating$curren;\n      clearTimeout(timeoutId);\n      function close() {\n        clearTimeout(timeoutId);\n        onClose();\n      }\n      if (event.pointerType && event.pointerType !== 'mouse') {\n        return;\n      }\n      var clientX = event.clientX,\n        clientY = event.clientY;\n      var target = 'composedPath' in event ? event.composedPath()[0] : event.target;\n      var targetNode = target; // If the pointer is over the reference or floating element already, there\n      // is no need to run the logic.\n\n      if (event.type === 'pointermove' && (_refs$domReference$cu = refs.domReference.current) != null && _refs$domReference$cu.contains(targetNode)) {\n        return;\n      } // If any nested child is open, abort.\n\n      if (tree && getChildren(tree.nodesRef.current, nodeId).some(function (_ref2) {\n        var context = _ref2.context;\n        return context == null ? void 0 : context.open;\n      })) {\n        return;\n      } // The cursor landed, so we destroy the polygon logic\n\n      if ((_refs$floating$curren = refs.floating.current) != null && _refs$floating$curren.contains(targetNode) && !leave) {\n        polygonIsDestroyed = true;\n        return;\n      }\n      if (!refs.domReference.current || !refs.floating.current || placement == null || x == null || y == null) {\n        return;\n      }\n      var refRect = refs.domReference.current.getBoundingClientRect();\n      var rect = refs.floating.current.getBoundingClientRect();\n      var side = placement.split('-')[0];\n      var cursorLeaveFromRight = x > rect.right - rect.width / 2;\n      var cursorLeaveFromBottom = y > rect.bottom - rect.height / 2; // If the pointer is leaving from the opposite side, the \"buffer\" logic\n      // creates a point where the floating element remains open, but should be\n      // ignored.\n      // A constant of 1 handles floating point rounding errors.\n\n      if (side === 'top' && y >= refRect.bottom - 1 || side === 'bottom' && y <= refRect.top + 1 || side === 'left' && x >= refRect.right - 1 || side === 'right' && x <= refRect.left + 1) {\n        return close();\n      } // Ignore when the cursor is within the rectangular trough between the\n      // two elements. Since the triangle is created from the cursor point,\n      // which can start beyond the ref element's edge, traversing back and\n      // forth from the ref to the floating element can cause it to close. This\n      // ensures it always remains open in that case.\n\n      switch (side) {\n        case 'top':\n          if (clientX >= rect.left && clientX <= rect.right && clientY >= rect.top && clientY <= refRect.top + 1) {\n            return;\n          }\n          break;\n        case 'bottom':\n          if (clientX >= rect.left && clientX <= rect.right && clientY >= refRect.bottom - 1 && clientY <= rect.bottom) {\n            return;\n          }\n          break;\n        case 'left':\n          if (clientX >= rect.left && clientX <= refRect.left + 1 && clientY >= rect.top && clientY <= rect.bottom) {\n            return;\n          }\n          break;\n        case 'right':\n          if (clientX >= refRect.right - 1 && clientX <= rect.right && clientY >= rect.top && clientY <= rect.bottom) {\n            return;\n          }\n          break;\n      }\n      if (polygonIsDestroyed) {\n        return close();\n      }\n      function getPolygon(_ref3) {\n        var _ref12 = _slicedToArray(_ref3, 2),\n          x = _ref12[0],\n          y = _ref12[1];\n        var isFloatingWider = rect.width > refRect.width;\n        var isFloatingTaller = rect.height > refRect.height;\n        switch (side) {\n          case 'top':\n            {\n              var cursorPointOne = [isFloatingWider ? x + buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y + buffer + 1];\n              var cursorPointTwo = [isFloatingWider ? x - buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y + buffer + 1];\n              var commonPoints = [[rect.left, cursorLeaveFromRight ? rect.bottom - buffer : isFloatingWider ? rect.bottom - buffer : rect.top], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.bottom - buffer : rect.top : rect.bottom - buffer]];\n              return [cursorPointOne, cursorPointTwo].concat(commonPoints);\n            }\n          case 'bottom':\n            {\n              var _cursorPointOne = [isFloatingWider ? x + buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y - buffer];\n              var _cursorPointTwo = [isFloatingWider ? x - buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y - buffer];\n              var _commonPoints = [[rect.left, cursorLeaveFromRight ? rect.top + buffer : isFloatingWider ? rect.top + buffer : rect.bottom], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.top + buffer : rect.bottom : rect.top + buffer]];\n              return [_cursorPointOne, _cursorPointTwo].concat(_commonPoints);\n            }\n          case 'left':\n            {\n              var _cursorPointOne2 = [x + buffer + 1, isFloatingTaller ? y + buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\n              var _cursorPointTwo2 = [x + buffer + 1, isFloatingTaller ? y - buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\n              var _commonPoints2 = [[cursorLeaveFromBottom ? rect.right - buffer : isFloatingTaller ? rect.right - buffer : rect.left, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.right - buffer : rect.left : rect.right - buffer, rect.bottom]];\n              return [].concat(_commonPoints2, [_cursorPointOne2, _cursorPointTwo2]);\n            }\n          case 'right':\n            {\n              var _cursorPointOne3 = [x - buffer, isFloatingTaller ? y + buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\n              var _cursorPointTwo3 = [x - buffer, isFloatingTaller ? y - buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\n              var _commonPoints3 = [[cursorLeaveFromBottom ? rect.left + buffer : isFloatingTaller ? rect.left + buffer : rect.right, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.left + buffer : rect.right : rect.left + buffer, rect.bottom]];\n              return [_cursorPointOne3, _cursorPointTwo3].concat(_commonPoints3);\n            }\n        }\n      }\n      var poly = getPolygon([x, y]);\n      if (process.env.NODE_ENV !== \"production\") {\n        debug == null ? void 0 : debug(poly.slice(0, 4).join(', '));\n      }\n      if (!isPointInPolygon([clientX, clientY], poly)) {\n        close();\n      } else if (restMs) {\n        timeoutId = setTimeout(onClose, restMs);\n      }\n    };\n  };\n}\nvar DEFAULT_ID = 'floating-ui-root';\nvar useFloatingPortalNode = function useFloatingPortalNode(_temp) {\n  var _ref13 = _temp === void 0 ? {} : _temp,\n    _ref13$id = _ref13.id,\n    id = _ref13$id === void 0 ? DEFAULT_ID : _ref13$id,\n    _ref13$enabled = _ref13.enabled,\n    enabled = _ref13$enabled === void 0 ? true : _ref13$enabled;\n  var _React$useState3 = React.useState(null),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    portalEl = _React$useState4[0],\n    setPortalEl = _React$useState4[1];\n  index(function () {\n    if (!enabled) {\n      return;\n    }\n    var rootNode = document.getElementById(id);\n    if (rootNode) {\n      setPortalEl(rootNode);\n    } else {\n      var newPortalEl = document.createElement('div');\n      newPortalEl.id = id;\n      setPortalEl(newPortalEl);\n      if (!document.body.contains(newPortalEl)) {\n        document.body.appendChild(newPortalEl);\n      }\n    }\n  }, [id, enabled]);\n  return portalEl;\n};\n/**\n * Portals your floating element outside of the main app node.\n * @see https://floating-ui.com/docs/FloatingPortal\n */\n\nvar FloatingPortal = function FloatingPortal(_ref) {\n  var children = _ref.children,\n    _ref$id = _ref.id,\n    id = _ref$id === void 0 ? DEFAULT_ID : _ref$id,\n    _ref$root = _ref.root,\n    root = _ref$root === void 0 ? null : _ref$root;\n  var portalNode = useFloatingPortalNode({\n    id: id,\n    enabled: !root\n  });\n  if (root) {\n    return /*#__PURE__*/createPortal(children, root);\n  }\n  if (portalNode) {\n    return /*#__PURE__*/createPortal(children, portalNode);\n  }\n  return null;\n};\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n// Avoid Chrome DevTools blue warning\nfunction getPlatform() {\n  var uaData = navigator.userAgentData;\n  if (uaData != null && uaData.platform) {\n    return uaData.platform;\n  }\n  return navigator.platform;\n}\nfunction getUserAgent() {\n  var uaData = navigator.userAgentData;\n  if (uaData != null && uaData.brands) {\n    return uaData.brands.map(function (_ref) {\n      var brand = _ref.brand,\n        version = _ref.version;\n      return brand + \"/\" + version;\n    }).join(' ');\n  }\n  return navigator.userAgent;\n}\nvar identifier = 'data-floating-ui-scroll-lock';\n/**\n * Provides base styling for a fixed overlay element to dim content or block\n * pointer events behind a floating element.\n * It's a regular `<div>`, so it can be styled via any CSS solution you prefer.\n * @see https://floating-ui.com/docs/FloatingOverlay\n */\n\nvar FloatingOverlay = /*#__PURE__*/React.forwardRef(function FloatingOverlay(_ref, ref) {\n  var _ref$lockScroll = _ref.lockScroll,\n    lockScroll = _ref$lockScroll === void 0 ? false : _ref$lockScroll,\n    rest = _objectWithoutProperties(_ref, [\"lockScroll\"]);\n  index(function () {\n    var _window$visualViewpor, _window$visualViewpor2, _window$visualViewpor3, _window$visualViewpor4;\n    if (!lockScroll) {\n      return;\n    }\n    var alreadyLocked = document.body.hasAttribute(identifier);\n    if (alreadyLocked) {\n      return;\n    }\n    document.body.setAttribute(identifier, ''); // RTL <body> scrollbar\n\n    var scrollbarX = Math.round(document.documentElement.getBoundingClientRect().left) + document.documentElement.scrollLeft;\n    var paddingProp = scrollbarX ? 'paddingLeft' : 'paddingRight';\n    var scrollbarWidth = window.innerWidth - document.documentElement.clientWidth; // Only iOS doesn't respect `overflow: hidden` on document.body, and this\n    // technique has fewer side effects.\n\n    if (!/iP(hone|ad|od)|iOS/.test(getPlatform())) {\n      Object.assign(document.body.style, _defineProperty({\n        overflow: 'hidden'\n      }, paddingProp, scrollbarWidth + \"px\"));\n      return function () {\n        document.body.removeAttribute(identifier);\n        Object.assign(document.body.style, _defineProperty({\n          overflow: ''\n        }, paddingProp, ''));\n      };\n    } // iOS 12 does not support `visuaViewport`.\n\n    var offsetLeft = (_window$visualViewpor = (_window$visualViewpor2 = window.visualViewport) == null ? void 0 : _window$visualViewpor2.offsetLeft) != null ? _window$visualViewpor : 0;\n    var offsetTop = (_window$visualViewpor3 = (_window$visualViewpor4 = window.visualViewport) == null ? void 0 : _window$visualViewpor4.offsetTop) != null ? _window$visualViewpor3 : 0;\n    var scrollX = window.pageXOffset;\n    var scrollY = window.pageYOffset;\n    Object.assign(document.body.style, _defineProperty({\n      position: 'fixed',\n      overflow: 'hidden',\n      top: -(scrollY - Math.floor(offsetTop)) + \"px\",\n      left: -(scrollX - Math.floor(offsetLeft)) + \"px\",\n      right: '0'\n    }, paddingProp, scrollbarWidth + \"px\"));\n    return function () {\n      Object.assign(document.body.style, _defineProperty({\n        position: '',\n        overflow: '',\n        top: '',\n        left: '',\n        right: ''\n      }, paddingProp, ''));\n      document.body.removeAttribute(identifier);\n      window.scrollTo(scrollX, scrollY);\n    };\n  }, [lockScroll]);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref\n  }, rest, {\n    style: _objectSpread({\n      position: 'fixed',\n      overflow: 'auto',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    }, rest.style)\n  }));\n});\n\n/**\n * Find the real active element. Traverses into shadowRoots.\n */\nfunction activeElement(doc) {\n  var activeElement = doc.activeElement;\n  while (((_activeElement = activeElement) == null ? void 0 : (_activeElement$shadow = _activeElement.shadowRoot) == null ? void 0 : _activeElement$shadow.activeElement) != null) {\n    var _activeElement, _activeElement$shadow;\n    activeElement = activeElement.shadowRoot.activeElement;\n  }\n  return activeElement;\n}\nfunction getAncestors(nodes, id) {\n  var _nodes$find;\n  var allAncestors = [];\n  var currentParentId = (_nodes$find = nodes.find(function (node) {\n    return node.id === id;\n  })) == null ? void 0 : _nodes$find.parentId;\n  while (currentParentId) {\n    var currentNode = nodes.find(function (node) {\n      return node.id === currentParentId;\n    });\n    currentParentId = currentNode == null ? void 0 : currentNode.parentId;\n    if (currentNode) {\n      allAncestors = allAncestors.concat(currentNode);\n    }\n  }\n  return allAncestors;\n}\nvar TYPEABLE_SELECTOR = \"input:not([type='hidden']):not([disabled]),\" + \"[contenteditable]:not([contenteditable='false']),textarea:not([disabled])\";\nfunction isTypeableElement(element) {\n  return isHTMLElement(element) && element.matches(TYPEABLE_SELECTOR);\n}\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\nfunction useLatestRef(value) {\n  var ref = useRef(value);\n  index(function () {\n    ref.current = value;\n  });\n  return ref;\n}\nfunction focus(el, preventScroll) {\n  if (preventScroll === void 0) {\n    preventScroll = false;\n  }\n\n  // `pointerDown` clicks occur before `focus`, so the button will steal the\n  // focus unless we wait a frame.\n  requestAnimationFrame(function () {\n    el == null ? void 0 : el.focus({\n      preventScroll: preventScroll\n    });\n  });\n}\nvar SELECTOR = 'select:not([disabled]),a[href],button:not([disabled]),[tabindex],' + 'iframe,object,embed,area[href],audio[controls],video[controls],' + TYPEABLE_SELECTOR;\nvar FocusGuard = /*#__PURE__*/React.forwardRef(function FocusGuard(props, ref) {\n  return /*#__PURE__*/React.createElement(\"span\", _extends({}, props, {\n    ref: ref,\n    tabIndex: 0,\n    style: {\n      position: 'fixed',\n      opacity: '0',\n      pointerEvents: 'none',\n      outline: '0'\n    }\n  }));\n});\n\n/**\n * Provides focus management for the floating element.\n * @see https://floating-ui.com/docs/FloatingFocusManager\n */\nfunction FloatingFocusManager(_ref) {\n  var _tree$nodesRef$curren;\n  var _ref$context = _ref.context,\n    refs = _ref$context.refs,\n    nodeId = _ref$context.nodeId,\n    onOpenChange = _ref$context.onOpenChange,\n    dataRef = _ref$context.dataRef,\n    events = _ref$context.events,\n    children = _ref.children,\n    _ref$order = _ref.order,\n    order = _ref$order === void 0 ? ['content'] : _ref$order,\n    _ref$endGuard = _ref.endGuard,\n    endGuard = _ref$endGuard === void 0 ? true : _ref$endGuard,\n    _ref$preventTabbing = _ref.preventTabbing,\n    preventTabbing = _ref$preventTabbing === void 0 ? false : _ref$preventTabbing,\n    _ref$initialFocus = _ref.initialFocus,\n    initialFocus = _ref$initialFocus === void 0 ? 0 : _ref$initialFocus,\n    _ref$returnFocus = _ref.returnFocus,\n    returnFocus = _ref$returnFocus === void 0 ? true : _ref$returnFocus,\n    _ref$modal = _ref.modal,\n    modal = _ref$modal === void 0 ? true : _ref$modal;\n  var orderRef = useLatestRef(order);\n  var onOpenChangeRef = useLatestRef(onOpenChange);\n  var tree = useFloatingTree();\n  var root = (tree == null ? void 0 : (_tree$nodesRef$curren = tree.nodesRef.current.find(function (node) {\n    return node.id === nodeId;\n  })) == null ? void 0 : _tree$nodesRef$curren.parentId) == null;\n  var getTabbableElements = React.useCallback(function () {\n    return orderRef.current.map(function (type) {\n      if (type === 'reference') {\n        return refs.domReference.current;\n      }\n      if (refs.floating.current && type === 'floating') {\n        return refs.floating.current;\n      }\n      if (type === 'content') {\n        var _refs$floating$curren, _refs$floating$curren2;\n        return Array.from((_refs$floating$curren = (_refs$floating$curren2 = refs.floating.current) == null ? void 0 : _refs$floating$curren2.querySelectorAll(SELECTOR)) != null ? _refs$floating$curren : []);\n      }\n      return null;\n    }).flat().filter(function (el) {\n      if (el === refs.floating.current || el === refs.domReference.current) {\n        return true;\n      }\n      if (isHTMLElement(el)) {\n        var _el$getAttribute;\n        var tabIndex = (_el$getAttribute = el.getAttribute('tabindex')) != null ? _el$getAttribute : '0';\n        return tabIndex[0].trim() !== '-';\n      }\n    });\n  }, [orderRef, refs]);\n  React.useEffect(function () {\n    if (!modal) {\n      return;\n    } // If the floating element has no focusable elements inside it, fallback\n    // to focusing the floating element and preventing tab navigation\n\n    var noTabbableContentElements = getTabbableElements().filter(function (el) {\n      return el !== refs.floating.current && el !== refs.domReference.current;\n    }).length === 0;\n    function onKeyDown(event) {\n      if (event.key === 'Tab') {\n        if (preventTabbing || noTabbableContentElements) {\n          stopEvent(event);\n        }\n        var els = getTabbableElements();\n        var target = 'composedPath' in event ? event.composedPath()[0] :\n        // TS thinks `event` is of type never as it assumes all browsers\n        // support composedPath, but browsers without shadow dom don't\n        event.target;\n        if (orderRef.current[0] === 'reference' && target === refs.domReference.current) {\n          stopEvent(event);\n          if (event.shiftKey) {\n            focus(els[els.length - 1]);\n          } else {\n            focus(els[1]);\n          }\n        }\n        if (orderRef.current[1] === 'floating' && target === refs.floating.current && event.shiftKey) {\n          stopEvent(event);\n          focus(els[0]);\n        }\n      }\n    }\n    var doc = getDocument(refs.floating.current);\n    doc.addEventListener('keydown', onKeyDown);\n    return function () {\n      doc.removeEventListener('keydown', onKeyDown);\n    };\n  }, [preventTabbing, modal, getTabbableElements, orderRef, refs]);\n  React.useEffect(function () {\n    function onFocusOut(event) {\n      var _refs$floating$curren3, _getAncestors;\n      var relatedTarget = event.relatedTarget;\n      var focusMovedOutsideFloating = !((_refs$floating$curren3 = refs.floating.current) != null && _refs$floating$curren3.contains(relatedTarget));\n      var focusMovedOutsideReference = isElement(refs.domReference.current) && !refs.domReference.current.contains(relatedTarget);\n      var isChildOpen = tree && getChildren(tree.nodesRef.current, nodeId).length > 0;\n      var isParentRelated = tree && event.currentTarget === refs.domReference.current && ((_getAncestors = getAncestors(tree.nodesRef.current, nodeId)) == null ? void 0 : _getAncestors.some(function (node) {\n        var _node$context, _node$context$refs$fl;\n        return (_node$context = node.context) == null ? void 0 : (_node$context$refs$fl = _node$context.refs.floating.current) == null ? void 0 : _node$context$refs$fl.contains(relatedTarget);\n      }));\n      if (focusMovedOutsideFloating && focusMovedOutsideReference && !isChildOpen && !isParentRelated) {\n        onOpenChangeRef.current(false);\n      }\n    }\n    var floating = refs.floating.current;\n    var reference = refs.domReference.current;\n    if (floating && isHTMLElement(reference)) {\n      !modal && floating.addEventListener('focusout', onFocusOut);\n      !modal && reference.addEventListener('focusout', onFocusOut);\n      var cleanup;\n      if (modal) {\n        if (orderRef.current.includes('reference')) {\n          cleanup = hideOthers([reference, floating]);\n        } else {\n          cleanup = hideOthers(floating);\n        }\n      }\n      return function () {\n        !modal && floating.removeEventListener('focusout', onFocusOut);\n        !modal && reference.removeEventListener('focusout', onFocusOut);\n        cleanup == null ? void 0 : cleanup();\n      };\n    }\n  }, [nodeId, tree, modal, onOpenChangeRef, orderRef, dataRef, getTabbableElements, refs]);\n  React.useEffect(function () {\n    // Retain `returnFocus` behavior for root nodes\n    if (preventTabbing && !root) {\n      return;\n    }\n    var floating = refs.floating.current;\n    var doc = getDocument(floating);\n    var returnFocusValue = returnFocus;\n    var preventReturnFocusScroll = false;\n    var previouslyFocusedElement = activeElement(doc);\n    if (previouslyFocusedElement === doc.body && refs.domReference.current) {\n      previouslyFocusedElement = refs.domReference.current;\n    }\n    if (!preventTabbing) {\n      if (typeof initialFocus === 'number') {\n        var _getTabbableElements$;\n        focus((_getTabbableElements$ = getTabbableElements()[initialFocus]) != null ? _getTabbableElements$ : floating);\n      } else if (isHTMLElement(initialFocus == null ? void 0 : initialFocus.current)) {\n        var _initialFocus$current;\n        focus((_initialFocus$current = initialFocus.current) != null ? _initialFocus$current : floating);\n      }\n    } // Dismissing via outside `pointerdown` should always ignore `returnFocus`\n    // to prevent unwanted scrolling.\n\n    function onDismiss(allowReturnFocus) {\n      if (allowReturnFocus === void 0) {\n        allowReturnFocus = false;\n      }\n      if (typeof allowReturnFocus === 'object') {\n        returnFocusValue = true;\n        preventReturnFocusScroll = allowReturnFocus.preventScroll;\n      } else {\n        returnFocusValue = allowReturnFocus;\n      }\n    }\n    events.on('dismiss', onDismiss);\n    return function () {\n      events.off('dismiss', onDismiss);\n      if (returnFocusValue && isHTMLElement(previouslyFocusedElement)) {\n        focus(previouslyFocusedElement, preventReturnFocusScroll);\n      }\n    };\n  }, [preventTabbing, getTabbableElements, initialFocus, returnFocus, refs, events, root]);\n  var isTypeableCombobox = function isTypeableCombobox() {\n    var _refs$domReference$cu;\n    return ((_refs$domReference$cu = refs.domReference.current) == null ? void 0 : _refs$domReference$cu.getAttribute('role')) === 'combobox' && isTypeableElement(refs.domReference.current);\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, modal && /*#__PURE__*/React.createElement(FocusGuard, {\n    onFocus: function onFocus(event) {\n      if (isTypeableCombobox()) {\n        return;\n      }\n      stopEvent(event);\n      var els = getTabbableElements();\n      if (order[0] === 'reference') {\n        focus(els[0]);\n      } else {\n        focus(els[els.length - 1]);\n      }\n    }\n  }), /*#__PURE__*/React.cloneElement(children, order.includes('floating') ? {\n    tabIndex: 0\n  } : {}), modal && endGuard && /*#__PURE__*/React.createElement(FocusGuard, {\n    onFocus: function onFocus(event) {\n      if (isTypeableCombobox()) {\n        return;\n      }\n      stopEvent(event);\n      focus(getTabbableElements()[0]);\n    }\n  }));\n}\nfunction usePrevious(value) {\n  var ref = useRef();\n  index(function () {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\nfunction getDelay(value, prop, pointerType) {\n  if (pointerType && pointerType !== 'mouse') {\n    return 0;\n  }\n  if (typeof value === 'number') {\n    return value;\n  }\n  return value == null ? void 0 : value[prop];\n}\n\n/**\n * Adds hover event listeners that change the open state, like CSS :hover.\n * @see https://floating-ui.com/docs/useHover\n */\nvar useHover = function useHover(context, _temp) {\n  var _ref14 = _temp === void 0 ? {} : _temp,\n    _ref14$enabled = _ref14.enabled,\n    enabled = _ref14$enabled === void 0 ? true : _ref14$enabled,\n    _ref14$delay = _ref14.delay,\n    delay = _ref14$delay === void 0 ? 0 : _ref14$delay,\n    _ref14$handleClose = _ref14.handleClose,\n    handleClose = _ref14$handleClose === void 0 ? null : _ref14$handleClose,\n    _ref14$mouseOnly = _ref14.mouseOnly,\n    mouseOnly = _ref14$mouseOnly === void 0 ? false : _ref14$mouseOnly,\n    _ref14$restMs = _ref14.restMs,\n    restMs = _ref14$restMs === void 0 ? 0 : _ref14$restMs;\n  var open = context.open,\n    onOpenChange = context.onOpenChange,\n    dataRef = context.dataRef,\n    events = context.events,\n    refs = context.refs;\n  var tree = useFloatingTree();\n  var parentId = useFloatingParentNodeId();\n  var onOpenChangeRef = useLatestRef(onOpenChange);\n  var handleCloseRef = useLatestRef(handleClose);\n  var previousOpen = usePrevious(open);\n  var pointerTypeRef = React.useRef();\n  var timeoutRef = React.useRef();\n  var handlerRef = React.useRef();\n  var restTimeoutRef = React.useRef();\n  var blockMouseMoveRef = React.useRef(true);\n  var performedPointerEventsMutationRef = React.useRef(false);\n  var isHoverOpen = React.useCallback(function () {\n    var _dataRef$current$open;\n    var type = (_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type;\n    return (type == null ? void 0 : type.includes('mouse')) && type !== 'mousedown';\n  }, [dataRef]);\n  React.useEffect(function () {\n    if (!enabled) {\n      return;\n    }\n    function onDismiss() {\n      clearTimeout(timeoutRef.current);\n      clearTimeout(restTimeoutRef.current);\n      blockMouseMoveRef.current = true;\n    }\n    events.on('dismiss', onDismiss);\n    return function () {\n      events.off('dismiss', onDismiss);\n    };\n  }, [enabled, events, refs]);\n  React.useEffect(function () {\n    if (!enabled || !handleCloseRef.current) {\n      return;\n    }\n    function onLeave() {\n      if (isHoverOpen()) {\n        onOpenChangeRef.current(false);\n      }\n    }\n    var html = getDocument(refs.floating.current).documentElement;\n    html.addEventListener('mouseleave', onLeave);\n    return function () {\n      html.removeEventListener('mouseleave', onLeave);\n    };\n  }, [refs, onOpenChangeRef, enabled, handleCloseRef, dataRef, isHoverOpen]);\n  var closeWithDelay = React.useCallback(function (runElseBranch) {\n    if (runElseBranch === void 0) {\n      runElseBranch = true;\n    }\n    var closeDelay = getDelay(delay, 'close', pointerTypeRef.current);\n    if (closeDelay && !handlerRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = setTimeout(function () {\n        return onOpenChangeRef.current(false);\n      }, closeDelay);\n    } else if (runElseBranch) {\n      clearTimeout(timeoutRef.current);\n      onOpenChangeRef.current(false);\n    }\n  }, [delay, onOpenChangeRef]);\n  var cleanupPointerMoveHandler = React.useCallback(function () {\n    if (handlerRef.current) {\n      getDocument(refs.floating.current).removeEventListener('pointermove', handlerRef.current);\n      handlerRef.current = undefined;\n    }\n  }, [refs]);\n  var clearPointerEvents = React.useCallback(function () {\n    getDocument(refs.floating.current).body.style.pointerEvents = '';\n    performedPointerEventsMutationRef.current = false;\n  }, [refs]); // Registering the mouse events on the reference directly to bypass React's\n  // delegation system. If the cursor was on a disabled element and then entered\n  // the reference (no gap), `mouseenter` doesn't fire in the delegation system.\n\n  React.useEffect(function () {\n    if (!enabled) {\n      return;\n    }\n    function isClickLikeOpenEvent() {\n      return dataRef.current.openEvent ? ['click', 'mousedown'].includes(dataRef.current.openEvent.type) : false;\n    }\n    function onMouseEnter(event) {\n      clearTimeout(timeoutRef.current);\n      blockMouseMoveRef.current = false;\n      if (open || mouseOnly && pointerTypeRef.current !== 'mouse' || restMs > 0 && getDelay(delay, 'open') === 0) {\n        return;\n      }\n      dataRef.current.openEvent = event;\n      var openDelay = getDelay(delay, 'open', pointerTypeRef.current);\n      if (openDelay) {\n        timeoutRef.current = setTimeout(function () {\n          onOpenChangeRef.current(true);\n        }, openDelay);\n      } else {\n        onOpenChangeRef.current(true);\n      }\n    }\n    function onMouseLeave(event) {\n      if (isClickLikeOpenEvent()) {\n        return;\n      }\n      var doc = getDocument(refs.floating.current);\n      clearTimeout(restTimeoutRef.current);\n      if (handleCloseRef.current) {\n        clearTimeout(timeoutRef.current);\n        handlerRef.current && doc.removeEventListener('pointermove', handlerRef.current);\n        handlerRef.current = handleCloseRef.current(_objectSpread({}, context, {\n          tree: tree,\n          x: event.clientX,\n          y: event.clientY,\n          onClose: function onClose() {\n            clearPointerEvents();\n            cleanupPointerMoveHandler();\n            closeWithDelay();\n          }\n        }));\n        doc.addEventListener('pointermove', handlerRef.current);\n        return;\n      }\n      closeWithDelay();\n    } // Ensure the floating element closes after scrolling even if the pointer\n    // did not move.\n    // https://github.com/floating-ui/floating-ui/discussions/1692\n\n    function onScrollMouseLeave(event) {\n      if (isClickLikeOpenEvent()) {\n        return;\n      }\n      handleCloseRef.current == null ? void 0 : handleCloseRef.current(_objectSpread({}, context, {\n        tree: tree,\n        x: event.clientX,\n        y: event.clientY,\n        leave: true,\n        onClose: function onClose() {\n          clearPointerEvents();\n          cleanupPointerMoveHandler();\n          closeWithDelay();\n        }\n      }))(event);\n    }\n    var floating = refs.floating.current;\n    var reference = refs.domReference.current;\n    if (isElement(reference)) {\n      open && reference.addEventListener('mouseleave', onScrollMouseLeave);\n      floating == null ? void 0 : floating.addEventListener('mouseleave', onScrollMouseLeave);\n      reference.addEventListener('mousemove', onMouseEnter, {\n        once: true\n      });\n      reference.addEventListener('mouseenter', onMouseEnter);\n      reference.addEventListener('mouseleave', onMouseLeave);\n      return function () {\n        open && reference.removeEventListener('mouseleave', onScrollMouseLeave);\n        floating == null ? void 0 : floating.removeEventListener('mouseleave', onScrollMouseLeave);\n        reference.removeEventListener('mousemove', onMouseEnter);\n        reference.removeEventListener('mouseenter', onMouseEnter);\n        reference.removeEventListener('mouseleave', onMouseLeave);\n      };\n    }\n  }, [enabled, closeWithDelay, context, delay, handleCloseRef, dataRef, mouseOnly, onOpenChangeRef, open, tree, restMs, cleanupPointerMoveHandler, clearPointerEvents, refs]); // Block pointer-events of every element other than the reference and floating\n  // while the floating element is open and has a `handleClose` handler. Also\n  // handles nested floating elements.\n  // https://github.com/floating-ui/floating-ui/issues/1722\n\n  index(function () {\n    if (!enabled) {\n      return;\n    }\n    if (open && handleCloseRef.current && isHoverOpen()) {\n      getDocument(refs.floating.current).body.style.pointerEvents = 'none';\n      performedPointerEventsMutationRef.current = true;\n      var reference = refs.domReference.current;\n      var floating = refs.floating.current;\n      if (isElement(reference) && floating) {\n        var _tree$nodesRef$curren, _tree$nodesRef$curren2;\n        var parentFloating = tree == null ? void 0 : (_tree$nodesRef$curren = tree.nodesRef.current.find(function (node) {\n          return node.id === parentId;\n        })) == null ? void 0 : (_tree$nodesRef$curren2 = _tree$nodesRef$curren.context) == null ? void 0 : _tree$nodesRef$curren2.refs.floating.current;\n        if (parentFloating) {\n          parentFloating.style.pointerEvents = '';\n        }\n        reference.style.pointerEvents = 'auto';\n        floating.style.pointerEvents = 'auto';\n        return function () {\n          reference.style.pointerEvents = '';\n          floating.style.pointerEvents = '';\n        };\n      }\n    }\n  }, [enabled, open, parentId, refs, tree, handleCloseRef, dataRef, isHoverOpen]);\n  index(function () {\n    if (previousOpen && !open) {\n      pointerTypeRef.current = undefined;\n      cleanupPointerMoveHandler();\n      clearPointerEvents();\n    }\n  });\n  React.useEffect(function () {\n    return function () {\n      cleanupPointerMoveHandler();\n      clearTimeout(timeoutRef.current);\n      clearTimeout(restTimeoutRef.current);\n      if (performedPointerEventsMutationRef.current) {\n        clearPointerEvents();\n      }\n    };\n  }, [enabled, cleanupPointerMoveHandler, clearPointerEvents]);\n  if (!enabled) {\n    return {};\n  }\n  function setPointerRef(event) {\n    pointerTypeRef.current = event.pointerType;\n  }\n  return {\n    reference: {\n      onPointerDown: setPointerRef,\n      onPointerEnter: setPointerRef,\n      onMouseMove: function onMouseMove() {\n        if (open || restMs === 0) {\n          return;\n        }\n        clearTimeout(restTimeoutRef.current);\n        restTimeoutRef.current = setTimeout(function () {\n          if (!blockMouseMoveRef.current) {\n            onOpenChange(true);\n          }\n        }, restMs);\n      }\n    },\n    floating: {\n      onMouseEnter: function onMouseEnter() {\n        clearTimeout(timeoutRef.current);\n      },\n      onMouseLeave: function onMouseLeave() {\n        closeWithDelay(false);\n      }\n    }\n  };\n};\nvar FloatingDelayGroupContext = /*#__PURE__*/React.createContext({\n  delay: 1000,\n  initialDelay: 1000,\n  currentId: null,\n  setCurrentId: function setCurrentId() {},\n  setState: function setState() {}\n});\nvar useDelayGroupContext = function useDelayGroupContext() {\n  return React.useContext(FloatingDelayGroupContext);\n};\n/**\n * Provides context for a group of floating elements that should share a\n * `delay`.\n * @see https://floating-ui.com/docs/FloatingDelayGroup\n */\n\nvar FloatingDelayGroup = function FloatingDelayGroup(_ref) {\n  var children = _ref.children,\n    delay = _ref.delay;\n  var _React$useState5 = React.useState({\n      delay: delay,\n      initialDelay: delay,\n      currentId: null\n    }),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    state = _React$useState6[0],\n    setState = _React$useState6[1];\n  var setCurrentId = React.useCallback(function (currentId) {\n    setState(function (state) {\n      return _objectSpread({}, state, {\n        currentId: currentId\n      });\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(FloatingDelayGroupContext.Provider, {\n    value: React.useMemo(function () {\n      return _objectSpread({}, state, {\n        setState: setState,\n        setCurrentId: setCurrentId\n      });\n    }, [state, setState, setCurrentId])\n  }, children);\n};\nvar useDelayGroup = function useDelayGroup(_ref2, _ref3) {\n  var open = _ref2.open,\n    onOpenChange = _ref2.onOpenChange;\n  var id = _ref3.id;\n  var _useDelayGroupContext = useDelayGroupContext(),\n    currentId = _useDelayGroupContext.currentId,\n    initialDelay = _useDelayGroupContext.initialDelay,\n    setState = _useDelayGroupContext.setState;\n  var onOpenChangeRef = useLatestRef(onOpenChange);\n  React.useEffect(function () {\n    if (currentId && onOpenChangeRef.current) {\n      setState(function (state) {\n        return _objectSpread({}, state, {\n          delay: {\n            open: 1,\n            close: getDelay(initialDelay, 'close')\n          }\n        });\n      });\n      if (currentId !== id) {\n        onOpenChangeRef.current(false);\n      }\n    }\n  }, [id, onOpenChangeRef, setState, currentId, initialDelay]);\n  React.useEffect(function () {\n    if (!open && currentId === id && onOpenChangeRef.current) {\n      onOpenChangeRef.current(false);\n      setState(function (state) {\n        return _objectSpread({}, state, {\n          delay: initialDelay,\n          currentId: null\n        });\n      });\n    }\n  }, [open, setState, currentId, id, onOpenChangeRef, initialDelay]);\n};\nfunction getArgsWithCustomFloatingHeight(args, prop) {\n  return _objectSpread({}, args, {\n    rects: _objectSpread({}, args.rects, {\n      floating: _objectSpread({}, args.rects.floating, {\n        height: args.elements.floating[prop]\n      })\n    })\n  });\n}\nvar inner = function inner(options) {\n  return {\n    name: 'inner',\n    options: options,\n    fn: function () {\n      var _fn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(middlewareArguments) {\n        var listRef, overflowRef, onFallbackChange, _options$offset, innerOffset, _options$index, index, _options$minItemsVisi, minItemsVisible, _options$referenceOve, referenceOverflowThreshold, detectOverflowOptions, rects, floating, item, nextArgs, overflow, refOverflow, diffY, nextY, maxHeight;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                listRef = options.listRef, overflowRef = options.overflowRef, onFallbackChange = options.onFallbackChange, _options$offset = options.offset, innerOffset = _options$offset === void 0 ? 0 : _options$offset, _options$index = options.index, index = _options$index === void 0 ? 0 : _options$index, _options$minItemsVisi = options.minItemsVisible, minItemsVisible = _options$minItemsVisi === void 0 ? 4 : _options$minItemsVisi, _options$referenceOve = options.referenceOverflowThreshold, referenceOverflowThreshold = _options$referenceOve === void 0 ? 0 : _options$referenceOve, detectOverflowOptions = _objectWithoutProperties(options, [\"listRef\", \"overflowRef\", \"onFallbackChange\", \"offset\", \"index\", \"minItemsVisible\", \"referenceOverflowThreshold\"]);\n                rects = middlewareArguments.rects, floating = middlewareArguments.elements.floating;\n                item = listRef.current[index];\n                if (process.env.NODE_ENV !== \"production\") {\n                  if (!middlewareArguments.placement.startsWith('bottom')) {\n                    console.warn(['Floating UI: `placement` side must be \"bottom\" when using the', '`inner` middleware.'].join(' '));\n                  }\n                }\n                if (item) {\n                  _context.next = 6;\n                  break;\n                }\n                return _context.abrupt(\"return\", {});\n              case 6:\n                _context.t0 = _objectSpread;\n                _context.t1 = {};\n                _context.t2 = middlewareArguments;\n                _context.next = 11;\n                return offset(-item.offsetTop - rects.reference.height / 2 - item.offsetHeight / 2 - innerOffset).fn(middlewareArguments);\n              case 11:\n                _context.t3 = _context.sent;\n                nextArgs = (0, _context.t0)(_context.t1, _context.t2, _context.t3);\n                _context.next = 15;\n                return detectOverflow(getArgsWithCustomFloatingHeight(nextArgs, 'scrollHeight'), detectOverflowOptions);\n              case 15:\n                overflow = _context.sent;\n                _context.next = 18;\n                return detectOverflow(nextArgs, _objectSpread({}, detectOverflowOptions, {\n                  elementContext: 'reference'\n                }));\n              case 18:\n                refOverflow = _context.sent;\n                diffY = Math.max(0, overflow.top);\n                nextY = nextArgs.y + diffY;\n                maxHeight = Math.max(0, floating.scrollHeight - diffY - Math.max(0, overflow.bottom));\n                floating.style.maxHeight = maxHeight + \"px\";\n                floating.scrollTop = diffY; // There is not enough space, fallback to standard anchored positioning\n\n                if (onFallbackChange) {\n                  if (floating.offsetHeight < item.offsetHeight * Math.min(minItemsVisible, listRef.current.length - 1) - 1 || refOverflow.top >= -referenceOverflowThreshold || refOverflow.bottom >= -referenceOverflowThreshold) {\n                    flushSync(function () {\n                      return onFallbackChange(true);\n                    });\n                  } else {\n                    flushSync(function () {\n                      return onFallbackChange(false);\n                    });\n                  }\n                }\n                if (!overflowRef) {\n                  _context.next = 29;\n                  break;\n                }\n                _context.next = 28;\n                return detectOverflow(getArgsWithCustomFloatingHeight(_objectSpread({}, nextArgs, {\n                  y: nextY\n                }), 'offsetHeight'), detectOverflowOptions);\n              case 28:\n                overflowRef.current = _context.sent;\n              case 29:\n                return _context.abrupt(\"return\", {\n                  y: nextY\n                });\n              case 30:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      function fn(_x) {\n        return _fn.apply(this, arguments);\n      }\n      return fn;\n    }()\n  };\n};\nvar useInnerOffset = function useInnerOffset(_ref, _ref2) {\n  var open = _ref.open,\n    refs = _ref.refs;\n  var _ref2$enabled = _ref2.enabled,\n    enabled = _ref2$enabled === void 0 ? true : _ref2$enabled,\n    overflowRef = _ref2.overflowRef,\n    onChange = _ref2.onChange;\n  var onChangeRef = useLatestRef(onChange);\n  var controlledScrollingRef = React.useRef(false);\n  var prevScrollTopRef = React.useRef(null);\n  var initialOverflowRef = React.useRef(null);\n  React.useEffect(function () {\n    if (!enabled) {\n      return;\n    }\n    function onWheel(e) {\n      if (e.ctrlKey || !el || overflowRef.current == null) {\n        return;\n      }\n      var dY = e.deltaY;\n      var isAtTop = overflowRef.current.top >= -0.5;\n      var isAtBottom = overflowRef.current.bottom >= -0.5;\n      var remainingScroll = el.scrollHeight - el.clientHeight;\n      var sign = dY < 0 ? -1 : 1;\n      var method = dY < 0 ? 'max' : 'min';\n      if (el.scrollHeight <= el.clientHeight) {\n        return;\n      }\n      if (!isAtTop && dY > 0 || !isAtBottom && dY < 0) {\n        e.preventDefault();\n        flushSync(function () {\n          onChangeRef.current(function (d) {\n            return d + Math[method](dY, remainingScroll * sign);\n          });\n        });\n      } else if (/firefox/i.test(getUserAgent())) {\n        // Needed to propagate scrolling during momentum scrolling phase once\n        // it gets limited by the boundary. UX improvement, not critical.\n        el.scrollTop += dY;\n      }\n    }\n    var el = refs.floating.current;\n    if (open && el) {\n      el.addEventListener('wheel', onWheel); // Wait for the position to be ready.\n\n      requestAnimationFrame(function () {\n        prevScrollTopRef.current = el.scrollTop;\n        if (overflowRef.current != null) {\n          initialOverflowRef.current = _objectSpread({}, overflowRef.current);\n        }\n      });\n      return function () {\n        prevScrollTopRef.current = null;\n        initialOverflowRef.current = null;\n        el.removeEventListener('wheel', onWheel);\n      };\n    }\n  }, [enabled, open, refs, overflowRef, onChangeRef]);\n  if (!enabled) {\n    return {};\n  }\n  return {\n    floating: {\n      onKeyDown: function onKeyDown() {\n        controlledScrollingRef.current = true;\n      },\n      onWheel: function onWheel() {\n        controlledScrollingRef.current = false;\n      },\n      onPointerMove: function onPointerMove() {\n        controlledScrollingRef.current = false;\n      },\n      onScroll: function onScroll() {\n        var el = refs.floating.current;\n        if (!overflowRef.current || !el || !controlledScrollingRef.current) {\n          return;\n        }\n        if (prevScrollTopRef.current !== null) {\n          var scrollDiff = el.scrollTop - prevScrollTopRef.current;\n          if (overflowRef.current.bottom < -0.5 && scrollDiff < -1 || overflowRef.current.top < -0.5 && scrollDiff > 1) {\n            flushSync(function () {\n              return onChange(function (d) {\n                return d + scrollDiff;\n              });\n            });\n          }\n        } // [Firefox] Wait for the height change to have been applied.\n\n        requestAnimationFrame(function () {\n          prevScrollTopRef.current = el.scrollTop;\n        });\n      }\n    }\n  };\n};\n\n/**\n * Adds relevant screen reader props for a given element `role`.\n * @see https://floating-ui.com/docs/useRole\n */\nvar useRole = function useRole(_ref, _temp) {\n  var open = _ref.open;\n  var _ref15 = _temp === void 0 ? {} : _temp,\n    _ref15$enabled = _ref15.enabled,\n    enabled = _ref15$enabled === void 0 ? true : _ref15$enabled,\n    _ref15$role = _ref15.role,\n    role = _ref15$role === void 0 ? 'dialog' : _ref15$role;\n  var rootId = useId();\n  var referenceId = useId();\n  var floatingProps = {\n    id: rootId,\n    role: role\n  };\n  if (!enabled) {\n    return {};\n  }\n  if (role === 'tooltip') {\n    return {\n      reference: {\n        'aria-describedby': open ? rootId : undefined\n      },\n      floating: floatingProps\n    };\n  }\n  return {\n    reference: _objectSpread({\n      'aria-expanded': open ? 'true' : 'false',\n      'aria-haspopup': role,\n      'aria-controls': open ? rootId : undefined\n    }, role === 'listbox' && {\n      role: 'combobox'\n    }, role === 'menu' && {\n      id: referenceId\n    }),\n    floating: _objectSpread({}, floatingProps, role === 'menu' && {\n      'aria-labelledby': referenceId\n    })\n  };\n};\n\n/**\n * Adds click event listeners that change the open state.\n * @see https://floating-ui.com/docs/useClick\n */\nvar useClick = function useClick(_ref, _temp) {\n  var open = _ref.open,\n    onOpenChange = _ref.onOpenChange,\n    dataRef = _ref.dataRef,\n    refs = _ref.refs;\n  var _ref16 = _temp === void 0 ? {} : _temp,\n    _ref16$enabled = _ref16.enabled,\n    enabled = _ref16$enabled === void 0 ? true : _ref16$enabled,\n    _ref16$pointerDown = _ref16.pointerDown,\n    pointerDown = _ref16$pointerDown === void 0 ? false : _ref16$pointerDown,\n    _ref16$toggle = _ref16.toggle,\n    toggle = _ref16$toggle === void 0 ? true : _ref16$toggle,\n    _ref16$ignoreMouse = _ref16.ignoreMouse,\n    ignoreMouse = _ref16$ignoreMouse === void 0 ? false : _ref16$ignoreMouse;\n  var pointerTypeRef = React.useRef();\n  function isButton() {\n    var _refs$domReference$cu;\n    return ((_refs$domReference$cu = refs.domReference.current) == null ? void 0 : _refs$domReference$cu.tagName) === 'BUTTON';\n  }\n  function isSpaceIgnored() {\n    return isTypeableElement(refs.domReference.current);\n  }\n  if (!enabled) {\n    return {};\n  }\n  return {\n    reference: {\n      onPointerDown: function onPointerDown(event) {\n        pointerTypeRef.current = event.pointerType;\n      },\n      onMouseDown: function onMouseDown(event) {\n        // Ignore all buttons except for the \"main\" button.\n        // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\n        if (event.button !== 0) {\n          return;\n        }\n        if (pointerTypeRef.current === 'mouse' && ignoreMouse) {\n          return;\n        }\n        if (!pointerDown) {\n          return;\n        }\n        if (open) {\n          if (toggle && (dataRef.current.openEvent ? dataRef.current.openEvent.type === 'mousedown' : true)) {\n            onOpenChange(false);\n          }\n        } else {\n          onOpenChange(true);\n        }\n        dataRef.current.openEvent = event.nativeEvent;\n      },\n      onClick: function onClick(event) {\n        if (pointerDown && pointerTypeRef.current) {\n          pointerTypeRef.current = undefined;\n          return;\n        }\n        if (pointerTypeRef.current === 'mouse' && ignoreMouse) {\n          return;\n        }\n        if (open) {\n          if (toggle && (dataRef.current.openEvent ? dataRef.current.openEvent.type === 'click' : true)) {\n            onOpenChange(false);\n          }\n        } else {\n          onOpenChange(true);\n        }\n        dataRef.current.openEvent = event.nativeEvent;\n      },\n      onKeyDown: function onKeyDown(event) {\n        pointerTypeRef.current = undefined;\n        if (isButton()) {\n          return;\n        }\n        if (event.key === ' ' && !isSpaceIgnored()) {\n          // Prvent scrolling\n          event.preventDefault();\n        }\n        if (event.key === 'Enter') {\n          if (open) {\n            if (toggle) {\n              onOpenChange(false);\n            }\n          } else {\n            onOpenChange(true);\n          }\n        }\n      },\n      onKeyUp: function onKeyUp(event) {\n        if (isButton() || isSpaceIgnored()) {\n          return;\n        }\n        if (event.key === ' ') {\n          if (open) {\n            if (toggle) {\n              onOpenChange(false);\n            }\n          } else {\n            onOpenChange(true);\n          }\n        }\n      }\n    }\n  };\n};\n\n/**\n * Check whether the event.target is within the provided node. Uses event.composedPath if available for custom element support.\n *\n * @param event The event whose target/composedPath to check\n * @param node The node to check against\n * @returns Whether the event.target/composedPath is within the node.\n */\nfunction isEventTargetWithin(event, node) {\n  if (node == null) {\n    return false;\n  }\n  if ('composedPath' in event) {\n    return event.composedPath().includes(node);\n  } // TS thinks `event` is of type never as it assumes all browsers support composedPath, but browsers without shadow dom don't\n\n  var e = event;\n  return e.target != null && node.contains(e.target);\n}\n\n/**\n * Adds listeners that dismiss (close) the floating element.\n * @see https://floating-ui.com/docs/useDismiss\n */\nvar useDismiss = function useDismiss(_ref, _temp) {\n  var open = _ref.open,\n    onOpenChange = _ref.onOpenChange,\n    refs = _ref.refs,\n    events = _ref.events,\n    nodeId = _ref.nodeId;\n  var _ref17 = _temp === void 0 ? {} : _temp,\n    _ref17$enabled = _ref17.enabled,\n    enabled = _ref17$enabled === void 0 ? true : _ref17$enabled,\n    _ref17$escapeKey = _ref17.escapeKey,\n    escapeKey = _ref17$escapeKey === void 0 ? true : _ref17$escapeKey,\n    _ref17$outsidePointer = _ref17.outsidePointerDown,\n    outsidePointerDown = _ref17$outsidePointer === void 0 ? true : _ref17$outsidePointer,\n    _ref17$referencePoint = _ref17.referencePointerDown,\n    referencePointerDown = _ref17$referencePoint === void 0 ? false : _ref17$referencePoint,\n    _ref17$ancestorScroll = _ref17.ancestorScroll,\n    ancestorScroll = _ref17$ancestorScroll === void 0 ? false : _ref17$ancestorScroll,\n    _ref17$bubbles = _ref17.bubbles,\n    bubbles = _ref17$bubbles === void 0 ? true : _ref17$bubbles;\n  var tree = useFloatingTree();\n  var onOpenChangeRef = useLatestRef(onOpenChange);\n  var nested = useFloatingParentNodeId() != null;\n  React.useEffect(function () {\n    if (!open || !enabled) {\n      return;\n    }\n    function onKeyDown(event) {\n      if (event.key === 'Escape') {\n        if (!bubbles && tree && getChildren(tree.nodesRef.current, nodeId).length > 0) {\n          return;\n        }\n        events.emit('dismiss', {\n          preventScroll: false\n        });\n        onOpenChangeRef.current(false);\n      }\n    }\n    function onPointerDown(event) {\n      var targetIsInsideChildren = tree && getChildren(tree.nodesRef.current, nodeId).some(function (node) {\n        var _node$context;\n        return isEventTargetWithin(event, (_node$context = node.context) == null ? void 0 : _node$context.refs.floating.current);\n      });\n      if (isEventTargetWithin(event, refs.floating.current) || isEventTargetWithin(event, refs.domReference.current) || targetIsInsideChildren) {\n        return;\n      }\n      if (!bubbles && tree && getChildren(tree.nodesRef.current, nodeId).length > 0) {\n        return;\n      }\n      events.emit('dismiss', nested ? {\n        preventScroll: true\n      } : false);\n      onOpenChangeRef.current(false);\n    }\n    function onScroll() {\n      onOpenChangeRef.current(false);\n    }\n    var doc = getDocument(refs.floating.current);\n    escapeKey && doc.addEventListener('keydown', onKeyDown);\n    outsidePointerDown && doc.addEventListener('pointerdown', onPointerDown);\n    var ancestors = (ancestorScroll ? [].concat(_toConsumableArray(isElement(refs.reference.current) ? getOverflowAncestors(refs.reference.current) : []), _toConsumableArray(isElement(refs.floating.current) ? getOverflowAncestors(refs.floating.current) : [])) : []).filter(function (ancestor) {\n      var _doc$defaultView;\n      return (\n        // Ignore the visual viewport for scrolling dismissal (allow pinch-zoom)\n        ancestor !== ((_doc$defaultView = doc.defaultView) == null ? void 0 : _doc$defaultView.visualViewport)\n      );\n    });\n    ancestors.forEach(function (ancestor) {\n      return ancestor.addEventListener('scroll', onScroll, {\n        passive: true\n      });\n    });\n    return function () {\n      escapeKey && doc.removeEventListener('keydown', onKeyDown);\n      outsidePointerDown && doc.removeEventListener('pointerdown', onPointerDown);\n      ancestors.forEach(function (ancestor) {\n        return ancestor.removeEventListener('scroll', onScroll);\n      });\n    };\n  }, [escapeKey, outsidePointerDown, events, tree, nodeId, open, onOpenChangeRef, ancestorScroll, enabled, bubbles, refs, nested]);\n  if (!enabled) {\n    return {};\n  }\n  return {\n    reference: {\n      onPointerDown: function onPointerDown() {\n        if (referencePointerDown) {\n          events.emit('dismiss');\n          onOpenChange(false);\n        }\n      }\n    }\n  };\n};\n\n/**\n * Adds focus event listeners that change the open state, like CSS :focus.\n * @see https://floating-ui.com/docs/useFocus\n */\nvar useFocus = function useFocus(_ref, _temp) {\n  var open = _ref.open,\n    onOpenChange = _ref.onOpenChange,\n    dataRef = _ref.dataRef,\n    refs = _ref.refs,\n    events = _ref.events;\n  var _ref18 = _temp === void 0 ? {} : _temp,\n    _ref18$enabled = _ref18.enabled,\n    enabled = _ref18$enabled === void 0 ? true : _ref18$enabled,\n    _ref18$keyboardOnly = _ref18.keyboardOnly,\n    keyboardOnly = _ref18$keyboardOnly === void 0 ? true : _ref18$keyboardOnly;\n  var pointerTypeRef = React.useRef('');\n  var blockFocusRef = React.useRef(false);\n  React.useEffect(function () {\n    var _doc$defaultView;\n    if (!enabled) {\n      return;\n    }\n    var doc = getDocument(refs.floating.current);\n    var win = (_doc$defaultView = doc.defaultView) != null ? _doc$defaultView : window;\n    function onBlur() {\n      if (pointerTypeRef.current && refs.domReference.current === activeElement(doc)) {\n        blockFocusRef.current = !open;\n      }\n    }\n    function onFocus() {\n      setTimeout(function () {\n        blockFocusRef.current = false;\n        pointerTypeRef.current = '';\n      });\n    }\n    win.addEventListener('focus', onFocus);\n    win.addEventListener('blur', onBlur);\n    return function () {\n      win.removeEventListener('focus', onFocus);\n      win.removeEventListener('blur', onBlur);\n    };\n  }, [refs, open, enabled]);\n  React.useEffect(function () {\n    if (!enabled) {\n      return;\n    }\n    function onDismiss() {\n      blockFocusRef.current = true;\n    }\n    events.on('dismiss', onDismiss);\n    return function () {\n      events.off('dismiss', onDismiss);\n    };\n  }, [events, enabled]);\n  if (!enabled) {\n    return {};\n  }\n  return {\n    reference: {\n      onPointerDown: function onPointerDown(_ref2) {\n        var pointerType = _ref2.pointerType;\n        pointerTypeRef.current = pointerType;\n        blockFocusRef.current = !!(pointerType && keyboardOnly);\n      },\n      onFocus: function onFocus(event) {\n        var _dataRef$current$open, _refs$domReference$cu, _dataRef$current$open2;\n        if (blockFocusRef.current) {\n          return;\n        } // Dismiss with click should ignore the subsequent `focus` trigger, but\n        // only if the click originated inside the reference element.\n\n        if (event.type === 'focus' && ((_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type) === 'mousedown' && (_refs$domReference$cu = refs.domReference.current) != null && _refs$domReference$cu.contains((_dataRef$current$open2 = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open2.target)) {\n          return;\n        }\n        dataRef.current.openEvent = event.nativeEvent;\n        onOpenChange(true);\n      },\n      onBlur: function onBlur(event) {\n        var _refs$floating$curren, _refs$domReference$cu2;\n        var target = event.relatedTarget; // When focusing the reference element (e.g. regular click), then\n        // clicking into the floating element, prevent it from hiding.\n        // Note: it must be focusable, e.g. `tabindex=\"-1\"`.\n\n        if ((_refs$floating$curren = refs.floating.current) != null && _refs$floating$curren.contains(target) || (_refs$domReference$cu2 = refs.domReference.current) != null && _refs$domReference$cu2.contains(target)) {\n          return;\n        }\n        blockFocusRef.current = false;\n        onOpenChange(false);\n      }\n    }\n  };\n};\nvar ARROW_UP = 'ArrowUp';\nvar ARROW_DOWN = 'ArrowDown';\nvar ARROW_LEFT = 'ArrowLeft';\nvar ARROW_RIGHT = 'ArrowRight';\nfunction isIndexOutOfBounds(listRef, index) {\n  return index < 0 || index >= listRef.current.length;\n}\nfunction findNonDisabledIndex(listRef, _temp) {\n  var _ref19 = _temp === void 0 ? {} : _temp,\n    _ref19$startingIndex = _ref19.startingIndex,\n    startingIndex = _ref19$startingIndex === void 0 ? -1 : _ref19$startingIndex,\n    _ref19$decrement = _ref19.decrement,\n    decrement = _ref19$decrement === void 0 ? false : _ref19$decrement,\n    disabledIndices = _ref19.disabledIndices;\n  var list = listRef.current;\n  var index = startingIndex;\n  do {\n    var _list$index, _list$index2;\n    index = index + (decrement ? -1 : 1);\n  } while (index >= 0 && index <= list.length - 1 && (disabledIndices ? disabledIndices.includes(index) : list[index] == null || ((_list$index = list[index]) == null ? void 0 : _list$index.hasAttribute('disabled')) || ((_list$index2 = list[index]) == null ? void 0 : _list$index2.getAttribute('aria-disabled')) === 'true'));\n  return index;\n}\nfunction doSwitch(orientation, vertical, horizontal) {\n  switch (orientation) {\n    case 'vertical':\n      return vertical;\n    case 'horizontal':\n      return horizontal;\n    default:\n      return vertical || horizontal;\n  }\n}\nfunction isMainOrientationKey(key, orientation) {\n  var vertical = key === ARROW_UP || key === ARROW_DOWN;\n  var horizontal = key === ARROW_LEFT || key === ARROW_RIGHT;\n  return doSwitch(orientation, vertical, horizontal);\n}\nfunction isMainOrientationToEndKey(key, orientation, rtl) {\n  var vertical = key === ARROW_DOWN;\n  var horizontal = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;\n  return doSwitch(orientation, vertical, horizontal) || key === 'Enter' || key == ' ' || key === '';\n}\nfunction isCrossOrientationOpenKey(key, orientation, rtl) {\n  var vertical = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;\n  var horizontal = key === ARROW_DOWN;\n  return doSwitch(orientation, vertical, horizontal);\n}\nfunction isCrossOrientationCloseKey(key, orientation, rtl) {\n  var vertical = rtl ? key === ARROW_RIGHT : key === ARROW_LEFT;\n  var horizontal = key === ARROW_UP;\n  return doSwitch(orientation, vertical, horizontal);\n}\nfunction getMinIndex(listRef, disabledIndices) {\n  return findNonDisabledIndex(listRef, {\n    disabledIndices: disabledIndices\n  });\n}\nfunction getMaxIndex(listRef, disabledIndices) {\n  return findNonDisabledIndex(listRef, {\n    decrement: true,\n    startingIndex: listRef.current.length,\n    disabledIndices: disabledIndices\n  });\n}\n\n/**\n * Adds focus-managed indexed navigation via arrow keys to a list of items\n * within the floating element.\n * @see https://floating-ui.com/docs/useListNavigation\n */\nvar useListNavigation = function useListNavigation(_ref, _temp2) {\n  var open = _ref.open,\n    onOpenChange = _ref.onOpenChange,\n    refs = _ref.refs;\n  var _ref20 = _temp2 === void 0 ? {\n      listRef: {\n        current: []\n      },\n      activeIndex: null,\n      onNavigate: function onNavigate() {}\n    } : _temp2,\n    listRef = _ref20.listRef,\n    activeIndex = _ref20.activeIndex,\n    onNavigate = _ref20.onNavigate,\n    _ref20$enabled = _ref20.enabled,\n    enabled = _ref20$enabled === void 0 ? true : _ref20$enabled,\n    _ref20$selectedIndex = _ref20.selectedIndex,\n    selectedIndex = _ref20$selectedIndex === void 0 ? null : _ref20$selectedIndex,\n    _ref20$allowEscape = _ref20.allowEscape,\n    allowEscape = _ref20$allowEscape === void 0 ? false : _ref20$allowEscape,\n    _ref20$loop = _ref20.loop,\n    loop = _ref20$loop === void 0 ? false : _ref20$loop,\n    _ref20$nested = _ref20.nested,\n    nested = _ref20$nested === void 0 ? false : _ref20$nested,\n    _ref20$rtl = _ref20.rtl,\n    rtl = _ref20$rtl === void 0 ? false : _ref20$rtl,\n    _ref20$virtual = _ref20.virtual,\n    virtual = _ref20$virtual === void 0 ? false : _ref20$virtual,\n    _ref20$focusItemOnOpe = _ref20.focusItemOnOpen,\n    focusItemOnOpen = _ref20$focusItemOnOpe === void 0 ? 'auto' : _ref20$focusItemOnOpe,\n    _ref20$focusItemOnHov = _ref20.focusItemOnHover,\n    focusItemOnHover = _ref20$focusItemOnHov === void 0 ? true : _ref20$focusItemOnHov,\n    _ref20$openOnArrowKey = _ref20.openOnArrowKeyDown,\n    openOnArrowKeyDown = _ref20$openOnArrowKey === void 0 ? true : _ref20$openOnArrowKey,\n    _ref20$disabledIndice = _ref20.disabledIndices,\n    disabledIndices = _ref20$disabledIndice === void 0 ? openOnArrowKeyDown ? undefined : [] : _ref20$disabledIndice,\n    _ref20$orientation = _ref20.orientation,\n    orientation = _ref20$orientation === void 0 ? 'vertical' : _ref20$orientation;\n  if (process.env.NODE_ENV !== \"production\") {\n    if (allowEscape) {\n      if (!loop) {\n        console.warn(['Floating UI: `useListNavigation` looping must be enabled to allow', 'escaping.'].join(' '));\n      }\n      if (!virtual) {\n        console.warn(['Floating UI: `useListNavigation` must be virtual to allow', 'escaping.'].join(' '));\n      }\n    }\n  }\n  var parentId = useFloatingParentNodeId();\n  var tree = useFloatingTree();\n  var previousOpen = usePrevious(open);\n  var focusItemOnOpenRef = React.useRef(focusItemOnOpen);\n  var indexRef = React.useRef(selectedIndex != null ? selectedIndex : -1);\n  var keyRef = React.useRef(null);\n  var previousOnNavigateRef = useLatestRef(usePrevious(onNavigate));\n  var onNavigateRef = useLatestRef(onNavigate);\n  var disabledIndicesRef = useLatestRef(disabledIndices);\n  var blockPointerLeaveRef = React.useRef(false);\n  var frameRef = React.useRef(-1);\n  var _React$useState7 = React.useState(),\n    _React$useState8 = _slicedToArray(_React$useState7, 2),\n    activeId = _React$useState8[0],\n    setActiveId = _React$useState8[1];\n  var focusItem = React.useCallback(function (listRef, indexRef) {\n    // `pointerDown` clicks occur before `focus`, so the button will steal the\n    // focus unless we wait a frame.\n    frameRef.current = requestAnimationFrame(function () {\n      if (virtual) {\n        var _listRef$current$inde;\n        setActiveId((_listRef$current$inde = listRef.current[indexRef.current]) == null ? void 0 : _listRef$current$inde.id);\n      } else {\n        var _listRef$current$inde2;\n        (_listRef$current$inde2 = listRef.current[indexRef.current]) == null ? void 0 : _listRef$current$inde2.focus({\n          preventScroll: true\n        });\n      }\n    });\n  }, [virtual]); // Sync `selectedIndex` to be the `activeIndex` upon opening the floating\n  // element. Also, reset `activeIndex` upon closing the floating element.\n\n  index(function () {\n    if (!enabled) {\n      return;\n    }\n    if (!previousOpen && open && focusItemOnOpenRef.current && selectedIndex != null) {\n      onNavigateRef.current(selectedIndex);\n    } // Unset `activeIndex`. Since the user can specify `onNavigate`\n    // conditionally (onNavigate: open ? setActiveIndex : setSelectedIndex)\n    // we store and call the previous function\n\n    if (previousOpen && !open) {\n      cancelAnimationFrame(frameRef.current);\n      indexRef.current = -1;\n      previousOnNavigateRef.current == null ? void 0 : previousOnNavigateRef.current(null);\n    }\n  }, [open, previousOpen, selectedIndex, listRef, onNavigateRef, previousOnNavigateRef, focusItem, enabled]); // Sync `activeIndex` to be the focused item while the floating element is\n  // open.\n\n  index(function () {\n    if (!enabled) {\n      return;\n    }\n    if (open) {\n      if (activeIndex == null) {\n        if (selectedIndex != null) {\n          return;\n        } // Reset while the floating element was open (e.g. the list changed).\n\n        if (previousOpen) {\n          indexRef.current = -1;\n          focusItem(listRef, indexRef);\n        } // Initial sync\n\n        if (!previousOpen && focusItemOnOpenRef.current && (keyRef.current != null || focusItemOnOpenRef.current === true && keyRef.current == null)) {\n          indexRef.current = keyRef.current == null || isMainOrientationToEndKey(keyRef.current, orientation, rtl) || nested ? getMinIndex(listRef, disabledIndicesRef.current) : getMaxIndex(listRef, disabledIndicesRef.current);\n          onNavigateRef.current(indexRef.current);\n          focusItem(listRef, indexRef);\n        }\n      } else if (!isIndexOutOfBounds(listRef, activeIndex)) {\n        indexRef.current = activeIndex;\n        focusItem(listRef, indexRef);\n      }\n    }\n  }, [open, previousOpen, activeIndex, selectedIndex, nested, listRef, onNavigateRef, focusItem, enabled, allowEscape, orientation, rtl, virtual, disabledIndicesRef]); // Ensure the parent floating element has focus when a nested child closes\n  // to allow arrow key navigation to work after the pointer leaves the child.\n\n  index(function () {\n    if (!enabled) {\n      return;\n    }\n    if (!open && previousOpen) {\n      var _tree$nodesRef$curren, _tree$nodesRef$curren2;\n      var parentFloating = tree == null ? void 0 : (_tree$nodesRef$curren = tree.nodesRef.current.find(function (node) {\n        return node.id === parentId;\n      })) == null ? void 0 : (_tree$nodesRef$curren2 = _tree$nodesRef$curren.context) == null ? void 0 : _tree$nodesRef$curren2.refs.floating.current;\n      if (parentFloating && !parentFloating.contains(activeElement(getDocument(parentFloating)))) {\n        parentFloating.focus({\n          preventScroll: true\n        });\n      }\n    }\n  }, [enabled, open, previousOpen, tree, parentId]);\n  index(function () {\n    keyRef.current = null;\n  });\n  function _onKeyDown(event) {\n    blockPointerLeaveRef.current = true;\n    if (nested && isCrossOrientationCloseKey(event.key, orientation, rtl)) {\n      stopEvent(event);\n      onOpenChange(false);\n      if (isHTMLElement(refs.domReference.current)) {\n        refs.domReference.current.focus();\n      }\n      return;\n    }\n    var currentIndex = indexRef.current;\n    var minIndex = getMinIndex(listRef, disabledIndices);\n    var maxIndex = getMaxIndex(listRef, disabledIndices);\n    if (event.key === 'Home') {\n      indexRef.current = minIndex;\n      onNavigate(indexRef.current);\n    }\n    if (event.key === 'End') {\n      indexRef.current = maxIndex;\n      onNavigate(indexRef.current);\n    }\n    if (isMainOrientationKey(event.key, orientation)) {\n      stopEvent(event); // Reset the index if no item is focused.\n\n      if (open && !virtual && activeElement(event.currentTarget.ownerDocument) === event.currentTarget) {\n        indexRef.current = isMainOrientationToEndKey(event.key, orientation, rtl) ? minIndex : maxIndex;\n        onNavigate(indexRef.current);\n        return;\n      }\n      if (isMainOrientationToEndKey(event.key, orientation, rtl)) {\n        if (loop) {\n          indexRef.current = currentIndex >= maxIndex ? allowEscape && currentIndex !== listRef.current.length ? -1 : minIndex : findNonDisabledIndex(listRef, {\n            startingIndex: currentIndex,\n            disabledIndices: disabledIndices\n          });\n        } else {\n          indexRef.current = Math.min(maxIndex, findNonDisabledIndex(listRef, {\n            startingIndex: currentIndex,\n            disabledIndices: disabledIndices\n          }));\n        }\n      } else {\n        if (loop) {\n          indexRef.current = currentIndex <= minIndex ? allowEscape && currentIndex !== -1 ? listRef.current.length : maxIndex : findNonDisabledIndex(listRef, {\n            startingIndex: currentIndex,\n            decrement: true,\n            disabledIndices: disabledIndices\n          });\n        } else {\n          indexRef.current = Math.max(minIndex, findNonDisabledIndex(listRef, {\n            startingIndex: currentIndex,\n            decrement: true,\n            disabledIndices: disabledIndices\n          }));\n        }\n      }\n      if (isIndexOutOfBounds(listRef, indexRef.current)) {\n        onNavigate(null);\n      } else {\n        onNavigate(indexRef.current);\n      }\n    }\n  }\n  if (!enabled) {\n    return {};\n  }\n  return {\n    reference: _objectSpread({}, virtual && open && activeIndex != null && {\n      'aria-activedescendant': activeId\n    }, {\n      onKeyDown: function onKeyDown(event) {\n        blockPointerLeaveRef.current = true;\n        if (virtual && open) {\n          return _onKeyDown(event);\n        }\n        var isNavigationKey = event.key.indexOf('Arrow') === 0 || event.key === 'Enter' || event.key === ' ' || event.key === '';\n        if (isNavigationKey) {\n          keyRef.current = event.key;\n        }\n        if (nested) {\n          if (isCrossOrientationOpenKey(event.key, orientation, rtl)) {\n            stopEvent(event);\n            if (open) {\n              indexRef.current = getMinIndex(listRef, disabledIndices);\n              onNavigate(indexRef.current);\n            } else {\n              onOpenChange(true);\n            }\n          }\n          return;\n        }\n        if (isMainOrientationKey(event.key, orientation)) {\n          if (selectedIndex != null) {\n            indexRef.current = selectedIndex;\n          }\n          stopEvent(event);\n          if (!open && openOnArrowKeyDown) {\n            onOpenChange(true);\n          } else {\n            _onKeyDown(event);\n          }\n          if (open) {\n            onNavigate(indexRef.current);\n          }\n        }\n      }\n    }),\n    floating: _objectSpread({\n      'aria-orientation': orientation === 'both' ? undefined : orientation\n    }, virtual && activeIndex != null && {\n      'aria-activedescendant': activeId\n    }, {\n      onKeyDown: _onKeyDown,\n      onPointerMove: function onPointerMove() {\n        blockPointerLeaveRef.current = false;\n      }\n    }),\n    item: _objectSpread({\n      onFocus: function onFocus(_ref2) {\n        var currentTarget = _ref2.currentTarget;\n        var index = listRef.current.indexOf(currentTarget);\n        if (index !== -1) {\n          onNavigate(index);\n        }\n      },\n      onClick: function onClick(_ref3) {\n        var currentTarget = _ref3.currentTarget;\n        return currentTarget.focus({\n          preventScroll: true\n        });\n      }\n    }, focusItemOnHover && {\n      onMouseMove: function onMouseMove(_ref4) {\n        var currentTarget = _ref4.currentTarget;\n        var target = currentTarget;\n        if (target) {\n          var _index = listRef.current.indexOf(target);\n          if (_index !== -1) {\n            onNavigate(_index);\n          }\n        }\n      },\n      onPointerLeave: function onPointerLeave() {\n        if (!blockPointerLeaveRef.current) {\n          indexRef.current = -1;\n          focusItem(listRef, indexRef);\n          onNavigateRef.current(null);\n          if (!virtual) {\n            var _refs$floating$curren;\n            (_refs$floating$curren = refs.floating.current) == null ? void 0 : _refs$floating$curren.focus({\n              preventScroll: true\n            });\n          }\n        }\n      }\n    })\n  };\n};\n\n/**\n * Provides a matching callback that can be used to focus an item as the user\n * types, often used in tandem with `useListNavigation()`.\n * @see https://floating-ui.com/docs/useTypeahead\n */\nvar useTypeahead = function useTypeahead(_ref, _temp) {\n  var _ref2;\n  var open = _ref.open,\n    dataRef = _ref.dataRef;\n  var _ref21 = _temp === void 0 ? {\n      listRef: {\n        current: []\n      },\n      activeIndex: null\n    } : _temp,\n    listRef = _ref21.listRef,\n    activeIndex = _ref21.activeIndex,\n    _ref21$onMatch = _ref21.onMatch,\n    onMatch = _ref21$onMatch === void 0 ? function () {} : _ref21$onMatch,\n    _ref21$enabled = _ref21.enabled,\n    enabled = _ref21$enabled === void 0 ? true : _ref21$enabled,\n    _ref21$findMatch = _ref21.findMatch,\n    findMatch = _ref21$findMatch === void 0 ? null : _ref21$findMatch,\n    _ref21$resetMs = _ref21.resetMs,\n    resetMs = _ref21$resetMs === void 0 ? 1000 : _ref21$resetMs,\n    _ref21$ignoreKeys = _ref21.ignoreKeys,\n    ignoreKeys = _ref21$ignoreKeys === void 0 ? [] : _ref21$ignoreKeys,\n    _ref21$selectedIndex = _ref21.selectedIndex,\n    selectedIndex = _ref21$selectedIndex === void 0 ? null : _ref21$selectedIndex;\n  var timeoutIdRef = React.useRef();\n  var stringRef = React.useRef('');\n  var prevIndexRef = React.useRef((_ref2 = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref2 : -1);\n  var matchIndexRef = React.useRef(null);\n  index(function () {\n    if (open) {\n      clearTimeout(timeoutIdRef.current);\n      matchIndexRef.current = null;\n      stringRef.current = '';\n    }\n  }, [open]);\n  index(function () {\n    // Sync arrow key navigation but not typeahead navigation\n    if (open && stringRef.current === '') {\n      var _ref3;\n      prevIndexRef.current = (_ref3 = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref3 : -1;\n    }\n  }, [open, selectedIndex, activeIndex]);\n  function onKeyDown(event) {\n    if (!event.currentTarget.contains(activeElement(getDocument(event.currentTarget)))) {\n      return;\n    }\n    if (stringRef.current.length > 0 && stringRef.current[0] !== ' ') {\n      dataRef.current.typing = true;\n      if (event.key === ' ') {\n        stopEvent(event);\n      }\n    }\n    var listContent = listRef.current;\n    if (listContent == null || ['Home', 'End', 'Escape', 'Enter', 'Tab', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].concat(_toConsumableArray(ignoreKeys)).includes(event.key)) {\n      return;\n    } // Bail out if the list contains a word like \"llama\" or \"aaron\". TODO:\n    // allow it in this case, too.\n\n    var allowRapidSuccessionOfFirstLetter = listContent.every(function (text) {\n      var _text$, _text$2;\n      return text ? ((_text$ = text[0]) == null ? void 0 : _text$.toLocaleLowerCase()) !== ((_text$2 = text[1]) == null ? void 0 : _text$2.toLocaleLowerCase()) : true;\n    }); // Allows the user to cycle through items that start with the same letter\n    // in rapid succession\n\n    if (allowRapidSuccessionOfFirstLetter && stringRef.current === event.key) {\n      stringRef.current = '';\n      prevIndexRef.current = matchIndexRef.current;\n    }\n    stringRef.current += event.key;\n    clearTimeout(timeoutIdRef.current);\n    timeoutIdRef.current = setTimeout(function () {\n      stringRef.current = '';\n      prevIndexRef.current = matchIndexRef.current;\n      dataRef.current.typing = false;\n    }, resetMs);\n    var prevIndex = prevIndexRef.current;\n    var orderedList = [].concat(_toConsumableArray(listContent.slice((prevIndex != null ? prevIndex : 0) + 1)), _toConsumableArray(listContent.slice(0, (prevIndex != null ? prevIndex : 0) + 1)));\n    var str = findMatch ? findMatch(orderedList, stringRef.current) : orderedList.find(function (text) {\n      return (text == null ? void 0 : text.toLocaleLowerCase().indexOf(stringRef.current)) === 0;\n    });\n    var index = str ? listContent.indexOf(str) : -1;\n    if (index !== -1) {\n      onMatch(index);\n      matchIndexRef.current = index;\n    }\n  }\n  if (!enabled) {\n    return {};\n  }\n  return {\n    reference: {\n      onKeyDown: onKeyDown\n    },\n    floating: {\n      onKeyDown: onKeyDown\n    }\n  };\n};\nexport { FloatingDelayGroup, FloatingFocusManager, FloatingNode, FloatingOverlay, FloatingPortal, FloatingTree, inner, safePolygon, useClick, useDelayGroup, useDelayGroupContext, useDismiss, useFloating, useFloatingNodeId, useFloatingParentNodeId, useFloatingPortalNode, useFloatingTree, useFocus, useHover, useId, useInnerOffset, useInteractions, useListNavigation, useRole, useTypeahead };","map":null,"metadata":{},"sourceType":"module"}