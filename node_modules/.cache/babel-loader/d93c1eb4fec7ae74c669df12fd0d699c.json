{"ast":null,"code":"import _toConsumableArray from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n// src/extend-theme.ts\nimport { theme, isChakraTheme } from \"@chakra-ui/theme\";\nimport mergeWith from \"lodash.mergewith\";\nfunction isFunction(value) {\n  return typeof value === \"function\";\n}\nfunction pipe() {\n  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n  return function (v) {\n    return fns.reduce(function (a, b) {\n      return b(a);\n    }, v);\n  };\n}\nfunction extendTheme() {\n  for (var _len2 = arguments.length, extensions = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    extensions[_key2] = arguments[_key2];\n  }\n  var overrides = [].concat(extensions);\n  var baseTheme = extensions[extensions.length - 1];\n  if (isChakraTheme(baseTheme) && overrides.length > 1) {\n    overrides = overrides.slice(0, overrides.length - 1);\n  } else {\n    baseTheme = theme;\n  }\n  return pipe.apply(void 0, _toConsumableArray(overrides.map(function (extension) {\n    return function (prevTheme) {\n      return isFunction(extension) ? extension(prevTheme) : mergeThemeOverride(prevTheme, extension);\n    };\n  })))(baseTheme);\n}\nfunction mergeThemeOverride() {\n  for (var _len3 = arguments.length, overrides = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    overrides[_key3] = arguments[_key3];\n  }\n  return mergeWith.apply(void 0, [{}].concat(overrides, [mergeThemeCustomizer]));\n}\nfunction mergeThemeCustomizer(source, override, key, object) {\n  if ((isFunction(source) || isFunction(override)) && Object.prototype.hasOwnProperty.call(object, key)) {\n    return function () {\n      var sourceValue = isFunction(source) ? source.apply(void 0, arguments) : source;\n      var overrideValue = isFunction(override) ? override.apply(void 0, arguments) : override;\n      return mergeWith({}, sourceValue, overrideValue, mergeThemeCustomizer);\n    };\n  }\n  return void 0;\n}\n\n// ../shared-utils/src/index.ts\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type === \"object\" || type === \"function\") && !Array.isArray(value);\n}\n\n// src/theme-extensions/with-default-color-scheme.ts\nfunction withDefaultColorScheme(_ref) {\n  var colorScheme = _ref.colorScheme,\n    components = _ref.components;\n  return function (theme2) {\n    var names = Object.keys(theme2.components || {});\n    if (Array.isArray(components)) {\n      names = components;\n    } else if (isObject(components)) {\n      names = Object.keys(components);\n    }\n    return mergeThemeOverride(theme2, {\n      components: Object.fromEntries(names.map(function (componentName) {\n        var withColorScheme = {\n          defaultProps: {\n            colorScheme: colorScheme\n          }\n        };\n        return [componentName, withColorScheme];\n      }))\n    });\n  };\n}\n\n// src/theme-extensions/with-default-size.ts\nfunction withDefaultSize(_ref2) {\n  var size = _ref2.size,\n    components = _ref2.components;\n  return function (theme2) {\n    var names = Object.keys(theme2.components || {});\n    if (Array.isArray(components)) {\n      names = components;\n    } else if (isObject(components)) {\n      names = Object.keys(components);\n    }\n    return mergeThemeOverride(theme2, {\n      components: Object.fromEntries(names.map(function (componentName) {\n        var withSize = {\n          defaultProps: {\n            size: size\n          }\n        };\n        return [componentName, withSize];\n      }))\n    });\n  };\n}\n\n// src/theme-extensions/with-default-variant.ts\nfunction withDefaultVariant(_ref3) {\n  var variant = _ref3.variant,\n    components = _ref3.components;\n  return function (theme2) {\n    var names = Object.keys(theme2.components || {});\n    if (Array.isArray(components)) {\n      names = components;\n    } else if (isObject(components)) {\n      names = Object.keys(components);\n    }\n    return mergeThemeOverride(theme2, {\n      components: Object.fromEntries(names.map(function (componentName) {\n        var withVariant = {\n          defaultProps: {\n            variant: variant\n          }\n        };\n        return [componentName, withVariant];\n      }))\n    });\n  };\n}\n\n// src/theme-extensions/with-default-props.ts\nfunction pipe2() {\n  for (var _len4 = arguments.length, fns = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    fns[_key4] = arguments[_key4];\n  }\n  return function (v) {\n    return fns.reduce(function (a, b) {\n      return b(a);\n    }, v);\n  };\n}\nfunction withDefaultProps(_ref4) {\n  var _ref4$defaultProps = _ref4.defaultProps,\n    colorScheme = _ref4$defaultProps.colorScheme,\n    variant = _ref4$defaultProps.variant,\n    size = _ref4$defaultProps.size,\n    components = _ref4.components;\n  var identity = function identity(t) {\n    return t;\n  };\n  var fns = [colorScheme ? withDefaultColorScheme({\n    colorScheme: colorScheme,\n    components: components\n  }) : identity, size ? withDefaultSize({\n    size: size,\n    components: components\n  }) : identity, variant ? withDefaultVariant({\n    variant: variant,\n    components: components\n  }) : identity];\n  return function (theme2) {\n    return mergeThemeOverride(pipe2.apply(void 0, fns)(theme2));\n  };\n}\nexport { extendTheme, mergeThemeOverride, withDefaultColorScheme, withDefaultProps, withDefaultSize, withDefaultVariant };","map":null,"metadata":{},"sourceType":"module"}