{"ast":null,"code":"var _classCallCheck = require(\"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nmodule.exports = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function Ripple() {\n    _classCallCheck(this, Ripple);\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n  }\n  _createClass(Ripple, [{\n    key: \"findFurthestPoint\",\n    value: function findFurthestPoint(clickPointX, elementWidth, offsetX, clickPointY, elementHeight, offsetY) {\n      this.x = clickPointX - offsetX > elementWidth / 2 ? 0 : elementWidth;\n      this.y = clickPointY - offsetY > elementHeight / 2 ? 0 : elementHeight;\n      this.z = Math.hypot(this.x - (clickPointX - offsetX), this.y - (clickPointY - offsetY));\n      return this.z;\n    }\n  }, {\n    key: \"appyStyles\",\n    value: function appyStyles(element, color, rect, radius, event) {\n      element.classList.add('ripple');\n      element.style.backgroundColor = color === 'dark' ? 'rgba(0,0,0, 0.2)' : 'rgba(255,255,255, 0.3)';\n      element.style.borderRadius = '50%';\n      element.style.pointerEvents = 'none';\n      element.style.position = 'absolute';\n      element.style.left = event.clientX - rect.left - radius + 'px';\n      element.style.top = event.clientY - rect.top - radius + 'px';\n      element.style.width = element.style.height = radius * 2 + 'px';\n    }\n  }, {\n    key: \"applyAnimation\",\n    value: function applyAnimation(element) {\n      element.animate([{\n        transform: 'scale(0)',\n        opacity: 1\n      }, {\n        transform: 'scale(1.5)',\n        opacity: 0\n      }], {\n        duration: 500,\n        easing: 'linear'\n      });\n    }\n  }, {\n    key: \"create\",\n    value: function create(event, color) {\n      var element = event.currentTarget;\n      element.style.position = 'relative';\n      element.style.overflow = 'hidden';\n      var rect = element.getBoundingClientRect();\n      var radius = this.findFurthestPoint(event.clientX, element.offsetWidth, rect.left, event.clientY, element.offsetHeight, rect.top);\n      var circle = document.createElement('span');\n      this.appyStyles(circle, color, rect, radius, event);\n      this.applyAnimation(circle);\n      element.appendChild(circle);\n      setTimeout(function () {\n        return circle.remove();\n      }, 500);\n    }\n  }]);\n  return Ripple;\n}();","map":null,"metadata":{},"sourceType":"script"}