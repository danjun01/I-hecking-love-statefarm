{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nfunction _export(target, all) {\n  for (var name in all) {\n    Object.defineProperty(target, name, {\n      enumerable: true,\n      get: all[name]\n    });\n  }\n}\n_export(exports, {\n  Popover: function Popover() {\n    return _Popover;\n  },\n  PopoverHandler: function PopoverHandler() {\n    return _popoverHandler.PopoverHandler;\n  },\n  PopoverContent: function PopoverContent() {\n    return _popoverContent.PopoverContent;\n  },\n  usePopover: function usePopover() {\n    return _popoverContext.usePopover;\n  },\n  default: function _default() {\n    return _default2;\n  }\n});\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nvar _reactDomInteractions = require(\"@floating-ui/react-dom-interactions\");\nvar _deepmerge = _interopRequireDefault(require(\"deepmerge\"));\nvar _theme = require(\"../../context/theme\");\nvar _popoverContext = require(\"./PopoverContext\");\nvar _popover = require(\"../../types/components/popover\");\nvar _popoverHandler = require(\"./PopoverHandler\");\nvar _popoverContent = require(\"./PopoverContent\");\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nvar _Popover = function _Popover(param) {\n  var open = param.open,\n    handler = param.handler,\n    placement = param.placement,\n    offset = param.offset,\n    dismiss = param.dismiss,\n    animate = param.animate,\n    children = param.children;\n  var popover = (0, _theme.useTheme)().popover;\n  var defaultProps = popover.defaultProps;\n  var ref = _slicedToArray(_react.default.useState(false), 2),\n    internalOpen = ref[0],\n    setInternalOpen = ref[1];\n  open = open !== null && open !== void 0 ? open : internalOpen;\n  handler = handler !== null && handler !== void 0 ? handler : setInternalOpen;\n  placement = placement !== null && placement !== void 0 ? placement : defaultProps.placement;\n  offset = offset !== null && offset !== void 0 ? offset : defaultProps.offset;\n  dismiss = dismiss !== null && dismiss !== void 0 ? dismiss : defaultProps.dismiss;\n  animate = animate !== null && animate !== void 0 ? animate : defaultProps.animate;\n  var animation = {\n    unmount: {\n      opacity: 0\n    },\n    mount: {\n      opacity: 1\n    }\n  };\n  var appliedAnimation = (0, _deepmerge.default)(animation, animate);\n  var ref1 = (0, _reactDomInteractions.useFloating)({\n      open: open,\n      onOpenChange: handler,\n      middleware: [(0, _reactDomInteractions.offset)(offset), (0, _reactDomInteractions.flip)(), (0, _reactDomInteractions.shift)()],\n      placement: placement\n    }),\n    x = ref1.x,\n    y = ref1.y,\n    reference = ref1.reference,\n    floating = ref1.floating,\n    strategy = ref1.strategy,\n    refs = ref1.refs,\n    update = ref1.update,\n    context = ref1.context;\n  var id = (0, _reactDomInteractions.useId)();\n  var labelId = \"\".concat(id, \"-label\");\n  var descriptionId = \"\".concat(id, \"-description\");\n  var ref2 = (0, _reactDomInteractions.useInteractions)([(0, _reactDomInteractions.useClick)(context), (0, _reactDomInteractions.useRole)(context), (0, _reactDomInteractions.useDismiss)(context, dismiss)]),\n    getReferenceProps = ref2.getReferenceProps,\n    getFloatingProps = ref2.getFloatingProps;\n  _react.default.useEffect(function () {\n    if (refs.reference.current && refs.floating.current && open) {\n      return (0, _reactDomInteractions.autoUpdate)(refs.reference.current, refs.floating.current, update);\n    }\n  }, [open, update, refs.reference, refs.floating]);\n  var contextValue = _react.default.useMemo(function () {\n    return {\n      open: open,\n      strategy: strategy,\n      x: x,\n      y: y,\n      context: context,\n      reference: reference,\n      floating: floating,\n      getReferenceProps: getReferenceProps,\n      getFloatingProps: getFloatingProps,\n      appliedAnimation: appliedAnimation,\n      labelId: labelId,\n      descriptionId: descriptionId\n    };\n  }, [open, strategy, x, y, context, reference, floating, getFloatingProps, getReferenceProps, appliedAnimation, labelId, descriptionId]);\n  return _react.default.createElement(_popoverContext.PopoverContextProvider, {\n    value: contextValue\n  }, children);\n};\n_Popover.propTypes = {\n  open: _popover.propTypesOpen,\n  handler: _popover.propTypesHandler,\n  placement: _propTypes.default.oneOf(_popover.propTypesPlacement),\n  offset: _popover.propTypesOffset,\n  dismiss: _popover.propTypesDismiss,\n  animate: _popover.propTypesAnimate,\n  children: _popover.propTypesChildren\n};\n_Popover.displayName = \"MaterialTailwind.Popover\";\nvar _default2 = Object.assign(_Popover, {\n  Handler: _popoverHandler.PopoverHandler,\n  Content: _popoverContent.PopoverContent\n});","map":null,"metadata":{},"sourceType":"script"}