{"ast":null,"code":"import _slicedToArray from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n// ../../../react-shim.js\nimport React from \"react\";\n\n// src/circular-progress.tsx\nimport { chakra as chakra3, forwardRef } from \"@chakra-ui/system\";\n\n// src/progress.utils.tsx\nimport { keyframes } from \"@chakra-ui/system\";\nfunction valueToPercent(value, min, max) {\n  return (value - min) * 100 / (max - min);\n}\nvar spin = keyframes({\n  \"0%\": {\n    strokeDasharray: \"1, 400\",\n    strokeDashoffset: \"0\"\n  },\n  \"50%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-100\"\n  },\n  \"100%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-260\"\n  }\n});\nvar rotate = keyframes({\n  \"0%\": {\n    transform: \"rotate(0deg)\"\n  },\n  \"100%\": {\n    transform: \"rotate(360deg)\"\n  }\n});\nvar progress = keyframes({\n  \"0%\": {\n    left: \"-40%\"\n  },\n  \"100%\": {\n    left: \"100%\"\n  }\n});\nvar stripe = keyframes({\n  from: {\n    backgroundPosition: \"1rem 0\"\n  },\n  to: {\n    backgroundPosition: \"0 0\"\n  }\n});\nfunction getProgressProps(options) {\n  var _options$value = options.value,\n    value = _options$value === void 0 ? 0 : _options$value,\n    min = options.min,\n    max = options.max,\n    valueText = options.valueText,\n    getValueText = options.getValueText,\n    isIndeterminate = options.isIndeterminate,\n    _options$role = options.role,\n    role = _options$role === void 0 ? \"progressbar\" : _options$role;\n  var percent = valueToPercent(value, min, max);\n  var getAriaValueText = function getAriaValueText() {\n    if (value == null) return void 0;\n    return typeof getValueText === \"function\" ? getValueText(value, percent) : valueText;\n  };\n  return {\n    bind: {\n      \"data-indeterminate\": isIndeterminate ? \"\" : void 0,\n      \"aria-valuemax\": max,\n      \"aria-valuemin\": min,\n      \"aria-valuenow\": isIndeterminate ? void 0 : value,\n      \"aria-valuetext\": getAriaValueText(),\n      role: role\n    },\n    percent: percent,\n    value: value\n  };\n}\n\n// src/shape.tsx\nimport { chakra } from \"@chakra-ui/system\";\nvar Shape = function Shape(props) {\n  var size = props.size,\n    isIndeterminate = props.isIndeterminate,\n    rest = _objectWithoutProperties(props, [\"size\", \"isIndeterminate\"]);\n  return /* @__PURE__ */React.createElement(chakra.svg, _objectSpread({\n    viewBox: \"0 0 100 100\",\n    __css: {\n      width: size,\n      height: size,\n      animation: isIndeterminate ? \"\".concat(rotate, \" 2s linear infinite\") : void 0\n    }\n  }, rest));\n};\nShape.displayName = \"Shape\";\n\n// src/circle.tsx\nimport { chakra as chakra2 } from \"@chakra-ui/system\";\nvar Circle = function Circle(props) {\n  return /* @__PURE__ */React.createElement(chakra2.circle, _objectSpread({\n    cx: 50,\n    cy: 50,\n    r: 42,\n    fill: \"transparent\"\n  }, props));\n};\nCircle.displayName = \"Circle\";\n\n// src/circular-progress.tsx\nvar CircularProgress = forwardRef(function (props, ref) {\n  var _props$size = props.size,\n    size = _props$size === void 0 ? \"48px\" : _props$size,\n    _props$max = props.max,\n    max = _props$max === void 0 ? 100 : _props$max,\n    _props$min = props.min,\n    min = _props$min === void 0 ? 0 : _props$min,\n    valueText = props.valueText,\n    getValueText = props.getValueText,\n    value = props.value,\n    capIsRound = props.capIsRound,\n    children = props.children,\n    _props$thickness = props.thickness,\n    thickness = _props$thickness === void 0 ? \"10px\" : _props$thickness,\n    _props$color = props.color,\n    color = _props$color === void 0 ? \"#0078d4\" : _props$color,\n    _props$trackColor = props.trackColor,\n    trackColor = _props$trackColor === void 0 ? \"#edebe9\" : _props$trackColor,\n    isIndeterminate = props.isIndeterminate,\n    rest = _objectWithoutProperties(props, [\"size\", \"max\", \"min\", \"valueText\", \"getValueText\", \"value\", \"capIsRound\", \"children\", \"thickness\", \"color\", \"trackColor\", \"isIndeterminate\"]);\n  var progress2 = getProgressProps({\n    min: min,\n    max: max,\n    value: value,\n    valueText: valueText,\n    getValueText: getValueText,\n    isIndeterminate: isIndeterminate\n  });\n  var determinant = isIndeterminate ? void 0 : (progress2.percent ?? 0) * 2.64;\n  var strokeDasharray = determinant == null ? void 0 : \"\".concat(determinant, \" \").concat(264 - determinant);\n  var indicatorProps = isIndeterminate ? {\n    css: {\n      animation: \"\".concat(spin, \" 1.5s linear infinite\")\n    }\n  } : {\n    strokeDashoffset: 66,\n    strokeDasharray: strokeDasharray,\n    transitionProperty: \"stroke-dasharray, stroke\",\n    transitionDuration: \"0.6s\",\n    transitionTimingFunction: \"ease\"\n  };\n  var rootStyles = {\n    display: \"inline-block\",\n    position: \"relative\",\n    verticalAlign: \"middle\",\n    fontSize: size\n  };\n  return /* @__PURE__ */React.createElement(chakra3.div, _objectSpread({\n    ref: ref,\n    className: \"chakra-progress\"\n  }, progress2.bind, rest, {\n    __css: rootStyles\n  }), /* @__PURE__ */React.createElement(Shape, {\n    size: size,\n    isIndeterminate: isIndeterminate\n  }, /* @__PURE__ */React.createElement(Circle, {\n    stroke: trackColor,\n    strokeWidth: thickness,\n    className: \"chakra-progress__track\"\n  }), /* @__PURE__ */React.createElement(Circle, _objectSpread({\n    stroke: color,\n    strokeWidth: thickness,\n    className: \"chakra-progress__indicator\",\n    strokeLinecap: capIsRound ? \"round\" : void 0,\n    opacity: progress2.value === 0 && !isIndeterminate ? 0 : void 0\n  }, indicatorProps))), children);\n});\nCircularProgress.displayName = \"CircularProgress\";\n\n// src/progress.tsx\nimport { chakra as chakra4, omitThemingProps, useMultiStyleConfig, forwardRef as forwardRef2 } from \"@chakra-ui/system\";\nimport { createContext } from \"@chakra-ui/react-context\";\nvar _createContext = createContext({\n    name: \"ProgressStylesContext\",\n    errorMessage: \"useProgressStyles returned is 'undefined'. Seems you forgot to wrap the components in \\\"<Progress />\\\" \"\n  }),\n  _createContext2 = _slicedToArray(_createContext, 2),\n  ProgressStylesProvider = _createContext2[0],\n  useProgressStyles = _createContext2[1];\nvar ProgressFilledTrack = forwardRef2(function (props, ref) {\n  var min = props.min,\n    max = props.max,\n    value = props.value,\n    isIndeterminate = props.isIndeterminate,\n    role = props.role,\n    rest = _objectWithoutProperties(props, [\"min\", \"max\", \"value\", \"isIndeterminate\", \"role\"]);\n  var progress2 = getProgressProps({\n    value: value,\n    min: min,\n    max: max,\n    isIndeterminate: isIndeterminate,\n    role: role\n  });\n  var styles = useProgressStyles();\n  var trackStyles = _objectSpread({\n    height: \"100%\"\n  }, styles.filledTrack);\n  return /* @__PURE__ */React.createElement(chakra4.div, _objectSpread({\n    ref: ref,\n    style: _objectSpread({\n      width: \"\".concat(progress2.percent, \"%\")\n    }, rest.style)\n  }, progress2.bind, rest, {\n    __css: trackStyles\n  }));\n});\nvar Progress = forwardRef2(function (props, ref) {\n  var _a;\n  var _omitThemingProps = omitThemingProps(props),\n    value = _omitThemingProps.value,\n    _omitThemingProps$min = _omitThemingProps.min,\n    min = _omitThemingProps$min === void 0 ? 0 : _omitThemingProps$min,\n    _omitThemingProps$max = _omitThemingProps.max,\n    max = _omitThemingProps$max === void 0 ? 100 : _omitThemingProps$max,\n    hasStripe = _omitThemingProps.hasStripe,\n    isAnimated = _omitThemingProps.isAnimated,\n    children = _omitThemingProps.children,\n    propBorderRadius = _omitThemingProps.borderRadius,\n    isIndeterminate = _omitThemingProps.isIndeterminate,\n    ariaLabel = _omitThemingProps[\"aria-label\"],\n    ariaLabelledBy = _omitThemingProps[\"aria-labelledby\"],\n    title = _omitThemingProps.title,\n    role = _omitThemingProps.role,\n    rest = _objectWithoutProperties(_omitThemingProps, [\"value\", \"min\", \"max\", \"hasStripe\", \"isAnimated\", \"children\", \"borderRadius\", \"isIndeterminate\", \"aria-label\", \"aria-labelledby\", \"title\", \"role\"]);\n  var styles = useMultiStyleConfig(\"Progress\", props);\n  var borderRadius = propBorderRadius ?? ((_a = styles.track) == null ? void 0 : _a.borderRadius);\n  var stripeAnimation = {\n    animation: \"\".concat(stripe, \" 1s linear infinite\")\n  };\n  var shouldAddStripe = !isIndeterminate && hasStripe;\n  var shouldAnimateStripe = shouldAddStripe && isAnimated;\n  var css = _objectSpread({}, shouldAnimateStripe && stripeAnimation, isIndeterminate && {\n    position: \"absolute\",\n    willChange: \"left\",\n    minWidth: \"50%\",\n    animation: \"\".concat(progress, \" 1s ease infinite normal none running\")\n  });\n  var trackStyles = _objectSpread({\n    overflow: \"hidden\",\n    position: \"relative\"\n  }, styles.track);\n  return /* @__PURE__ */React.createElement(chakra4.div, _objectSpread({\n    ref: ref,\n    borderRadius: borderRadius,\n    __css: trackStyles\n  }, rest), /* @__PURE__ */React.createElement(ProgressStylesProvider, {\n    value: styles\n  }, /* @__PURE__ */React.createElement(ProgressFilledTrack, {\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    min: min,\n    max: max,\n    value: value,\n    isIndeterminate: isIndeterminate,\n    css: css,\n    borderRadius: borderRadius,\n    title: title,\n    role: role\n  }), children));\n});\nProgress.displayName = \"Progress\";\n\n// src/progress-label.tsx\nimport { chakra as chakra5 } from \"@chakra-ui/system\";\nvar ProgressLabel = function ProgressLabel(props) {\n  var styles = useProgressStyles();\n  var labelStyles = _objectSpread({\n    top: \"50%\",\n    left: \"50%\",\n    width: \"100%\",\n    textAlign: \"center\",\n    position: \"absolute\",\n    transform: \"translate(-50%, -50%)\"\n  }, styles.label);\n  return /* @__PURE__ */React.createElement(chakra5.div, _objectSpread({}, props, {\n    __css: labelStyles\n  }));\n};\nProgressLabel.displayName = \"ProgressLabel\";\n\n// src/circular-progress-label.tsx\nimport { chakra as chakra6 } from \"@chakra-ui/system\";\nvar CircularProgressLabel = chakra6(\"div\", {\n  baseStyle: {\n    fontSize: \"0.24em\",\n    top: \"50%\",\n    left: \"50%\",\n    width: \"100%\",\n    textAlign: \"center\",\n    position: \"absolute\",\n    transform: \"translate(-50%, -50%)\"\n  }\n});\nCircularProgressLabel.displayName = \"CircularProgressLabel\";\nexport { CircularProgress, CircularProgressLabel, Progress, ProgressLabel, useProgressStyles };","map":null,"metadata":{},"sourceType":"module"}