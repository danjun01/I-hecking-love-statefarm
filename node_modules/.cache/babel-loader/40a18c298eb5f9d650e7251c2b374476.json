{"ast":null,"code":"import _objectWithoutProperties from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n// ../../../react-shim.js\nimport React from \"react\";\n\n// src/checkbox-group.tsx\nimport { useMemo } from \"react\";\n\n// src/checkbox-context.ts\nimport { createContext } from \"@chakra-ui/react-context\";\nvar _createContext = createContext({\n    name: \"CheckboxGroupContext\",\n    strict: false\n  }),\n  _createContext2 = _slicedToArray(_createContext, 2),\n  CheckboxGroupProvider = _createContext2[0],\n  useCheckboxGroupContext = _createContext2[1]; // src/use-checkbox-group.ts\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\";\n\n// ../../utilities/shared-utils/src/index.ts\nvar cx = function cx() {\n  for (var _len = arguments.length, classNames = new Array(_len), _key = 0; _key < _len; _key++) {\n    classNames[_key] = arguments[_key];\n  }\n  return classNames.filter(Boolean).join(\" \");\n};\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type === \"object\" || type === \"function\") && !Array.isArray(value);\n}\nvar dataAttr = function dataAttr(condition) {\n  return condition ? \"\" : void 0;\n};\nfunction callAllHandlers() {\n  for (var _len2 = arguments.length, fns = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    fns[_key2] = arguments[_key2];\n  }\n  return function func(event) {\n    fns.some(function (fn) {\n      fn == null ? void 0 : fn(event);\n      return event == null ? void 0 : event.defaultPrevented;\n    });\n  };\n}\nfunction callAll() {\n  for (var _len3 = arguments.length, fns = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    fns[_key3] = arguments[_key3];\n  }\n  return function mergedFn(arg) {\n    fns.forEach(function (fn) {\n      fn == null ? void 0 : fn(arg);\n    });\n  };\n}\n\n// src/use-checkbox-group.ts\nimport { useCallback } from \"react\";\nfunction isInputEvent(value) {\n  return value && isObject(value) && isObject(value.target);\n}\nfunction useCheckboxGroup() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var defaultValue = props.defaultValue,\n    valueProp = props.value,\n    onChange = props.onChange,\n    isDisabled = props.isDisabled,\n    isNative = props.isNative;\n  var onChangeProp = useCallbackRef(onChange);\n  var _useControllableState = useControllableState({\n      value: valueProp,\n      defaultValue: defaultValue || [],\n      onChange: onChangeProp\n    }),\n    _useControllableState2 = _slicedToArray(_useControllableState, 2),\n    value = _useControllableState2[0],\n    setValue = _useControllableState2[1];\n  var handleChange = useCallback(function (eventOrValue) {\n    if (!value) return;\n    var isChecked = isInputEvent(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);\n    var selectedValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n    var nextValue = isChecked ? [].concat(_toConsumableArray(value), [selectedValue]) : value.filter(function (v) {\n      return String(v) !== String(selectedValue);\n    });\n    setValue(nextValue);\n  }, [setValue, value]);\n  var getCheckboxProps = useCallback(function () {\n    var _objectSpread2;\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var checkedKey = isNative ? \"checked\" : \"isChecked\";\n    return _objectSpread({}, props2, (_objectSpread2 = {}, _defineProperty(_objectSpread2, checkedKey, value.some(function (val) {\n      return String(props2.value) === String(val);\n    })), _defineProperty(_objectSpread2, \"onChange\", handleChange), _objectSpread2));\n  }, [handleChange, isNative, value]);\n  return {\n    value: value,\n    isDisabled: isDisabled,\n    onChange: handleChange,\n    setValue: setValue,\n    getCheckboxProps: getCheckboxProps\n  };\n}\n\n// src/checkbox-group.tsx\nfunction CheckboxGroup(props) {\n  var colorScheme = props.colorScheme,\n    size = props.size,\n    variant = props.variant,\n    children = props.children,\n    isDisabled = props.isDisabled;\n  var _useCheckboxGroup = useCheckboxGroup(props),\n    value = _useCheckboxGroup.value,\n    onChange = _useCheckboxGroup.onChange;\n  var group = useMemo(function () {\n    return {\n      size: size,\n      onChange: onChange,\n      colorScheme: colorScheme,\n      value: value,\n      variant: variant,\n      isDisabled: isDisabled\n    };\n  }, [size, onChange, colorScheme, value, variant, isDisabled]);\n  return /* @__PURE__ */React.createElement(CheckboxGroupProvider, {\n    value: group,\n    children: children\n  });\n}\nCheckboxGroup.displayName = \"CheckboxGroup\";\n\n// src/checkbox-icon.tsx\nimport { chakra } from \"@chakra-ui/system\";\nfunction CheckIcon(props) {\n  return /* @__PURE__ */React.createElement(chakra.svg, _objectSpread({\n    width: \"1.2em\",\n    viewBox: \"0 0 12 10\",\n    style: {\n      fill: \"none\",\n      strokeWidth: 2,\n      stroke: \"currentColor\",\n      strokeDasharray: 16\n    }\n  }, props), /* @__PURE__ */React.createElement(\"polyline\", {\n    points: \"1.5 6 4.5 9 10.5 1\"\n  }));\n}\nfunction IndeterminateIcon(props) {\n  return /* @__PURE__ */React.createElement(chakra.svg, _objectSpread({\n    width: \"1.2em\",\n    viewBox: \"0 0 24 24\",\n    style: {\n      stroke: \"currentColor\",\n      strokeWidth: 4\n    }\n  }, props), /* @__PURE__ */React.createElement(\"line\", {\n    x1: \"21\",\n    x2: \"3\",\n    y1: \"12\",\n    y2: \"12\"\n  }));\n}\nfunction CheckboxIcon(props) {\n  var isIndeterminate = props.isIndeterminate,\n    isChecked = props.isChecked,\n    rest = _objectWithoutProperties(props, [\"isIndeterminate\", \"isChecked\"]);\n  var BaseIcon = isIndeterminate ? IndeterminateIcon : CheckIcon;\n  return isChecked || isIndeterminate ? /* @__PURE__ */React.createElement(chakra.div, {\n    style: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      height: \"100%\"\n    }\n  }, /* @__PURE__ */React.createElement(BaseIcon, _objectSpread({}, rest))) : null;\n}\n\n// src/checkbox.tsx\nimport { chakra as chakra2, forwardRef, keyframes, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cloneElement, useMemo as useMemo2 } from \"react\";\n\n// src/use-checkbox.ts\nimport { useFormControlProps } from \"@chakra-ui/form-control\";\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\";\nimport { useCallbackRef as useCallbackRef2 } from \"@chakra-ui/react-use-callback-ref\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\n\n// ../../utilities/object-utils/src/index.ts\nfunction omit(object) {\n  var keysToOmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var clone = Object.assign({}, object);\n  var _iterator = _createForOfIteratorHelper(keysToOmit),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n      if (key in clone) delete clone[key];\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return clone;\n}\n\n// src/use-checkbox.ts\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\";\nimport { trackFocusVisible } from \"@zag-js/focus-visible\";\nimport { useCallback as useCallback2, useEffect, useRef, useState } from \"react\";\nfunction useCheckbox() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var formControlProps = useFormControlProps(props);\n  var isDisabled = formControlProps.isDisabled,\n    isReadOnly = formControlProps.isReadOnly,\n    isRequired = formControlProps.isRequired,\n    isInvalid = formControlProps.isInvalid,\n    id = formControlProps.id,\n    onBlur = formControlProps.onBlur,\n    onFocus = formControlProps.onFocus,\n    ariaDescribedBy = formControlProps[\"aria-describedby\"];\n  var defaultChecked = props.defaultChecked,\n    checkedProp = props.isChecked,\n    isFocusable = props.isFocusable,\n    onChange = props.onChange,\n    isIndeterminate = props.isIndeterminate,\n    name = props.name,\n    value = props.value,\n    _props$tabIndex = props.tabIndex,\n    tabIndex = _props$tabIndex === void 0 ? void 0 : _props$tabIndex,\n    ariaLabel = props[\"aria-label\"],\n    ariaLabelledBy = props[\"aria-labelledby\"],\n    ariaInvalid = props[\"aria-invalid\"],\n    rest = _objectWithoutProperties(props, [\"defaultChecked\", \"isChecked\", \"isFocusable\", \"onChange\", \"isIndeterminate\", \"name\", \"value\", \"tabIndex\", \"aria-label\", \"aria-labelledby\", \"aria-invalid\"]);\n  var htmlProps = omit(rest, [\"isDisabled\", \"isReadOnly\", \"isRequired\", \"isInvalid\", \"id\", \"onBlur\", \"onFocus\", \"aria-describedby\"]);\n  var onChangeProp = useCallbackRef2(onChange);\n  var onBlurProp = useCallbackRef2(onBlur);\n  var onFocusProp = useCallbackRef2(onFocus);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isFocusVisible = _useState2[0],\n    setIsFocusVisible = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isFocused = _useState4[0],\n    setFocused = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isHovered = _useState6[0],\n    setHovered = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    isActive = _useState8[0],\n    setActive = _useState8[1];\n  useEffect(function () {\n    return trackFocusVisible(setIsFocusVisible);\n  }, []);\n  var inputRef = useRef(null);\n  var _useState9 = useState(true),\n    _useState10 = _slicedToArray(_useState9, 2),\n    rootIsLabelElement = _useState10[0],\n    setRootIsLabelElement = _useState10[1];\n  var _useState11 = useState(!!defaultChecked),\n    _useState12 = _slicedToArray(_useState11, 2),\n    checkedState = _useState12[0],\n    setCheckedState = _useState12[1];\n  var isControlled = checkedProp !== void 0;\n  var isChecked = isControlled ? checkedProp : checkedState;\n  var handleChange = useCallback2(function (event) {\n    if (isReadOnly || isDisabled) {\n      event.preventDefault();\n      return;\n    }\n    if (!isControlled) {\n      if (isChecked) {\n        setCheckedState(event.target.checked);\n      } else {\n        setCheckedState(isIndeterminate ? true : event.target.checked);\n      }\n    }\n    onChangeProp == null ? void 0 : onChangeProp(event);\n  }, [isReadOnly, isDisabled, isChecked, isControlled, isIndeterminate, onChangeProp]);\n  useSafeLayoutEffect(function () {\n    if (inputRef.current) {\n      inputRef.current.indeterminate = Boolean(isIndeterminate);\n    }\n  }, [isIndeterminate]);\n  useUpdateEffect(function () {\n    if (isDisabled) {\n      setFocused(false);\n    }\n  }, [isDisabled, setFocused]);\n  useSafeLayoutEffect(function () {\n    var el = inputRef.current;\n    if (!(el == null ? void 0 : el.form)) return;\n    el.form.onreset = function () {\n      setCheckedState(!!defaultChecked);\n    };\n  }, []);\n  var trulyDisabled = isDisabled && !isFocusable;\n  var onKeyDown = useCallback2(function (event) {\n    if (event.key === \" \") {\n      setActive(true);\n    }\n  }, [setActive]);\n  var onKeyUp = useCallback2(function (event) {\n    if (event.key === \" \") {\n      setActive(false);\n    }\n  }, [setActive]);\n  useSafeLayoutEffect(function () {\n    if (!inputRef.current) return;\n    var notInSync = inputRef.current.checked !== isChecked;\n    if (notInSync) {\n      setCheckedState(inputRef.current.checked);\n    }\n  }, [inputRef.current]);\n  var getCheckboxProps = useCallback2(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var onPressDown = function onPressDown(event) {\n      if (isFocused) {\n        event.preventDefault();\n      }\n      setActive(true);\n    };\n    return _objectSpread({}, props2, {\n      ref: forwardedRef,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-focus-visible\": dataAttr(isFocused && isFocusVisible),\n      \"data-indeterminate\": dataAttr(isIndeterminate),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props2.onMouseDown, onPressDown),\n      onMouseUp: callAllHandlers(props2.onMouseUp, function () {\n        return setActive(false);\n      }),\n      onMouseEnter: callAllHandlers(props2.onMouseEnter, function () {\n        return setHovered(true);\n      }),\n      onMouseLeave: callAllHandlers(props2.onMouseLeave, function () {\n        return setHovered(false);\n      })\n    });\n  }, [isActive, isChecked, isDisabled, isFocused, isFocusVisible, isHovered, isIndeterminate, isInvalid, isReadOnly]);\n  var getRootProps = useCallback2(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread({}, htmlProps, props2, {\n      ref: mergeRefs(forwardedRef, function (node) {\n        if (!node) return;\n        setRootIsLabelElement(node.tagName === \"LABEL\");\n      }),\n      onClick: callAllHandlers(props2.onClick, function () {\n        var _a;\n        if (!rootIsLabelElement) {\n          (_a = inputRef.current) == null ? void 0 : _a.click();\n          requestAnimationFrame(function () {\n            var _a2;\n            (_a2 = inputRef.current) == null ? void 0 : _a2.focus();\n          });\n        }\n      }),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    });\n  }, [htmlProps, isDisabled, isChecked, isInvalid, rootIsLabelElement]);\n  var getInputProps = useCallback2(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread({}, props2, {\n      ref: mergeRefs(inputRef, forwardedRef),\n      type: \"checkbox\",\n      name: name,\n      value: value,\n      id: id,\n      tabIndex: tabIndex,\n      onChange: callAllHandlers(props2.onChange, handleChange),\n      onBlur: callAllHandlers(props2.onBlur, onBlurProp, function () {\n        return setFocused(false);\n      }),\n      onFocus: callAllHandlers(props2.onFocus, onFocusProp, function () {\n        return setFocused(true);\n      }),\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),\n      onKeyUp: callAllHandlers(props2.onKeyUp, onKeyUp),\n      required: isRequired,\n      checked: isChecked,\n      disabled: trulyDisabled,\n      readOnly: isReadOnly,\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-invalid\": ariaInvalid ? Boolean(ariaInvalid) : isInvalid,\n      \"aria-describedby\": ariaDescribedBy,\n      \"aria-disabled\": isDisabled,\n      style: visuallyHiddenStyle\n    });\n  }, [name, value, id, handleChange, onBlurProp, onFocusProp, onKeyDown, onKeyUp, isRequired, isChecked, trulyDisabled, isReadOnly, ariaLabel, ariaLabelledBy, ariaInvalid, isInvalid, ariaDescribedBy, isDisabled, tabIndex]);\n  var getLabelProps = useCallback2(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread({}, props2, {\n      ref: forwardedRef,\n      onMouseDown: callAllHandlers(props2.onMouseDown, stopEvent),\n      onTouchStart: callAllHandlers(props2.onTouchStart, stopEvent),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    });\n  }, [isChecked, isDisabled, isInvalid]);\n  var state = {\n    isInvalid: isInvalid,\n    isFocused: isFocused,\n    isChecked: isChecked,\n    isActive: isActive,\n    isHovered: isHovered,\n    isIndeterminate: isIndeterminate,\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    isRequired: isRequired\n  };\n  return {\n    state: state,\n    getRootProps: getRootProps,\n    getCheckboxProps: getCheckboxProps,\n    getInputProps: getInputProps,\n    getLabelProps: getLabelProps,\n    htmlProps: htmlProps\n  };\n}\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n\n// src/checkbox.tsx\nvar controlStyles = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  verticalAlign: \"top\",\n  userSelect: \"none\",\n  flexShrink: 0\n};\nvar rootStyles = {\n  cursor: \"pointer\",\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  verticalAlign: \"top\",\n  position: \"relative\"\n};\nvar checkAnim = keyframes({\n  from: {\n    opacity: 0,\n    strokeDashoffset: 16,\n    transform: \"scale(0.95)\"\n  },\n  to: {\n    opacity: 1,\n    strokeDashoffset: 0,\n    transform: \"scale(1)\"\n  }\n});\nvar indeterminateOpacityAnim = keyframes({\n  from: {\n    opacity: 0\n  },\n  to: {\n    opacity: 1\n  }\n});\nvar indeterminateScaleAnim = keyframes({\n  from: {\n    transform: \"scaleX(0.65)\"\n  },\n  to: {\n    transform: \"scaleX(1)\"\n  }\n});\nvar Checkbox = forwardRef(function Checkbox2(props, ref) {\n  var group = useCheckboxGroupContext();\n  var mergedProps = _objectSpread({}, group, props);\n  var styles = useMultiStyleConfig(\"Checkbox\", mergedProps);\n  var ownProps = omitThemingProps(props);\n  var _ownProps$spacing = ownProps.spacing,\n    spacing = _ownProps$spacing === void 0 ? \"0.5rem\" : _ownProps$spacing,\n    className = ownProps.className,\n    children = ownProps.children,\n    iconColor = ownProps.iconColor,\n    iconSize = ownProps.iconSize,\n    _ownProps$icon = ownProps.icon,\n    icon = _ownProps$icon === void 0 ? /* @__PURE__ */React.createElement(CheckboxIcon, null) : _ownProps$icon,\n    isCheckedProp = ownProps.isChecked,\n    _ownProps$isDisabled = ownProps.isDisabled,\n    isDisabled = _ownProps$isDisabled === void 0 ? group == null ? void 0 : group.isDisabled : _ownProps$isDisabled,\n    onChangeProp = ownProps.onChange,\n    inputProps = ownProps.inputProps,\n    rest = _objectWithoutProperties(ownProps, [\"spacing\", \"className\", \"children\", \"iconColor\", \"iconSize\", \"icon\", \"isChecked\", \"isDisabled\", \"onChange\", \"inputProps\"]);\n  var isChecked = isCheckedProp;\n  if ((group == null ? void 0 : group.value) && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value);\n  }\n  var onChange = onChangeProp;\n  if ((group == null ? void 0 : group.onChange) && ownProps.value) {\n    onChange = callAll(group.onChange, onChangeProp);\n  }\n  var _useCheckbox = useCheckbox(_objectSpread({}, rest, {\n      isDisabled: isDisabled,\n      isChecked: isChecked,\n      onChange: onChange\n    })),\n    state = _useCheckbox.state,\n    getInputProps = _useCheckbox.getInputProps,\n    getCheckboxProps = _useCheckbox.getCheckboxProps,\n    getLabelProps = _useCheckbox.getLabelProps,\n    getRootProps = _useCheckbox.getRootProps;\n  var iconStyles = useMemo2(function () {\n    return _objectSpread({\n      animation: state.isIndeterminate ? \"\".concat(indeterminateOpacityAnim, \" 20ms linear, \").concat(indeterminateScaleAnim, \" 200ms linear\") : \"\".concat(checkAnim, \" 200ms linear\"),\n      fontSize: iconSize,\n      color: iconColor\n    }, styles.icon);\n  }, [iconColor, iconSize,, state.isIndeterminate, styles.icon]);\n  var clonedIcon = cloneElement(icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked\n  });\n  return /* @__PURE__ */React.createElement(chakra2.label, _objectSpread({\n    __css: _objectSpread({}, rootStyles, styles.container),\n    className: cx(\"chakra-checkbox\", className)\n  }, getRootProps()), /* @__PURE__ */React.createElement(\"input\", _objectSpread({\n    className: \"chakra-checkbox__input\"\n  }, getInputProps(inputProps, ref))), /* @__PURE__ */React.createElement(chakra2.span, _objectSpread({\n    __css: _objectSpread({}, controlStyles, styles.control),\n    className: \"chakra-checkbox__control\"\n  }, getCheckboxProps()), clonedIcon), children && /* @__PURE__ */React.createElement(chakra2.span, _objectSpread({\n    className: \"chakra-checkbox__label\"\n  }, getLabelProps(), {\n    __css: _objectSpread({\n      marginStart: spacing\n    }, styles.label)\n  }), children));\n});\nCheckbox.displayName = \"Checkbox\";\nexport { Checkbox, CheckboxGroup, CheckboxIcon, useCheckbox, useCheckboxGroup };","map":null,"metadata":{},"sourceType":"module"}