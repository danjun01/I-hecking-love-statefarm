{"ast":null,"code":"import _objectSpread from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n// ../../../react-shim.js\nimport React from \"react\";\n\n// src/icon.tsx\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nvar fallbackIcon = {\n  path: /* @__PURE__ */React.createElement(\"g\", {\n    stroke: \"currentColor\",\n    strokeWidth: \"1.5\"\n  }, /* @__PURE__ */React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    fill: \"none\",\n    d: \"M9,9a3,3,0,1,1,4,2.829,1.5,1.5,0,0,0-1,1.415V14.25\"\n  }), /* @__PURE__ */React.createElement(\"path\", {\n    fill: \"currentColor\",\n    strokeLinecap: \"round\",\n    d: \"M12,17.25a.375.375,0,1,0,.375.375A.375.375,0,0,0,12,17.25h0\"\n  }), /* @__PURE__ */React.createElement(\"circle\", {\n    fill: \"none\",\n    strokeMiterlimit: \"10\",\n    cx: \"12\",\n    cy: \"12\",\n    r: \"11.25\"\n  })),\n  viewBox: \"0 0 24 24\"\n};\nvar Icon = forwardRef(function (props, ref) {\n  var element = props.as,\n    viewBox = props.viewBox,\n    _props$color = props.color,\n    color = _props$color === void 0 ? \"currentColor\" : _props$color,\n    _props$focusable = props.focusable,\n    focusable = _props$focusable === void 0 ? false : _props$focusable,\n    children = props.children,\n    className = props.className,\n    __css = props.__css,\n    rest = _objectWithoutProperties(props, [\"as\", \"viewBox\", \"color\", \"focusable\", \"children\", \"className\", \"__css\"]);\n  var _className = cx(\"chakra-icon\", className);\n  var styles = _objectSpread({\n    w: \"1em\",\n    h: \"1em\",\n    display: \"inline-block\",\n    lineHeight: \"1em\",\n    flexShrink: 0,\n    color: color\n  }, __css);\n  var shared = {\n    ref: ref,\n    focusable: focusable,\n    className: _className,\n    __css: styles\n  };\n  var _viewBox = viewBox ?? fallbackIcon.viewBox;\n  if (element && typeof element !== \"string\") {\n    return /* @__PURE__ */React.createElement(chakra.svg, _objectSpread({\n      as: element\n    }, shared, rest));\n  }\n  var _path = children ?? fallbackIcon.path;\n  return /* @__PURE__ */React.createElement(chakra.svg, _objectSpread({\n    verticalAlign: \"middle\",\n    viewBox: _viewBox\n  }, shared, rest), _path);\n});\nIcon.displayName = \"Icon\";\nvar icon_default = Icon;\n\n// src/create-icon.tsx\nimport { forwardRef as forwardRef2 } from \"@chakra-ui/system\";\nimport { Children } from \"react\";\nfunction createIcon(options) {\n  var _options$viewBox = options.viewBox,\n    viewBox = _options$viewBox === void 0 ? \"0 0 24 24\" : _options$viewBox,\n    pathDefinition = options.d,\n    displayName = options.displayName,\n    _options$defaultProps = options.defaultProps,\n    defaultProps = _options$defaultProps === void 0 ? {} : _options$defaultProps;\n  var path = Children.toArray(options.path);\n  var Comp = forwardRef2(function (props, ref) {\n    return /* @__PURE__ */React.createElement(Icon, _objectSpread({\n      ref: ref,\n      viewBox: viewBox\n    }, defaultProps, props), path.length ? path : /* @__PURE__ */React.createElement(\"path\", {\n      fill: \"currentColor\",\n      d: pathDefinition\n    }));\n  });\n  Comp.displayName = displayName;\n  return Comp;\n}\nexport { Icon, createIcon, icon_default as default };","map":null,"metadata":{},"sourceType":"module"}