{"ast":null,"code":"import _objectSpread from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _toConsumableArray from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/daniel/Documents/HackUTDIX/I-hecking-love-statefarm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// ../../../react-shim.js\nimport React from \"react\";\n\n// src/menu-button.tsx\nimport { forwardRef, chakra } from \"@chakra-ui/system\";\n\n// ../../utilities/shared-utils/src/index.ts\nvar cx = function cx() {\n  for (var _len = arguments.length, classNames = new Array(_len), _key = 0; _key < _len; _key++) {\n    classNames[_key] = arguments[_key];\n  }\n  return classNames.filter(Boolean).join(\" \");\n};\nfunction runIfFn(valueOrFn) {\n  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    args[_key2 - 1] = arguments[_key2];\n  }\n  return isFunction(valueOrFn) ? valueOrFn.apply(void 0, args) : valueOrFn;\n}\nvar isFunction = function isFunction(value) {\n  return typeof value === \"function\";\n};\nvar dataAttr = function dataAttr(condition) {\n  return condition ? \"\" : void 0;\n};\nfunction callAllHandlers() {\n  for (var _len3 = arguments.length, fns = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    fns[_key3] = arguments[_key3];\n  }\n  return function func(event) {\n    fns.some(function (fn) {\n      fn == null ? void 0 : fn(event);\n      return event == null ? void 0 : event.defaultPrevented;\n    });\n  };\n}\nfunction callAll() {\n  for (var _len4 = arguments.length, fns = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    fns[_key4] = arguments[_key4];\n  }\n  return function mergedFn(arg) {\n    fns.forEach(function (fn) {\n      fn == null ? void 0 : fn(arg);\n    });\n  };\n}\n\n// src/menu.tsx\nimport { createContext as createContext2 } from \"@chakra-ui/react-context\";\nimport { omitThemingProps, useMultiStyleConfig, useTheme } from \"@chakra-ui/system\";\nimport { useMemo as useMemo2 } from \"react\";\n\n// src/use-menu.ts\nimport { useClickable } from \"@chakra-ui/clickable\";\nimport { createDescendantContext } from \"@chakra-ui/descendant\";\nimport { useFocusOnHide } from \"@chakra-ui/react-use-focus-effect\";\nimport { usePopper } from \"@chakra-ui/popper\";\nimport { useDisclosure } from \"@chakra-ui/react-use-disclosure\";\nimport { useOutsideClick } from \"@chakra-ui/react-use-outside-click\";\nimport { useAnimationState } from \"@chakra-ui/react-use-animation-state\";\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\";\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\";\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { lazyDisclosure } from \"@chakra-ui/lazy-utils\";\nimport { cloneElement, useCallback, useRef as useRef2, useState as useState2, useId, useMemo, useEffect as useEffect2 } from \"react\";\n\n// src/use-shortcut.ts\nimport { useEffect, useRef, useState } from \"react\";\nfunction isPrintableCharacter(event) {\n  var key = event.key;\n  return key.length === 1 || key.length > 1 && /[^a-zA-Z0-9]/.test(key);\n}\nfunction useShortcut() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _props$timeout = props.timeout,\n    timeout = _props$timeout === void 0 ? 300 : _props$timeout,\n    _props$preventDefault = props.preventDefault,\n    preventDefault = _props$preventDefault === void 0 ? function () {\n      return true;\n    } : _props$preventDefault;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    keys = _useState2[0],\n    setKeys = _useState2[1];\n  var timeoutRef = useRef();\n  var flush = function flush() {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n  };\n  var clearKeysAfterDelay = function clearKeysAfterDelay() {\n    flush();\n    timeoutRef.current = setTimeout(function () {\n      setKeys([]);\n      timeoutRef.current = null;\n    }, timeout);\n  };\n  useEffect(function () {\n    return flush;\n  }, []);\n  function onKeyDown(fn) {\n    return function (event) {\n      if (event.key === \"Backspace\") {\n        var keysCopy = _toConsumableArray(keys);\n        keysCopy.pop();\n        setKeys(keysCopy);\n        return;\n      }\n      if (isPrintableCharacter(event)) {\n        var _keysCopy = keys.concat(event.key);\n        if (preventDefault(event)) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n        setKeys(_keysCopy);\n        fn(_keysCopy.join(\"\"));\n        clearKeysAfterDelay();\n      }\n    };\n  }\n  return onKeyDown;\n}\n\n// src/get-next-item-from-search.ts\nfunction getNextItemFromSearch(items, searchString, itemToString, currentItem) {\n  if (searchString == null) {\n    return currentItem;\n  }\n  if (!currentItem) {\n    var foundItem = items.find(function (item) {\n      return itemToString(item).toLowerCase().startsWith(searchString.toLowerCase());\n    });\n    return foundItem;\n  }\n  var matchingItems = items.filter(function (item) {\n    return itemToString(item).toLowerCase().startsWith(searchString.toLowerCase());\n  });\n  if (matchingItems.length > 0) {\n    var nextIndex;\n    if (matchingItems.includes(currentItem)) {\n      var currentIndex = matchingItems.indexOf(currentItem);\n      nextIndex = currentIndex + 1;\n      if (nextIndex === matchingItems.length) {\n        nextIndex = 0;\n      }\n      return matchingItems[nextIndex];\n    }\n    nextIndex = items.indexOf(matchingItems[0]);\n    return items[nextIndex];\n  }\n  return currentItem;\n}\n\n// src/use-menu.ts\nvar _createDescendantCont = createDescendantContext(),\n  _createDescendantCont2 = _slicedToArray(_createDescendantCont, 4),\n  MenuDescendantsProvider = _createDescendantCont2[0],\n  useMenuDescendantsContext = _createDescendantCont2[1],\n  useMenuDescendants = _createDescendantCont2[2],\n  useMenuDescendant = _createDescendantCont2[3];\nvar _createContext = createContext({\n    strict: false,\n    name: \"MenuContext\"\n  }),\n  _createContext2 = _slicedToArray(_createContext, 2),\n  MenuProvider = _createContext2[0],\n  useMenuContext = _createContext2[1];\nfunction useIds(idProp) {\n  for (var _len5 = arguments.length, prefixes = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n    prefixes[_key5 - 1] = arguments[_key5];\n  }\n  var reactId = useId();\n  var id = idProp || reactId;\n  return useMemo(function () {\n    return prefixes.map(function (prefix) {\n      return \"\".concat(prefix, \"-\").concat(id);\n    });\n  }, [id, prefixes]);\n}\nfunction getOwnerDocument(node) {\n  return (node == null ? void 0 : node.ownerDocument) ?? document;\n}\nfunction isActiveElement(element) {\n  var doc = getOwnerDocument(element);\n  return doc.activeElement === element;\n}\nfunction useMenu() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var id = props.id,\n    _props$closeOnSelect = props.closeOnSelect,\n    closeOnSelect = _props$closeOnSelect === void 0 ? true : _props$closeOnSelect,\n    _props$closeOnBlur = props.closeOnBlur,\n    closeOnBlur = _props$closeOnBlur === void 0 ? true : _props$closeOnBlur,\n    _props$autoSelect = props.autoSelect,\n    autoSelect = _props$autoSelect === void 0 ? true : _props$autoSelect,\n    isLazy = props.isLazy,\n    isOpenProp = props.isOpen,\n    defaultIsOpen = props.defaultIsOpen,\n    onCloseProp = props.onClose,\n    onOpenProp = props.onOpen,\n    _props$placement = props.placement,\n    placement = _props$placement === void 0 ? \"bottom-start\" : _props$placement,\n    _props$lazyBehavior = props.lazyBehavior,\n    lazyBehavior = _props$lazyBehavior === void 0 ? \"unmount\" : _props$lazyBehavior,\n    direction = props.direction,\n    _props$computePositio = props.computePositionOnMount,\n    computePositionOnMount = _props$computePositio === void 0 ? false : _props$computePositio,\n    popperProps = _objectWithoutProperties(props, [\"id\", \"closeOnSelect\", \"closeOnBlur\", \"autoSelect\", \"isLazy\", \"isOpen\", \"defaultIsOpen\", \"onClose\", \"onOpen\", \"placement\", \"lazyBehavior\", \"direction\", \"computePositionOnMount\"]);\n  var menuRef = useRef2(null);\n  var buttonRef = useRef2(null);\n  var descendants = useMenuDescendants();\n  var focusMenu = useCallback(function () {\n    requestAnimationFrame(function () {\n      var _a;\n      (_a = menuRef.current) == null ? void 0 : _a.focus({\n        preventScroll: false\n      });\n    });\n  }, []);\n  var focusFirstItem = useCallback(function () {\n    var id2 = setTimeout(function () {\n      var first = descendants.firstEnabled();\n      if (first) setFocusedIndex(first.index);\n    });\n    timeoutIds.current.add(id2);\n  }, [descendants]);\n  var focusLastItem = useCallback(function () {\n    var id2 = setTimeout(function () {\n      var last = descendants.lastEnabled();\n      if (last) setFocusedIndex(last.index);\n    });\n    timeoutIds.current.add(id2);\n  }, [descendants]);\n  var onOpenInternal = useCallback(function () {\n    onOpenProp == null ? void 0 : onOpenProp();\n    if (autoSelect) {\n      focusFirstItem();\n    } else {\n      focusMenu();\n    }\n  }, [autoSelect, focusFirstItem, focusMenu, onOpenProp]);\n  var _useDisclosure = useDisclosure({\n      isOpen: isOpenProp,\n      defaultIsOpen: defaultIsOpen,\n      onClose: onCloseProp,\n      onOpen: onOpenInternal\n    }),\n    isOpen = _useDisclosure.isOpen,\n    onOpen = _useDisclosure.onOpen,\n    onClose = _useDisclosure.onClose,\n    onToggle = _useDisclosure.onToggle;\n  useOutsideClick({\n    enabled: isOpen && closeOnBlur,\n    ref: menuRef,\n    handler: function handler(event) {\n      var _a;\n      if (!((_a = buttonRef.current) == null ? void 0 : _a.contains(event.target))) {\n        onClose();\n      }\n    }\n  });\n  var popper = usePopper(_objectSpread({}, popperProps, {\n    enabled: isOpen || computePositionOnMount,\n    placement: placement,\n    direction: direction\n  }));\n  var _useState3 = useState2(-1),\n    _useState4 = _slicedToArray(_useState3, 2),\n    focusedIndex = _useState4[0],\n    setFocusedIndex = _useState4[1];\n  useUpdateEffect(function () {\n    if (!isOpen) {\n      setFocusedIndex(-1);\n    }\n  }, [isOpen]);\n  useFocusOnHide(menuRef, {\n    focusRef: buttonRef,\n    visible: isOpen,\n    shouldFocus: true\n  });\n  var animationState = useAnimationState({\n    isOpen: isOpen,\n    ref: menuRef\n  });\n  var _useIds = useIds(id, \"menu-button\", \"menu-list\"),\n    _useIds2 = _slicedToArray(_useIds, 2),\n    buttonId = _useIds2[0],\n    menuId = _useIds2[1];\n  var openAndFocusMenu = useCallback(function () {\n    onOpen();\n    focusMenu();\n  }, [onOpen, focusMenu]);\n  var timeoutIds = useRef2( /* @__PURE__ */new Set([]));\n  useUnmountEffect(function () {\n    timeoutIds.current.forEach(function (id2) {\n      return clearTimeout(id2);\n    });\n    timeoutIds.current.clear();\n  });\n  var openAndFocusFirstItem = useCallback(function () {\n    onOpen();\n    focusFirstItem();\n  }, [focusFirstItem, onOpen]);\n  var openAndFocusLastItem = useCallback(function () {\n    onOpen();\n    focusLastItem();\n  }, [onOpen, focusLastItem]);\n  var refocus = useCallback(function () {\n    var _a, _b;\n    var doc = getOwnerDocument(menuRef.current);\n    var hasFocusWithin = (_a = menuRef.current) == null ? void 0 : _a.contains(doc.activeElement);\n    var shouldRefocus = isOpen && !hasFocusWithin;\n    if (!shouldRefocus) return;\n    var node = (_b = descendants.item(focusedIndex)) == null ? void 0 : _b.node;\n    node == null ? void 0 : node.focus();\n  }, [isOpen, focusedIndex, descendants]);\n  return {\n    openAndFocusMenu: openAndFocusMenu,\n    openAndFocusFirstItem: openAndFocusFirstItem,\n    openAndFocusLastItem: openAndFocusLastItem,\n    onTransitionEnd: refocus,\n    unstable__animationState: animationState,\n    descendants: descendants,\n    popper: popper,\n    buttonId: buttonId,\n    menuId: menuId,\n    forceUpdate: popper.forceUpdate,\n    orientation: \"vertical\",\n    isOpen: isOpen,\n    onToggle: onToggle,\n    onOpen: onOpen,\n    onClose: onClose,\n    menuRef: menuRef,\n    buttonRef: buttonRef,\n    focusedIndex: focusedIndex,\n    closeOnSelect: closeOnSelect,\n    closeOnBlur: closeOnBlur,\n    autoSelect: autoSelect,\n    setFocusedIndex: setFocusedIndex,\n    isLazy: isLazy,\n    lazyBehavior: lazyBehavior\n  };\n}\nfunction useMenuButton() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var externalRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var menu = useMenuContext();\n  var onToggle = menu.onToggle,\n    popper = menu.popper,\n    openAndFocusFirstItem = menu.openAndFocusFirstItem,\n    openAndFocusLastItem = menu.openAndFocusLastItem;\n  var onKeyDown = useCallback(function (event) {\n    var eventKey = event.key;\n    var keyMap = {\n      Enter: openAndFocusFirstItem,\n      ArrowDown: openAndFocusFirstItem,\n      ArrowUp: openAndFocusLastItem\n    };\n    var action = keyMap[eventKey];\n    if (action) {\n      event.preventDefault();\n      event.stopPropagation();\n      action(event);\n    }\n  }, [openAndFocusFirstItem, openAndFocusLastItem]);\n  return _objectSpread({}, props, {\n    ref: mergeRefs(menu.buttonRef, externalRef, popper.referenceRef),\n    id: menu.buttonId,\n    \"data-active\": dataAttr(menu.isOpen),\n    \"aria-expanded\": menu.isOpen,\n    \"aria-haspopup\": \"menu\",\n    \"aria-controls\": menu.menuId,\n    onClick: callAllHandlers(props.onClick, onToggle),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  });\n}\nfunction isTargetMenuItem(target) {\n  var _a;\n  return isHTMLElement(target) && !!((_a = target == null ? void 0 : target.getAttribute(\"role\")) == null ? void 0 : _a.startsWith(\"menuitem\"));\n}\nfunction useMenuList() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var menu = useMenuContext();\n  if (!menu) {\n    throw new Error(\"useMenuContext: context is undefined. Seems you forgot to wrap component within <Menu>\");\n  }\n  var focusedIndex = menu.focusedIndex,\n    setFocusedIndex = menu.setFocusedIndex,\n    menuRef = menu.menuRef,\n    isOpen = menu.isOpen,\n    onClose = menu.onClose,\n    menuId = menu.menuId,\n    isLazy = menu.isLazy,\n    lazyBehavior = menu.lazyBehavior,\n    animated = menu.unstable__animationState;\n  var descendants = useMenuDescendantsContext();\n  var createTypeaheadHandler = useShortcut({\n    preventDefault: function preventDefault(event) {\n      return event.key !== \" \" && isTargetMenuItem(event.target);\n    }\n  });\n  var onKeyDown = useCallback(function (event) {\n    var eventKey = event.key;\n    var keyMap = {\n      Tab: function Tab(event2) {\n        return event2.preventDefault();\n      },\n      Escape: onClose,\n      ArrowDown: function ArrowDown() {\n        var next = descendants.nextEnabled(focusedIndex);\n        if (next) setFocusedIndex(next.index);\n      },\n      ArrowUp: function ArrowUp() {\n        var prev = descendants.prevEnabled(focusedIndex);\n        if (prev) setFocusedIndex(prev.index);\n      }\n    };\n    var fn = keyMap[eventKey];\n    if (fn) {\n      event.preventDefault();\n      fn(event);\n      return;\n    }\n    var onTypeahead = createTypeaheadHandler(function (character) {\n      var nextItem = getNextItemFromSearch(descendants.values(), character, function (item) {\n        var _a;\n        return ((_a = item == null ? void 0 : item.node) == null ? void 0 : _a.textContent) ?? \"\";\n      }, descendants.item(focusedIndex));\n      if (nextItem) {\n        var index = descendants.indexOf(nextItem.node);\n        setFocusedIndex(index);\n      }\n    });\n    if (isTargetMenuItem(event.target)) {\n      onTypeahead(event);\n    }\n  }, [descendants, focusedIndex, createTypeaheadHandler, onClose, setFocusedIndex]);\n  var hasBeenOpened = useRef2(false);\n  if (isOpen) {\n    hasBeenOpened.current = true;\n  }\n  var shouldRenderChildren = lazyDisclosure({\n    wasSelected: hasBeenOpened.current,\n    enabled: isLazy,\n    mode: lazyBehavior,\n    isSelected: animated.present\n  });\n  return _objectSpread({}, props, {\n    ref: mergeRefs(menuRef, ref),\n    children: shouldRenderChildren ? props.children : null,\n    tabIndex: -1,\n    role: \"menu\",\n    id: menuId,\n    style: _objectSpread({}, props.style, {\n      transformOrigin: \"var(--popper-transform-origin)\"\n    }),\n    \"aria-orientation\": \"vertical\",\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  });\n}\nfunction useMenuPositioner() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _useMenuContext = useMenuContext(),\n    popper = _useMenuContext.popper,\n    isOpen = _useMenuContext.isOpen;\n  return popper.getPopperProps(_objectSpread({}, props, {\n    style: _objectSpread({\n      visibility: isOpen ? \"visible\" : \"hidden\"\n    }, props.style)\n  }));\n}\nfunction useMenuItem() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var externalRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var onMouseEnterProp = props.onMouseEnter,\n    onMouseMoveProp = props.onMouseMove,\n    onMouseLeaveProp = props.onMouseLeave,\n    onClickProp = props.onClick,\n    isDisabled = props.isDisabled,\n    isFocusable = props.isFocusable,\n    closeOnSelect = props.closeOnSelect,\n    typeProp = props.type,\n    htmlProps = _objectWithoutProperties(props, [\"onMouseEnter\", \"onMouseMove\", \"onMouseLeave\", \"onClick\", \"isDisabled\", \"isFocusable\", \"closeOnSelect\", \"type\"]);\n  var menu = useMenuContext();\n  var setFocusedIndex = menu.setFocusedIndex,\n    focusedIndex = menu.focusedIndex,\n    menuCloseOnSelect = menu.closeOnSelect,\n    onClose = menu.onClose,\n    menuRef = menu.menuRef,\n    isOpen = menu.isOpen,\n    menuId = menu.menuId;\n  var ref = useRef2(null);\n  var id = \"\".concat(menuId, \"-menuitem-\").concat(useId());\n  var _useMenuDescendant = useMenuDescendant({\n      disabled: isDisabled && !isFocusable\n    }),\n    index = _useMenuDescendant.index,\n    register = _useMenuDescendant.register;\n  var onMouseEnter = useCallback(function (event) {\n    onMouseEnterProp == null ? void 0 : onMouseEnterProp(event);\n    if (isDisabled) return;\n    setFocusedIndex(index);\n  }, [setFocusedIndex, index, isDisabled, onMouseEnterProp]);\n  var onMouseMove = useCallback(function (event) {\n    onMouseMoveProp == null ? void 0 : onMouseMoveProp(event);\n    if (ref.current && !isActiveElement(ref.current)) {\n      onMouseEnter(event);\n    }\n  }, [onMouseEnter, onMouseMoveProp]);\n  var onMouseLeave = useCallback(function (event) {\n    onMouseLeaveProp == null ? void 0 : onMouseLeaveProp(event);\n    if (isDisabled) return;\n    setFocusedIndex(-1);\n  }, [setFocusedIndex, isDisabled, onMouseLeaveProp]);\n  var onClick = useCallback(function (event) {\n    onClickProp == null ? void 0 : onClickProp(event);\n    if (!isTargetMenuItem(event.currentTarget)) return;\n    if (closeOnSelect ?? menuCloseOnSelect) {\n      onClose();\n    }\n  }, [onClose, onClickProp, menuCloseOnSelect, closeOnSelect]);\n  var isFocused = index === focusedIndex;\n  var trulyDisabled = isDisabled && !isFocusable;\n  useUpdateEffect(function () {\n    if (!isOpen) return;\n    if (isFocused && !trulyDisabled && ref.current) {\n      requestAnimationFrame(function () {\n        var _a;\n        (_a = ref.current) == null ? void 0 : _a.focus();\n      });\n    } else if (menuRef.current && !isActiveElement(menuRef.current)) {\n      menuRef.current.focus();\n    }\n  }, [isFocused, trulyDisabled, menuRef, isOpen]);\n  var clickableProps = useClickable({\n    onClick: onClick,\n    onMouseEnter: onMouseEnter,\n    onMouseMove: onMouseMove,\n    onMouseLeave: onMouseLeave,\n    ref: mergeRefs(register, ref, externalRef),\n    isDisabled: isDisabled,\n    isFocusable: isFocusable\n  });\n  return _objectSpread({}, htmlProps, clickableProps, {\n    type: typeProp ?? clickableProps.type,\n    id: id,\n    role: \"menuitem\",\n    tabIndex: isFocused ? 0 : -1\n  });\n}\nfunction useMenuOption() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var _props$type = props.type,\n    type = _props$type === void 0 ? \"radio\" : _props$type,\n    isChecked = props.isChecked,\n    rest = _objectWithoutProperties(props, [\"type\", \"isChecked\"]);\n  var ownProps = useMenuItem(rest, ref);\n  return _objectSpread({}, ownProps, {\n    role: \"menuitem\".concat(type),\n    \"aria-checked\": isChecked\n  });\n}\nfunction useMenuOptionGroup() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var children = props.children,\n    _props$type2 = props.type,\n    type = _props$type2 === void 0 ? \"radio\" : _props$type2,\n    valueProp = props.value,\n    defaultValue = props.defaultValue,\n    onChangeProp = props.onChange,\n    htmlProps = _objectWithoutProperties(props, [\"children\", \"type\", \"value\", \"defaultValue\", \"onChange\"]);\n  var isRadio = type === \"radio\";\n  var fallback = isRadio ? \"\" : [];\n  var _useControllableState = useControllableState({\n      defaultValue: defaultValue ?? fallback,\n      value: valueProp,\n      onChange: onChangeProp\n    }),\n    _useControllableState2 = _slicedToArray(_useControllableState, 2),\n    value = _useControllableState2[0],\n    setValue = _useControllableState2[1];\n  var onChange = useCallback(function (selectedValue) {\n    if (type === \"radio\" && typeof value === \"string\") {\n      setValue(selectedValue);\n    }\n    if (type === \"checkbox\" && Array.isArray(value)) {\n      var nextValue = value.includes(selectedValue) ? value.filter(function (item) {\n        return item !== selectedValue;\n      }) : value.concat(selectedValue);\n      setValue(nextValue);\n    }\n  }, [value, setValue, type]);\n  var validChildren = getValidChildren(children);\n  var clones = validChildren.map(function (child) {\n    if (child.type.id !== \"MenuItemOption\") return child;\n    var onClick = function onClick(event) {\n      var _a, _b;\n      onChange(child.props.value);\n      (_b = (_a = child.props).onClick) == null ? void 0 : _b.call(_a, event);\n    };\n    var isChecked = type === \"radio\" ? child.props.value === value : value.includes(child.props.value);\n    return cloneElement(child, {\n      type: type,\n      onClick: onClick,\n      isChecked: isChecked\n    });\n  });\n  return _objectSpread({}, htmlProps, {\n    children: clones\n  });\n}\nfunction useMenuState() {\n  var _useMenuContext2 = useMenuContext(),\n    isOpen = _useMenuContext2.isOpen,\n    onClose = _useMenuContext2.onClose;\n  return {\n    isOpen: isOpen,\n    onClose: onClose\n  };\n}\nfunction isHTMLElement(el) {\n  if (!isElement(el)) return false;\n  var win = el.ownerDocument.defaultView ?? window;\n  return el instanceof win.HTMLElement;\n}\nfunction isElement(el) {\n  return el != null && typeof el == \"object\" && \"nodeType\" in el && el.nodeType === Node.ELEMENT_NODE;\n}\nfunction useUnmountEffect(fn) {\n  var deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return useEffect2(function () {\n    return function () {\n      return fn();\n    };\n  }, deps);\n}\n\n// src/menu.tsx\nvar _createContext3 = createContext2({\n    name: \"MenuStylesContext\",\n    errorMessage: \"useMenuStyles returned is 'undefined'. Seems you forgot to wrap the components in \\\"<Menu />\\\" \"\n  }),\n  _createContext4 = _slicedToArray(_createContext3, 2),\n  MenuStylesProvider = _createContext4[0],\n  useMenuStyles = _createContext4[1];\nvar Menu = function Menu(props) {\n  var children = props.children;\n  var styles = useMultiStyleConfig(\"Menu\", props);\n  var ownProps = omitThemingProps(props);\n  var _useTheme = useTheme(),\n    direction = _useTheme.direction;\n  var _useMenu = useMenu(_objectSpread({}, ownProps, {\n      direction: direction\n    })),\n    descendants = _useMenu.descendants,\n    ctx = _objectWithoutProperties(_useMenu, [\"descendants\"]);\n  var context = useMemo2(function () {\n    return ctx;\n  }, [ctx]);\n  var isOpen = context.isOpen,\n    onClose = context.onClose,\n    forceUpdate = context.forceUpdate;\n  return /* @__PURE__ */React.createElement(MenuDescendantsProvider, {\n    value: descendants\n  }, /* @__PURE__ */React.createElement(MenuProvider, {\n    value: context\n  }, /* @__PURE__ */React.createElement(MenuStylesProvider, {\n    value: styles\n  }, runIfFn(children, {\n    isOpen: isOpen,\n    onClose: onClose,\n    forceUpdate: forceUpdate\n  }))));\n};\nMenu.displayName = \"Menu\";\n\n// src/menu-button.tsx\nvar StyledMenuButton = forwardRef(function (props, ref) {\n  var styles = useMenuStyles();\n  return /* @__PURE__ */React.createElement(chakra.button, _objectSpread({\n    ref: ref\n  }, props, {\n    __css: _objectSpread({\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      outline: 0\n    }, styles.button)\n  }));\n});\nvar MenuButton = forwardRef(function (props, ref) {\n  var children = props.children,\n    As = props.as,\n    rest = _objectWithoutProperties(props, [\"children\", \"as\"]);\n  var buttonProps = useMenuButton(rest, ref);\n  var Element = As || StyledMenuButton;\n  return /* @__PURE__ */React.createElement(Element, _objectSpread({}, buttonProps, {\n    className: cx(\"chakra-menu__menu-button\", props.className)\n  }), /* @__PURE__ */React.createElement(chakra.span, {\n    __css: {\n      pointerEvents: \"none\",\n      flex: \"1 1 auto\",\n      minW: 0\n    }\n  }, props.children));\n});\nMenuButton.displayName = \"MenuButton\";\n\n// src/menu-command.tsx\nimport { chakra as chakra2, forwardRef as forwardRef2 } from \"@chakra-ui/system\";\nvar MenuCommand = forwardRef2(function (props, ref) {\n  var styles = useMenuStyles();\n  return /* @__PURE__ */React.createElement(chakra2.span, _objectSpread({\n    ref: ref\n  }, props, {\n    __css: styles.command,\n    className: \"chakra-menu__command\"\n  }));\n});\nMenuCommand.displayName = \"MenuCommand\";\n\n// src/menu-divider.tsx\nimport { chakra as chakra3 } from \"@chakra-ui/system\";\nvar MenuDivider = function MenuDivider(props) {\n  var className = props.className,\n    rest = _objectWithoutProperties(props, [\"className\"]);\n  var styles = useMenuStyles();\n  return /* @__PURE__ */React.createElement(chakra3.hr, _objectSpread({\n    \"aria-orientation\": \"horizontal\",\n    className: cx(\"chakra-menu__divider\", className)\n  }, rest, {\n    __css: styles.divider\n  }));\n};\nMenuDivider.displayName = \"MenuDivider\";\n\n// src/menu-group.tsx\nimport { chakra as chakra4, forwardRef as forwardRef3 } from \"@chakra-ui/system\";\nvar MenuGroup = forwardRef3(function (props, ref) {\n  var title = props.title,\n    children = props.children,\n    className = props.className,\n    rest = _objectWithoutProperties(props, [\"title\", \"children\", \"className\"]);\n  var _className = cx(\"chakra-menu__group__title\", className);\n  var styles = useMenuStyles();\n  return /* @__PURE__ */React.createElement(\"div\", {\n    ref: ref,\n    className: \"chakra-menu__group\",\n    role: \"group\"\n  }, title && /* @__PURE__ */React.createElement(chakra4.p, _objectSpread({\n    className: _className\n  }, rest, {\n    __css: styles.groupTitle\n  }), title), children);\n});\nMenuGroup.displayName = \"MenuGroup\";\n\n// src/menu-icon.tsx\nimport { chakra as chakra5 } from \"@chakra-ui/system\";\nimport { Children, cloneElement as cloneElement2, isValidElement } from \"react\";\nvar MenuIcon = function MenuIcon(props) {\n  var className = props.className,\n    children = props.children,\n    rest = _objectWithoutProperties(props, [\"className\", \"children\"]);\n  var child = Children.only(children);\n  var clone = isValidElement(child) ? cloneElement2(child, {\n    focusable: \"false\",\n    \"aria-hidden\": true,\n    className: cx(\"chakra-menu__icon\", child.props.className)\n  }) : null;\n  var _className = cx(\"chakra-menu__icon-wrapper\", className);\n  return /* @__PURE__ */React.createElement(chakra5.span, _objectSpread({\n    className: _className\n  }, rest, {\n    __css: {\n      flexShrink: 0\n    }\n  }), clone);\n};\nMenuIcon.displayName = \"MenuIcon\";\n\n// src/menu-item-option.tsx\nimport { forwardRef as forwardRef5 } from \"@chakra-ui/system\";\n\n// src/styled-menu-item.tsx\nimport { chakra as chakra6, forwardRef as forwardRef4 } from \"@chakra-ui/system\";\nimport { useMemo as useMemo3 } from \"react\";\nvar StyledMenuItem = forwardRef4(function (props, ref) {\n  var type = props.type,\n    rest = _objectWithoutProperties(props, [\"type\"]);\n  var styles = useMenuStyles();\n  var btnType = rest.as || type ? type ?? void 0 : \"button\";\n  var buttonStyles = useMemo3(function () {\n    return _objectSpread({\n      textDecoration: \"none\",\n      color: \"inherit\",\n      userSelect: \"none\",\n      display: \"flex\",\n      width: \"100%\",\n      alignItems: \"center\",\n      textAlign: \"start\",\n      flex: \"0 0 auto\",\n      outline: 0\n    }, styles.item);\n  }, [styles.item]);\n  return /* @__PURE__ */React.createElement(chakra6.button, _objectSpread({\n    ref: ref,\n    type: btnType\n  }, rest, {\n    __css: buttonStyles\n  }));\n});\n\n// src/menu-item-option.tsx\nvar CheckIcon = function CheckIcon(props) {\n  return /* @__PURE__ */React.createElement(\"svg\", _objectSpread({\n    viewBox: \"0 0 14 14\",\n    width: \"1em\",\n    height: \"1em\"\n  }, props), /* @__PURE__ */React.createElement(\"polygon\", {\n    fill: \"currentColor\",\n    points: \"5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039\"\n  }));\n};\nvar MenuItemOption = forwardRef5(function (props, ref) {\n  var icon = props.icon,\n    _props$iconSpacing = props.iconSpacing,\n    iconSpacing = _props$iconSpacing === void 0 ? \"0.75rem\" : _props$iconSpacing,\n    rest = _objectWithoutProperties(props, [\"icon\", \"iconSpacing\"]);\n  var optionProps = useMenuOption(rest, ref);\n  return /* @__PURE__ */React.createElement(StyledMenuItem, _objectSpread({}, optionProps, {\n    className: cx(\"chakra-menu__menuitem-option\", rest.className)\n  }), icon !== null && /* @__PURE__ */React.createElement(MenuIcon, {\n    fontSize: \"0.8em\",\n    marginEnd: iconSpacing,\n    opacity: props.isChecked ? 1 : 0\n  }, icon || /* @__PURE__ */React.createElement(CheckIcon, null)), /* @__PURE__ */React.createElement(\"span\", {\n    style: {\n      flex: 1\n    }\n  }, optionProps.children));\n});\nMenuItemOption.id = \"MenuItemOption\";\nMenuItemOption.displayName = \"MenuItemOption\";\n\n// src/menu-item.tsx\nimport { forwardRef as forwardRef6 } from \"@chakra-ui/system\";\nvar MenuItem = forwardRef6(function (props, ref) {\n  var icon = props.icon,\n    _props$iconSpacing2 = props.iconSpacing,\n    iconSpacing = _props$iconSpacing2 === void 0 ? \"0.75rem\" : _props$iconSpacing2,\n    command = props.command,\n    _props$commandSpacing = props.commandSpacing,\n    commandSpacing = _props$commandSpacing === void 0 ? \"0.75rem\" : _props$commandSpacing,\n    children = props.children,\n    rest = _objectWithoutProperties(props, [\"icon\", \"iconSpacing\", \"command\", \"commandSpacing\", \"children\"]);\n  var menuitemProps = useMenuItem(rest, ref);\n  var shouldWrap = icon || command;\n  var _children = shouldWrap ? /* @__PURE__ */React.createElement(\"span\", {\n    style: {\n      pointerEvents: \"none\",\n      flex: 1\n    }\n  }, children) : children;\n  return /* @__PURE__ */React.createElement(StyledMenuItem, _objectSpread({}, menuitemProps, {\n    className: cx(\"chakra-menu__menuitem\", menuitemProps.className)\n  }), icon && /* @__PURE__ */React.createElement(MenuIcon, {\n    fontSize: \"0.8em\",\n    marginEnd: iconSpacing\n  }, icon), _children, command && /* @__PURE__ */React.createElement(MenuCommand, {\n    marginStart: commandSpacing\n  }, command));\n});\nMenuItem.displayName = \"MenuItem\";\n\n// src/menu-list.tsx\nimport { chakra as chakra7, forwardRef as forwardRef7 } from \"@chakra-ui/system\";\nimport { motion } from \"framer-motion\";\nvar motionVariants = {\n  enter: {\n    visibility: \"visible\",\n    opacity: 1,\n    scale: 1,\n    transition: {\n      duration: 0.2,\n      ease: [0.4, 0, 0.2, 1]\n    }\n  },\n  exit: {\n    transitionEnd: {\n      visibility: \"hidden\"\n    },\n    opacity: 0,\n    scale: 0.8,\n    transition: {\n      duration: 0.1,\n      easings: \"easeOut\"\n    }\n  }\n};\nvar MenuTransition = chakra7(motion.div);\nvar MenuList = forwardRef7(function MenuList2(props, ref) {\n  var _a;\n  var rootProps = props.rootProps,\n    motionProps = props.motionProps,\n    rest = _objectWithoutProperties(props, [\"rootProps\", \"motionProps\"]);\n  var _useMenuContext3 = useMenuContext(),\n    isOpen = _useMenuContext3.isOpen,\n    onTransitionEnd = _useMenuContext3.onTransitionEnd,\n    animated = _useMenuContext3.unstable__animationState;\n  var listProps = useMenuList(rest, ref);\n  var positionerProps = useMenuPositioner(rootProps);\n  var styles = useMenuStyles();\n  return /* @__PURE__ */React.createElement(chakra7.div, _objectSpread({}, positionerProps, {\n    __css: {\n      zIndex: props.zIndex ?? ((_a = styles.list) == null ? void 0 : _a.zIndex)\n    }\n  }), /* @__PURE__ */React.createElement(MenuTransition, _objectSpread({\n    variants: motionVariants,\n    initial: false,\n    animate: isOpen ? \"enter\" : \"exit\",\n    __css: _objectSpread({\n      outline: 0\n    }, styles.list)\n  }, motionProps, {\n    className: cx(\"chakra-menu__menu-list\", listProps.className)\n  }, listProps, {\n    onUpdate: onTransitionEnd,\n    onAnimationComplete: callAll(animated.onComplete, listProps.onAnimationComplete)\n  })));\n});\nMenuList.displayName = \"MenuList\";\n\n// src/menu-option-group.tsx\nvar MenuOptionGroup = function MenuOptionGroup(props) {\n  var className = props.className,\n    title = props.title,\n    rest = _objectWithoutProperties(props, [\"className\", \"title\"]);\n  var ownProps = useMenuOptionGroup(rest);\n  return /* @__PURE__ */React.createElement(MenuGroup, _objectSpread({\n    title: title,\n    className: cx(\"chakra-menu__option-group\", className)\n  }, ownProps));\n};\nMenuOptionGroup.displayName = \"MenuOptionGroup\";\nexport { Menu, MenuButton, MenuCommand, MenuDescendantsProvider, MenuDivider, MenuGroup, MenuIcon, MenuItem, MenuItemOption, MenuList, MenuOptionGroup, MenuProvider, useMenu, useMenuButton, useMenuContext, useMenuDescendant, useMenuDescendants, useMenuDescendantsContext, useMenuItem, useMenuList, useMenuOption, useMenuOptionGroup, useMenuPositioner, useMenuState, useMenuStyles };","map":null,"metadata":{},"sourceType":"module"}